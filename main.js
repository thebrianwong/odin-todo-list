(()=>{"use strict";const e=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},t=(()=>{let s=0;const n=()=>s;let a={getCurrentTabIndex:n,setCurrentTabIndex:e=>{s=e},getCurrentTabObject:()=>{const e=n();return t.getSpecificChecklistTask(e)}};return Object.assign(a,e(a)),a})(),s=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},n=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t},a=e=>document.querySelector(`[data-task-index='${e}']`),c=e=>t.getSpecificChecklistTask(e),o=(e,t)=>c(e).getSpecificChecklistTask(t);return{checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},getTaskIndex:e=>{const t=(e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t})(e);return t.dataset.taskIndex},getChecklistTaskIndex:e=>n(e).dataset.checklistTaskIndex,getTabIndex:t=>e(t).dataset.tabIndex,getNewValue:e=>e.target.value,getTaskSubcontainerType:e=>{const t=s(e),n=Array.from(t.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(e,t)=>{const s=a(e);let n;return"Title"===t?n=s.querySelector(".to-do-title-section"):"Due Date"===t?n=s.querySelector(".to-do-due-date-section"):"Description"===t?n=s.querySelector(".to-do-description-section"):"Notes"===t&&(n=s.querySelector(".to-do-notes-section")),n},getTaskElement:a,getChecklistTaskElement:(e,t)=>a(e).querySelector(`[data-checklist-task-index='${t}']`),getTabElement:e=>document.querySelector(`[data-tab-index='${e}']`),checkForExistingInputElement:(t,a)=>{let c;return"Tab"===a?c=e(t).querySelector(".tab-name-input"):"Task"===a?c=s(t).querySelector(".task-input"):"Checklist Task"===a&&(c=n(t).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==c},tryingToDoubleClick:e=>{const t=a(e);return!!Array.from(t.classList).includes("mid-animation")},getTabObject:c,getTaskObject:o,getChecklistTaskObject:(e,t,s)=>o(e,t).getSpecificChecklistTask(s)}})(),a=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},c=(e,t)=>{let s=t;return Object.assign(e,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},o=(n="New Tab")=>{const a=(t=>{let n={};return Object.assign(n,s(n,t),e(n)),n})(n);return t.addTask(a)},i=(e,s)=>{t.getSpecificChecklistTask(e).setTaskTitle(s)},l=e=>{t.setCurrentTabIndex(e)},r=()=>{const e=t.getChecklistTasks();let s;for(const n in e)if(void 0!==e[n])return t.setCurrentTabIndex(n),s=n,s},d=(n="New Task Title",o="Task Due Date",i="Task Description",l="Task Notes",r=!1,d=!1)=>{const k=t.getCurrentTabIndex(),u=t.getSpecificChecklistTask(k),T=((t,n,o,i,l,r)=>{let d={};return Object.assign(d,s(d,t),a(d,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(d,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(d,i),((e,t)=>{let s=t;return Object.assign(e,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,l),c(d,r),e(d)),d})(n,o,i,l,r,d);return u.addTask(T)},k=(e,s,n)=>{const a=t.getCurrentTabObject().getSpecificChecklistTask(e);"Title"===s?a.setTaskTitle(n):"Due Date"===s?a.setTaskDueDate(n):"Description"===s?a.setTaskDescription(n):"Notes"===s&&a.setTaskNotes(n)},u=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).toggleCompletedState()},T=(e,s="Checklist Task Description",n=!1)=>{const o=t.getCurrentTabObject().getSpecificChecklistTask(e),i=((e,t)=>{let s={};return Object.assign(s,a(s,e),c(s,t)),s})(s,n);return o.addTask(i)},g=(e,s,n)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).setTaskDescription(n)},m=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).toggleCompletedState()},p=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).togglePinnedState()},b=()=>{document.querySelector(".add-tab").addEventListener("click",X.addTab)},h=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",X.insertTabInputElement)},C=e=>{e.addEventListener("keydown",X.updateTab)},f=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",X.removeTab)},S=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",X.switchTab)},y=()=>{document.querySelector(".new-to-do-task").addEventListener("click",X.newTask)},E=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",X.removeTask)},v=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",X.insertTaskInputElement)},D=e=>{e.addEventListener("keydown",X.updateTask)},L=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",X.toggleTaskComplete)},I=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",X.addNewChecklistTask)},O=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",X.insertChecklistTaskInputElement)},A=e=>{e.addEventListener("keydown",X.updateChecklistTask)},q=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",X.toggleChecklistTaskComplete)},x=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",X.removeChecklistTask)},N=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",X.toggleTaskPin)},w=(e=document)=>{const t=e.querySelectorAll(".to-do-task-change-display");for(const e of t)e.addEventListener("click",X.toggleDisplayTaskDetails)},j=(()=>{const e=e=>{const s=t.getCurrentTabObject().getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),a=document.createElement("div");a.classList.add("to-do-task"),a.dataset.taskIndex=e;const c=s.getTaskTitle(),o=s.getTaskDescription(),i=s.getTaskDueDate(),l=s.getTaskNotes(),r=`to-do-complete-checkbox-${e}`;return a.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',a.querySelector(".to-do-title").textContent=c,a.querySelector(".to-do-due-date").textContent="Due On: "+i,a.querySelector(".to-do-description").textContent="Description: "+o,a.querySelector(".to-do-notes").textContent="Notes: "+l,n.appendChild(a),a.querySelector("label").setAttribute("for",r),a.querySelector(".to-do-complete-checkbox").setAttribute("id",r),a},s=e=>{const s=n.getTaskElement(e),a=s.querySelector(".to-do-complete-checkbox");t.getCurrentTabObject().getSpecificChecklistTask(e).getCompletedState()?(a.checked=!0,s.classList.add("task-completed")):(a.checked=!1,s.classList.remove("task-completed"))},a=(e,s)=>{const a=n.getTaskElement(e).querySelector(".checklist"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("div");return o.classList.add("checklist-task"),o.dataset.checklistTaskIndex=s,o.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${e}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${e}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,o.querySelector(".checklist-task-description").textContent=c,a.appendChild(o),o},c=(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s);a.checked=c.getCompletedState(),c.getCompletedState()?a.classList.add("checklist-task-completed"):a.classList.remove("checklist-task-completed")},o=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,a=s.getSpecificChecklistTask(n),c=e.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},i=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,a=s.getSpecificChecklistTask(n),c=document.querySelector(".to-do-content");if(a.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)c.insertBefore(e,c.firstElementChild);else{const s=t[t.length-1];for(const a of t){if(n<a.dataset.taskIndex){c.insertBefore(e,a);break}a===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}};return{addNewTabToDOM:e=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),a=document.createElement("div"),c=t.getSpecificChecklistTask(e).getTaskTitle();return a.classList.add("tab-title"),a.dataset.tabIndex=e,a.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',a.querySelector(".tab-name").textContent=c,n.insertBefore(a,s),a},setTabInputElementValue:e=>{const s=n.getTabElement(e).querySelector("input"),a=t.getSpecificChecklistTask(e).getTaskTitle();s.value=a},insertTabInputElement:e=>{const t=n.getTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},insertTabNameElement:e=>{const s=n.getTabElement(e),a=t.getSpecificChecklistTask(e).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const o=document.createElement("h2");return o.classList.add("tab-name"),o.textContent=a,c.appendChild(o),s.insertBefore(c,s.firstChild),s},setDefaultCurrentTabDOM:e=>{const t=n.getTabElement(e);null!==t&&t.setAttribute("id","current-tab")},setCurrentTabDOM:e=>{n.getTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&n.getTabElement(e).setAttribute("id","current-tab")},addNewTaskToDOM:e,insertTaskInputElement:(e,t)=>{const s=n.getTaskSubcontainerElement(e,t),a=document.createElement("input");return a.classList.add("task-input"),a.setAttribute("type","text"),s.insertBefore(a,s.firstChild),a.focus(),a},setTaskInputElementValue:(e,s)=>{const a=n.getTaskSubcontainerElement(e,s).querySelector("input"),c=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;"Title"===s?o=c.getTaskTitle():"Due Date"===s?o=c.getTaskDueDate():"Description"===s?o=c.getTaskDescription():"Notes"===s&&(o=c.getTaskNotes()),a.value=o},insertTaskSubcontentElement:(e,s)=>{const a=n.getTaskSubcontainerElement(e,s),c=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;if("Title"===s){const e=c.getTaskTitle();o=document.createElement("h3"),o.classList.add("to-do-title"),o.textContent=e}else if("Due Date"===s){const e=c.getTaskDueDate();o=document.createElement("p"),o.classList.add("to-do-due-date"),o.textContent="Due On: "+e}else if("Description"===s){const e=c.getTaskDescription();o=document.createElement("p"),o.classList.add("to-do-description"),o.textContent="Description: "+e}else if("Notes"===s){const e=c.getTaskNotes();o=document.createElement("p"),o.classList.add("to-do-notes"),o.textContent="Notes: "+e}a.insertBefore(o,a.firstChild)},toggleTaskDOMComplete:s,addNewChecklistTaskToDOM:a,insertChecklistTaskInputElement:(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section"),a=document.createElement("input");return a.classList.add("checklist-input"),a.setAttribute("type","text"),s.appendChild(a),a.focus(),a},setChecklistTaskInputElementValue:(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-input"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription();a.value=c},insertChecklistTaskDescriptionElement:(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("label");o.setAttribute("for",`checklist-${e}-${s}`),o.classList.add("checklist-task-description"),o.textContent=c,a.appendChild(o)},toggleChecklistTaskDOMComplete:c,changePinButtonImage:e=>{const s=n.getTaskElement(e),a=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:e=>{const s=n.getTaskElement(e),a=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.dataset.taskIndex,o=document.querySelector(".to-do-content");if(a.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)o.insertBefore(s,o.firstElementChild);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){o.insertBefore(s,n);break}n===t&&t.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const e=Array.from(o.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)o.appendChild(s);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){o.insertBefore(s,n);break}n===t&&o.appendChild(s,t)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=t.getCurrentTabObject().getChecklistTasks();for(const t in n){const l=n[t];if(void 0!==l){const n=e(t);o(n),i(n),s(t),X.addTaskListeners(n);const r=l.getChecklistTasks();for(const e in r)if(void 0!==r[e]){const s=a(t,e);c(t,e),X.addChecklistTaskListeners(s)}}}},toggleDisplayTaskDetails:e=>{const t=n.getTaskElement(e);Array.from(t.querySelectorAll(".animation-target")).forEach((e=>{Array.from(e.classList).includes("hide-to-do-details")?(e.classList.remove("hide-to-do-details"),e.classList.add("display-to-do-details"),e.style.display="flex"):(e.classList.add("hide-to-do-details"),e.classList.remove("display-to-do-details"),setTimeout((()=>{e.style.display="none"}),1e3))})),(e=>{e.classList.add("mid-animation"),setTimeout((()=>{e.classList.remove("mid-animation")}),1e3)})(t)},rotateChevronButton:e=>{const t=n.getTaskElement(e).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(t.classList);0===s.length||s.includes("rotate-hide-task-details")?(t.classList.remove("rotate-hide-task-details"),t.classList.add("rotate-display-task-details"),t.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(t.classList.remove("rotate-display-task-details"),t.classList.add("rotate-hide-task-details"),t.classList.remove("rotated-chevron"))},toggleAnimations:(e,t)=>{const s=n.getTaskElement(e),a=s.querySelector(".to-do-task-change-display").querySelector("img"),c=Array.from(s.querySelectorAll(".animation-target"));c.push(a),c.forEach((e=>{"Enable"===t?e.classList.add("no-animations"):"Disable"===t&&e.classList.remove("no-animations")}))}}})(),P=e=>{t.removeTask(e)},$=e=>{t.getCurrentTabObject().removeTask(e)},M=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).removeTask(s)},B=e=>{const t=n.getTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},_=e=>{const t=n.getTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},H=e=>{let t=n.getTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},R=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},F=e=>{let t=n.getTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},V=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let a=s.firstElementChild;s.removeChild(a),a=null},J=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let a=s.querySelector("input");s.removeChild(a),a=null},z=(e,t)=>{const s=n.getChecklistTaskElement(e,t),a=s.querySelector(".checklist-complete-section");let c=s.querySelector(".checklist-task-description");a.removeChild(c),c=null},W=(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-input");s.removeChild(a),a=null},Q=(e,t)=>{const s=n.getTaskElement(e).querySelector(".checklist");let a=n.getChecklistTaskElement(e,t);s.removeChild(a),a=null},U=()=>{document.querySelector(".to-do-content").replaceChildren()},X=(()=>{const e=(e,t="New Tab")=>{const s=o(t),a=j.addNewTabToDOM(s);if(c(a),n.checkIfOnlyOneTab()){const e=r();j.setFirstTabToCurrentTab(e)}},t=(e,t="New Task Title",n="Task Due Date",a="Task Description",c="Task Notes",o=!1,i=!1)=>{const l=d(t,n,a,c,o,i),r=j.addNewTaskToDOM(l);return s(r),l},s=e=>{E(e),v(e),L(e),I(e),N(e),w(e)},a=e=>{O(e),q(e),x(e)},c=e=>{h(e),f(e),S(e)};return{addTab:e,insertTabInputElement:e=>{if(!n.checkForExistingInputElement(e,"Tab")){const t=n.getTabIndex(e),s=j.insertTabInputElement(t);B(t),j.setTabInputElementValue(t),C(s)}},updateTab:e=>{if("Enter"===e.code){const t=n.getTabIndex(e),s=n.getNewValue(e);i(t,s);const a=j.insertTabNameElement(t);_(t),S(a)}},removeTab:e=>{const t=n.getTabIndex(e);if(P(t),H(t),n.checkIfWasCurrentTab(e)){const e=r();j.setFirstTabToCurrentTab(e),U(),j.loadTasksFromNewCurrentTab()}},switchTab:e=>{if(!n.checkIfWasCurrentTab(e)){const t=n.getTabIndex(e);l(t),R(),j.setCurrentTabDOM(t),U(),j.loadTasksFromNewCurrentTab()}},newTask:t,removeTask:e=>{const t=n.getTaskIndex(e);$(t),F(t)},insertTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Task")){const t=n.getTaskIndex(e),s=n.getTaskSubcontainerType(e);V(t,s);const a=j.insertTaskInputElement(t,s);j.setTaskInputElementValue(t,s),D(a)}},updateTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getTaskSubcontainerType(e),a=n.getNewValue(e);k(t,s,a),j.insertTaskSubcontentElement(t,s),J(t,s)}},toggleTaskComplete:e=>{const t=n.getTaskIndex(e);u(t),j.toggleTaskDOMComplete(t)},addNewChecklistTask:e=>{const t=n.getTaskIndex(e),s=T(t),c=j.addNewChecklistTaskToDOM(t,s);a(c)},insertChecklistTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Checklist Task")){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);z(t,s);const a=j.insertChecklistTaskInputElement(t,s);j.setChecklistTaskInputElementValue(t,s),A(a)}},updateChecklistTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e),a=n.getNewValue(e);g(t,s,a),j.insertChecklistTaskDescriptionElement(t,s),W(t,s)}},toggleChecklistTaskComplete:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);m(t,s),j.toggleChecklistTaskDOMComplete(t,s)},removeChecklistTask:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);M(t,s),Q(t,s)},toggleTaskPin:e=>{const t=n.getTaskIndex(e);j.toggleAnimations(t,"Enable"),p(t),j.changePinButtonImage(t),j.shiftTaskElementPosition(t)},addTaskListeners:s,addChecklistTaskListeners:a,toggleDisplayTaskDetails:e=>{const t=n.getTaskIndex(e);n.tryingToDoubleClick(t)||(j.toggleAnimations(t,"Disable"),j.toggleDisplayTaskDetails(t),j.rotateChevronButton(t))},addTabListeners:c,loadInitialPage:()=>{e(event,"Instructions");const s=t(event,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!0,!0);j.toggleTaskDOMComplete(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),(e=>{[["If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!0],["Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!0],["Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!0]].forEach((t=>{const s=T(e,t[0],t[1]),n=j.addNewChecklistTaskToDOM(e,s);j.toggleChecklistTaskDOMComplete(e,s),a(n)}))})(s)}}})(),G=(()=>{const e=()=>{const e=localStorage.getItem("to_do_list");return JSON.parse(e)},s=e=>{const t=JSON.stringify(e);localStorage.setItem("to_do_list",t)};return{initializeTodoList:()=>{const e=`{\n            "current_tab": ${t.getCurrentTabIndex()},\n            "tabs": {}\n        }`,n=JSON.parse(e);s(n)},addTab:t=>{const a=n.getTabObject(t),c=e(),o=`{\n            "title": "${a.getTaskTitle()}",\n            "tasks": {}\n        }`,i=JSON.parse(o);c.tabs[`tab_${t}`]=i,s(c)},addTask:(t,a)=>{const c=n.getTaskObject(t,a),o=e(),i=`{\n            "title": "${c.getTaskTitle()}",\n            "due-date": "${c.getTaskDueDate()}",\n            "description": "${c.getTaskDescription()}",\n            "notes": "${c.getTaskNotes()}",\n            "completed": ${c.getCompletedState()},\n            "pinned": ${c.getPinnedState()},\n            "checklist_tasks": {}\n        }`,l=JSON.parse(i);o.tabs[`tab_${t}`].tasks[`task_${a}`]=l,s(o)},addChecklistTask:(t,a,c)=>{const o=n.getChecklistTaskObject(t,a,c),i=e(),l=`{\n            "description": "${o.getTaskDescription()}",\n            "completed": ${o.getCompletedState()}\n        }`,r=JSON.parse(l);i.tabs[`tab_${t}`].tasks[`task_${a}`].checklist_tasks[`checklist_task_${c}`]=r,s(i)}}})();b(),h(),f(),j.setDefaultCurrentTabDOM(0),S(),y(),E(),v(),L(),I(),O(),q(),x(),N(),w(),X.loadInitialPage(),G.initializeTodoList(),G.addTab(0),G.addTask(0,0),G.addChecklistTask(0,0,0),G.addChecklistTask(0,0,1),G.addChecklistTask(0,0,2),console.log(JSON.parse(localStorage.getItem("to_do_list")))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb19saXN0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2hlbHBlcl9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvb2JqZWN0X2NvbnRyb2xsZXJfYWRkX2VkaXRfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb190YWJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb190YXNrX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9jaGVja2xpc3RfdGFza19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ldmVudF9hc3NpZ25lcl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ET01fY29udHJvbGxlcl9hZGRfZWRpdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX3JlbW92ZV9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ET01fY29udHJvbGxlcl9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3N0b3JhZ2Vfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBjaGVja2xpc3QgPSBbXTtcbiAgICBjb25zdCBnZXRUYXNrSW5kZXggPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3QubGVuZ3RoIC0gMTtcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBhZGRUYXNrKHRhc2spIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdC5wdXNoKHRhc2spO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGNoZWNrbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgcmV0dXJuIGdldFRhc2tJbmRleCgpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVUYXNrKGluZGV4KSB7XG4gICAgICAgICAgICBjaGVja2xpc3RbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrcygpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja2xpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFtpbmRleF07XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH07IiwiLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbmNvbnN0IHRvRG9MaXN0ID0gKCgpID0+IHtcbiAgICBsZXQgY3VycmVudFRhYiA9IDA7XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYkluZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY3VycmVudFRhYjtcbiAgICB9O1xuICAgIGNvbnN0IHNldEN1cnJlbnRUYWJJbmRleCA9IChuZXdDdXJyZW50VGFiKSA9PiB7XG4gICAgICAgIGN1cnJlbnRUYWIgPSBuZXdDdXJyZW50VGFiO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYk9iamVjdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWJPYmplY3Q7XG4gICAgfVxuICAgIGxldCBvYmplY3QgPSB7XG4gICAgICAgIGdldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgc2V0Q3VycmVudFRhYkluZGV4LFxuICAgICAgICBnZXRDdXJyZW50VGFiT2JqZWN0XG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59KSgpO1xuXG5leHBvcnQgeyB0b0RvTGlzdCB9OyIsImNvbnN0IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsVGl0bGUpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBpbml0aWFsVGl0bGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tUaXRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza1RpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcblxuY29uc3QgaGVscGVyRnVuY3Rpb25zID0gKCgpID0+IHtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB3aGlsZSAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gXCJ0YWItdGl0bGVcIikge1xuICAgICAgICAgICAgdGFiRWxlbWVudCA9IHRhYkVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50ID0gKGV2ZW50LCBlbGVtZW50VHlwZSkgPT4ge1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFza1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2staW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiQ2hlY2tsaXN0IFRhc2tcIikge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0lmV2FzQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBpZiAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gXCJjdXJyZW50LXRhYlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZPbmx5T25lVGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJzID0gQXJyYXkuZnJvbSh0b0RvVGFiU2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi10aXRsZVwiKSk7XG4gICAgICAgIGlmICh0b0RvVGFicy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2tcIikpIHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50ID0gdGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QpXG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwidG8tZG8tdGFzay1zdWJjb250YWluZXJcIikpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKGNoZWNrbGlzdFRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwiY2hlY2tsaXN0LXRhc2tcIikpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20oY2hlY2tsaXN0VGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBnZXRUYXNrSW5kZXggPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgcmV0dXJuIHRhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldENoZWNrbGlzdFRhc2tJbmRleCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiSW5kZXggPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHJldHVybiB0YWJJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldE5ld1ZhbHVlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrU3ViY29udGFpbmVyVHlwZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50Q2xhc3NlcyA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250YWluZXJUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tdGl0bGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIlRpdGxlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkR1ZSBEYXRlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkRlc2NyaXB0aW9uXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tbm90ZXMtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIk5vdGVzXCI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyVHlwZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRpdGxlLXNlY3Rpb25cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzLXNlY3Rpb25cIik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tFbGVtZW50ID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhc2staW5kZXg9JyR7dGFza0luZGV4fSddYCk7XG4gICAgICAgIHJldHVybiB0YXNrRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBnZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNoZWNrbGlzdC10YXNrLWluZGV4PScke2NoZWNrbGlzdFRhc2tJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGdldFRhYkVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHt0YWJJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHRyeWluZ1RvRG91YmxlQ2xpY2sgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdGFza0NsYXNzZXMgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIGlmICh0YXNrQ2xhc3Nlcy5pbmNsdWRlcyhcIm1pZC1hbmltYXRpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiT2JqZWN0ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIHJldHVybiB0YWJPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrT2JqZWN0ID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gZ2V0VGFiT2JqZWN0KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IHRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDaGVja2xpc3RUYXNrT2JqZWN0ID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrT2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4geyBjaGVja0lmV2FzQ3VycmVudFRhYiwgY2hlY2tJZk9ubHlPbmVUYWIsIGdldFRhc2tJbmRleCxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza0luZGV4LCBnZXRUYWJJbmRleCwgZ2V0TmV3VmFsdWUsIGdldFRhc2tTdWJjb250YWluZXJUeXBlLFxuICAgICAgICBnZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCwgZ2V0VGFza0VsZW1lbnQsIGdldENoZWNrbGlzdFRhc2tFbGVtZW50LFxuICAgICAgICBnZXRUYWJFbGVtZW50LCBjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50LCB0cnlpbmdUb0RvdWJsZUNsaWNrLCBnZXRUYWJPYmplY3QsIGdldFRhc2tPYmplY3QsIGdldENoZWNrbGlzdFRhc2tPYmplY3QgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9OyIsImNvbnN0IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRGVzY3JpcHRpb24pID0+IHtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBpbml0aWFsRGVzY3JpcHRpb247XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza0Rlc2NyaXB0aW9uKG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0iLCIvLyBvcmlnaW5hbCB3aGVyZSBhbGwgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBnZXQgcmV0dXJuZWQsIHNvIG5vIHByaXZhdGUgZmllbGRzIChjb21wbGV0ZWQgc2hvdWxkIGJlIHByaXZhdGUpXG4vLyBrZWVwaW5nIGZvciBwb3N0ZXJpdHksIHByb2JhYmx5IHdpbGwgZGVsZXRlZCBhdCB0aGUgZW5kXG4vLyBjb25zdCBjYW5Db21wbGV0ZSA9IChvYmplY3QpID0+ICh7XG4vLyAgICAgY29tcGxldGVkOiBmYWxzZSxcbi8vICAgICB0b2dnbGU6ICgpID0+IHtcbi8vICAgICAgICAgaWYgKG9iamVjdC5jb21wbGV0ZWQpIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSBmYWxzZTtcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSB0cnVlO1xuLy8gICAgICAgICB9O1xuLy8gICAgIH0sXG4vLyAgICAgZ2V0Q29tcGxldGVkU3RhdGU6ICgpID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG9iamVjdC5jb21wbGV0ZWRcbi8vICAgICB9XG4vLyB9KTtcblxuY29uc3QgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsQ29tcGxldGVkU3RhdGUpID0+IHtcbiAgICBsZXQgY29tcGxldGVkID0gaW5pdGlhbENvbXBsZXRlZFN0YXRlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICB0b2dnbGVDb21wbGV0ZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldENvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyB0b0RvVGFzayB9IGZyb20gXCIuL3RvZG9fdGFza19vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdFRhc2tPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3RfdGFza19vYmplY3RcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYlRvVG9kb0FycmF5ID0gKHRhYk5hbWU9XCJOZXcgVGFiXCIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiID0gdG9Eb1RhYih0YWJOYW1lKTtcbiAgICAgICAgcmV0dXJuIHRvRG9MaXN0LmFkZFRhc2sobmV3VGFiKTtcbiAgICB9XG4gICAgY29uc3QgZWRpdFRhYk5hbWUgPSAodGFiSW5kZXgsIG5ld1RhYk5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgdGFiT2JqZWN0LnNldFRhc2tUaXRsZShuZXdUYWJOYW1lKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlQ3VycmVudFRhYiA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiSW5kZXgpXG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJBcnJheSA9IHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgIGxldCBmaXJzdFRhYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCB0YWIgaW4gdGFiQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0YWJBcnJheVt0YWJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRhYiA9IHRhYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RUYWI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld1Rhc2tUb1RhYiA9ICh0aXRsZT1cIk5ldyBUYXNrIFRpdGxlXCIsIGR1ZURhdGU9XCJUYXNrIER1ZSBEYXRlXCIsIGRlc2NyaXB0aW9uPVwiVGFzayBEZXNjcmlwdGlvblwiLCBub3Rlcz1cIlRhc2sgTm90ZXNcIiwgcGlubmVkPWZhbHNlLCBjb21wbGV0ZWQ9ZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWIgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgbmV3VGFzayA9IHRvRG9UYXNrKHRpdGxlLCBkdWVEYXRlLCBkZXNjcmlwdGlvbiwgbm90ZXMsIHBpbm5lZCwgY29tcGxldGVkKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0luZGV4ID0gY3VycmVudFRhYi5hZGRUYXNrKG5ld1Rhc2spO1xuICAgICAgICByZXR1cm4gbmV3VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZWRpdFRhc2tPYmplY3RJbmZvID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSwgbmV3VGFza1N1YmNvbnRlbnRWYWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrVGl0bGUobmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0LnNldFRhc2tEdWVEYXRlKG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrRGVzY3JpcHRpb24obmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0LnNldFRhc2tOb3RlcyhuZXdUYXNrU3ViY29udGVudFZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tDb21wbGV0ZSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIHRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sgPSAodGFza0luZGV4LCBkZXNjcmlwdGlvbj1cIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uXCIsIGNvbXBsZXRlZD1mYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFzayA9IGNoZWNrbGlzdFRhc2tPYmplY3QoZGVzY3JpcHRpb24sIGNvbXBsZXRlZCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tJbmRleCA9IHRhc2tPYmplY3QuYWRkVGFzayhuZXdDaGVja2xpc3RUYXNrKTtcbiAgICAgICAgcmV0dXJuIG5ld0NoZWNrbGlzdFRhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgsIG5ld0Rlc2NyaXB0aW9uVmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjaGVja2xpc3RUYXNrT2JqZWN0LnNldFRhc2tEZXNjcmlwdGlvbihuZXdEZXNjcmlwdGlvblZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW4gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICB0YXNrT2JqZWN0LnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJUb1RvZG9BcnJheSwgZWRpdFRhYk5hbWUsIHVwZGF0ZUN1cnJlbnRUYWIsIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLFxuICAgICAgICBhZGROZXdUYXNrVG9UYWIsIGVkaXRUYXNrT2JqZWN0SW5mbywgdG9nZ2xlVGFza0NvbXBsZXRlLCBhZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrLFxuICAgICAgICBlZGl0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uLCB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGUsIHRvZ2dsZVRhc2tQaW4sIH07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFiID0gKHRpdGxlKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1RhYiB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFzayA9ICh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzLCBwaW5uZWQsIGNvbXBsZXRlZCkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgdGl0bGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIHRpdGxlKSwgXG4gICAgICAgIGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkZXNjcmlwdGlvbiksXG4gICAgICAgIGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGR1ZURhdGUpLFxuICAgICAgICBub3Rlc0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgbm90ZXMpLFxuICAgICAgICAvLyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgICAgIHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgcGlubmVkKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBjb21wbGV0ZWQpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1Rhc2sgfTsiLCJjb25zdCBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRHVlRGF0ZSkgPT4ge1xuICAgIGxldCBkdWVEYXRlID0gaW5pdGlhbER1ZURhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEdWVEYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGR1ZURhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tEdWVEYXRlKG5ld0R1ZURhdGUpIHtcbiAgICAgICAgICAgIGR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsTm90ZXMpID0+IHtcbiAgICBsZXQgbm90ZXMgPSBpbml0aWFsTm90ZXM7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tOb3RlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBub3RlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza05vdGVzKG5ld05vdGVzKSB7XG4gICAgICAgICAgICBub3RlcyA9IG5ld05vdGVzO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBub3Rlc0JlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxQaW5uZWRTdGF0ZSkgPT4ge1xuICAgIGxldCBwaW5uZWQgPSBpbml0aWFsUGlubmVkU3RhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZVBpbm5lZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKHBpbm5lZCkge1xuICAgICAgICAgICAgICAgIHBpbm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwaW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UGlubmVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlubmVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuXG4vLyBvcmlnaW5hbCB3aGVyZSBvYmplY3Qgd291bGQgbmVlZCB0byBoYXZlIE9iamVjdC5hc3NpZ24oKSBmb3IgZXZlcnkgaW5zdGFuY2Vcbi8vIGtlZXBpbmcgZm9yIHBvc3Rlcml0eSwgcHJvYmFibHkgd2lsbCBkZWxldGVkIGF0IHRoZSBlbmRcbi8vIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24pID0+IHtcbiAgICAvLyBjb25zdCBnZXRUYXNrRGVzY3JpcHRpb24gPSAoKSA9PiB7XG4gICAgLy8gICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAvLyB9O1xuICAgIC8vIGNvbnN0IHNldFRhc2tEZXNjcmlwdGlvbiA9IChuZXdEZXNjcmlwdGlvbikgPT4ge1xuICAgIC8vICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIC8vIH07XG4vLyAgICAgcmV0dXJuIHsgZ2V0VGFza0Rlc2NyaXB0aW9uLCBzZXRUYXNrRGVzY3JpcHRpb24gfTtcbi8vIH07XG5cbmNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24sIGNvbXBsZXRlZCkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBjb21wbGV0ZWQpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH07IiwiaW1wb3J0IHsgY2hlY2tsaXN0T2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0X29iamVjdFwiO1xuaW1wb3J0IHsgRE9NVXBkYXRlQ29udHJvbGxlciB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBldmVudEJ1bmRsZXIgfSBmcm9tIFwiLi9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuXG5jb25zdCBldmVudEFzc2lnbmVyID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYWRkVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFiXCIpO1xuICAgICAgICBhZGRUYWJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5hZGRUYWIpO1xuICAgIH07XG4gICAgY29uc3QgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVkaXRCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmVkaXQtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiRWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhYklucHV0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWRkVGFiSW5wdXRMaXN0ZW5lciA9IChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGV2ZW50QnVuZGxlci51cGRhdGVUYWIpXG4gICAgfVxuICAgIGNvbnN0IGFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYlJlbW92ZUJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVtb3ZlLXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYlJlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhYik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRTd2l0Y2hUYWJMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJTd2l0Y2hCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXRjaC10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJTd2l0Y2hCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5zd2l0Y2hUYWIpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBhZGROZXdUYXNrTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ldy10by1kby10YXNrXCIpO1xuICAgICAgICBuZXdUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIubmV3VGFzayk7XG4gICAgfVxuICAgIGNvbnN0IGFkZFJlbW92ZVRhc2tCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrUmVtb3ZlQnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi50by1kby1yZW1vdmUtdGFza1wiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tSZW1vdmVCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYXNrKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRUYXNrTGlzdGVuZXJzID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhc2tcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrRWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrQ29tcGxldGVDaGVja2JveGVzID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi50by1kby1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVja2JveCBvZiB0YXNrQ29tcGxldGVDaGVja2JveGVzKSB7XG4gICAgICAgICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZVRhc2tDb21wbGV0ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0J1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmFkZC1jaGVja2xpc3QtdGFza1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgbmV3Q2hlY2tsaXN0VGFza0J1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmFkZE5ld0NoZWNrbGlzdFRhc2spXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0Q2hlY2tsaXN0VGFza0xpc3RlbmVycyA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LWNoZWNrbGlzdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgY2hlY2tsaXN0RWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlQ2hlY2tsaXN0VGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVja2JveCBvZiBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVtb3ZlLWNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlQ2hlY2tsaXN0VGFzayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVUYXNrUGluTGlzdGVuZXJzID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tQaW5CdXR0b25zID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi50by1kby1waW5cIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tQaW5CdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci50b2dnbGVUYXNrUGluKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRvZ2dsZURpc3BsYXlUYXNrRGV0YWlsc0xpc3RlbmVycyA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrVG9nZ2xlRGlzcGxheUJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tUb2dnbGVEaXNwbGF5QnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHsgYWRkTmV3VGFiTGlzdGVuZXIsIGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lciwgYWRkVGFiSW5wdXRMaXN0ZW5lciwgYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXIsXG4gICAgICAgIGFkZFN3aXRjaFRhYkxpc3RlbmVyLCBhZGROZXdUYXNrTGlzdGVuZXIsIGFkZFJlbW92ZVRhc2tCdXR0b25MaXN0ZW5lcixcbiAgICAgICAgYWRkRWRpdFRhc2tMaXN0ZW5lcnMsIGFkZFRhc2tJbnB1dExpc3RlbmVyLCBhZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lcixcbiAgICAgICAgYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyLCBhZGRFZGl0Q2hlY2tsaXN0VGFza0xpc3RlbmVycywgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyLCBhZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIsIGFkZFRvZ2dsZVRhc2tQaW5MaXN0ZW5lcnMsXG4gICAgICAgIGFkZFRvZ2dsZURpc3BsYXlUYXNrRGV0YWlsc0xpc3RlbmVycywgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IGV2ZW50QXNzaWduZXIgfSBmcm9tIFwiLi9ldmVudF9hc3NpZ25lcl9vYmplY3RcIjtcbmltcG9ydCB7IGV2ZW50QnVuZGxlciB9IGZyb20gXCIuL2V2ZW50X2J1bmRsZXJfb2JqZWN0XCI7XG5cbmNvbnN0IERPTUNvbnRyb2xsZXJBZGRFZGl0ID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJUb0RPTSA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBhZGRUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YWJcIik7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgbmV3VGFiRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnN0IG5ld1RhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld1RhYk9iamVjdFRpdGxlID0gbmV3VGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBuZXdUYWJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWItdGl0bGVcIik7XG4gICAgICAgIG5ld1RhYkVsZW1lbnQuZGF0YXNldC50YWJJbmRleCA9IGluZGV4O1xuICAgICAgICBuZXdUYWJFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzd2l0Y2gtdGFiXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGFiLW5hbWVcIj5UQUIgTkFNRSBQTEFDRUhPTERFUjwvaDI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhYlwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhYiBuYW1lIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVtb3ZlLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIlJlbW92ZSB0YWIgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgdGFiTmFtZUVsZW1lbnQgPSBuZXdUYWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFiLW5hbWVcIik7XG4gICAgICAgIHRhYk5hbWVFbGVtZW50LnRleHRDb250ZW50ID0gbmV3VGFiT2JqZWN0VGl0bGU7XG4gICAgICAgIHRvRG9UYWJTZWN0aW9uLmluc2VydEJlZm9yZShuZXdUYWJFbGVtZW50LCBhZGRUYWJCdXR0b24pO1xuICAgICAgICByZXR1cm4gbmV3VGFiRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3Qgc2V0VGFiSW5wdXRFbGVtZW50VmFsdWUgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHRhYk5hbWU7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRCZWZvcmUoaW5wdXRFbGVtZW50LCB0YWJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFiTmFtZUVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFiTmFtZSA9IHRhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgdGFiQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJzd2l0Y2gtdGFiXCIpO1xuICAgICAgICBjb25zdCB0YWJCdXR0b25OYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICAgICAgICB0YWJCdXR0b25OYW1lLmNsYXNzTGlzdC5hZGQoXCJ0YWItbmFtZVwiKTtcbiAgICAgICAgdGFiQnV0dG9uTmFtZS50ZXh0Q29udGVudCA9IHRhYk5hbWU7XG4gICAgICAgIHRhYkJ1dHRvbi5hcHBlbmRDaGlsZCh0YWJCdXR0b25OYW1lKTtcbiAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRCZWZvcmUodGFiQnV0dG9uLCB0YWJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHNldERlZmF1bHRDdXJyZW50VGFiRE9NID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGlmICh0YWJFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIHRhYkVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldEN1cnJlbnRUYWJET00gPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3Q3VycmVudFRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIG5ld0N1cnJlbnRUYWJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY3VycmVudC10YWJcIik7XG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKGZpcnN0VGFiSW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGZpcnN0VGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmaXJzdFRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudChmaXJzdFRhYkluZGV4KTtcbiAgICAgICAgZmlyc3RUYWJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY3VycmVudC10YWJcIik7XG4gICAgfVxuICAgIGNvbnN0IGFkZE5ld1Rhc2tUb0RPTSA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCB0b0RvQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBuZXdUYXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tdGFza1wiKTtcbiAgICAgICAgbmV3VGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXggPSBpbmRleDtcbiAgICAgICAgY29uc3QgbmV3VGFza1RpdGxlID0gbmV3VGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0Rlc2NyaXB0aW9uID0gbmV3VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0R1ZURhdGUgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tOb3RlcyA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tDb21wbGV0ZUlEID0gYHRvLWRvLWNvbXBsZXRlLWNoZWNrYm94LSR7aW5kZXh9YDtcbiAgICAgICAgbmV3VGFza0VsZW1lbnQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLXRhc2stb3ZlcnZpZXdcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tdGl0bGUtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ0by1kby10aXRsZVwiPlRJVExFIFBMQUNFSE9MREVSPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvLWRvLXBpblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9waW4tdW5waW5uZWQucG5nXCIgYWx0PVwiUGluIHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLXRpdGxlIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayB0aXRsZSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby1yZW1vdmUtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2xvc2UucG5nXCIgYWx0PVwiUmVtb3ZlIHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1jb21wbGV0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIklEIFBMQUNFSE9MREVSXCIgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1sYWJlbFwiPkNvbXBsZXRlZDo8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJcIiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIgaWQ9XCJJRCBQTEFDRUhPTERFUlwiPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2NoZXZyb24tZG93bi5wbmdcIiBhbHQ9XCJDaGFuZ2UgdGFzayBkaXNwbGF5IGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tZHVlLWRhdGUtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLWR1ZS1kYXRlXCI+RFVFIERBVEUgUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stZHVlLWRhdGUgZWRpdC10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIGR1ZSBkYXRlIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXIgYW5pbWF0aW9uLXRhcmdldFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tZGVzY3JpcHRpb25cIj5ERVNDUklQVElPTiBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLWRlc2NyaXB0aW9uIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIGRlc2NyaXB0aW9uIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tbm90ZXMtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lciBhbmltYXRpb24tdGFyZ2V0XCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0by1kby1ub3Rlc1wiPk5PVEVTIFBMQUNFSE9MREVSPC9wPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stbm90ZXMgZWRpdC10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgbm90ZXMgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgYWN0aW9uPVwiXCIgY2xhc3M9XCJjaGVja2xpc3QgYW5pbWF0aW9uLXRhcmdldFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVja2xpc3QtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsZWdlbmQgY2xhc3M9XCJjaGVja2xpc3QtbGFiZWxcIj5DaGVja2xpc3Q8L2xlZ2VuZD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImFkZC1jaGVja2xpc3QtdGFza1wiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BsdXMucG5nXCIgYWx0PVwiQWRkIGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRpdGxlXCIpO1xuICAgICAgICB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuZXdUYXNrVGl0bGU7XG4gICAgICAgIGNvbnN0IGR1ZURhdGVFbGVtZW50ID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1kdWUtZGF0ZVwiKTtcbiAgICAgICAgZHVlRGF0ZUVsZW1lbnQudGV4dENvbnRlbnQgPSBcIkR1ZSBPbjogXCIgKyBuZXdUYXNrRHVlRGF0ZTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25FbGVtZW50ID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gXCJEZXNjcmlwdGlvbjogXCIgKyBuZXdUYXNrRGVzY3JpcHRpb247XG4gICAgICAgIGNvbnN0IG5vdGVzRWxlbWVudCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tbm90ZXNcIik7XG4gICAgICAgIG5vdGVzRWxlbWVudC50ZXh0Q29udGVudCA9IFwiTm90ZXM6IFwiICsgbmV3VGFza05vdGVzO1xuICAgICAgICB0b0RvQ29udGVudC5hcHBlbmRDaGlsZChuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlTGFiZWwgPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwibGFiZWxcIik7XG4gICAgICAgIGNvbXBsZXRlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIG5ld1Rhc2tDb21wbGV0ZUlEKTtcbiAgICAgICAgY29uc3QgY29tcGxldGVDaGVja2JveCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGNvbXBsZXRlQ2hlY2tib3guc2V0QXR0cmlidXRlKFwiaWRcIiwgbmV3VGFza0NvbXBsZXRlSUQpO1xuICAgICAgICByZXR1cm4gbmV3VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhc2tJbnB1dEVsZW1lbnQgPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQodGFza0luZGV4LCBidXR0b25UeXBlKTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhc2staW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoaW5wdXRFbGVtZW50LCB0YXNrU3ViY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQodGFza0luZGV4LCBidXR0b25UeXBlKTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgbGV0IHRhc2tPYmplY3RWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza09iamVjdFZhbHVlID0gdGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkR1ZSBEYXRlXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3RWYWx1ZSA9IHRhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3RWYWx1ZSA9IHRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0VmFsdWUgPSB0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICB9O1xuICAgICAgICBpbnB1dEVsZW1lbnQudmFsdWUgPSB0YXNrT2JqZWN0VmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQgPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBsZXQgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYnV0dG9uVHlwZSA9PT0gXCJUaXRsZVwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby10aXRsZVwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2tUaXRsZTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkR1ZSBEYXRlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gdGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLWR1ZS1kYXRlXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gXCJEdWUgT246IFwiICsgdGFza0R1ZURhdGU7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSB0YXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gXCJEZXNjcmlwdGlvbjogXCIgKyB0YXNrRGVzY3JpcHRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrTm90ZXMgPSB0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLW5vdGVzXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gXCJOb3RlczogXCIgKyB0YXNrTm90ZXM7XG4gICAgICAgIH07XG4gICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50Lmluc2VydEJlZm9yZSh0YXNrU3ViY29udGVudEVsZW1lbnQsIHRhc2tTdWJjb250YWluZXJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBjb25zdCB0b2dnbGVUYXNrRE9NQ29tcGxldGUgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlQ2hlY2tib3ggPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gIHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tDb21wbGV0ZWRTdGF0ZWQgPSB0YXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCk7XG4gICAgICAgIGlmICh0YXNrQ29tcGxldGVkU3RhdGVkKSB7XG4gICAgICAgICAgICBjb21wbGV0ZUNoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGxldGVDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFzay1jb21wbGV0ZWRcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdDaGVja2xpc3RUYXNrVG9ET00gPSAodGFza0luZGV4LCBuZXdDaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0RWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0XCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKG5ld0NoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBuZXdDaGVja2xpc3RUYXNrRWxlbWVudC5kYXRhc2V0LmNoZWNrbGlzdFRhc2tJbmRleCA9IG5ld0NoZWNrbGlzdFRhc2tJbmRleDtcbiAgICAgICAgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke25ld0NoZWNrbGlzdFRhc2tJbmRleH1cIiBjbGFzcz1cImNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjaGVja2xpc3QtJHt0YXNrSW5kZXh9LSR7bmV3Q2hlY2tsaXN0VGFza0luZGV4fVwiIGNsYXNzPVwiY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgREVTQ1JJUFRJT04gUExBQ0VIT0xERVJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC1jaGVja2xpc3QtdGFza1wiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCBjaGVja2xpc3QgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS1jaGVja2xpc3QtdGFza1wiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJFZGl0IGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGBcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9IG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb247XG4gICAgICAgIGNoZWNrbGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICByZXR1cm4gbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50ID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24uYXBwZW5kQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBpbnB1dEVsZW1lbnQudmFsdWUgPSBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb247XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50ID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LnNldEF0dHJpYnV0ZShcImZvclwiLCBgY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke2NoZWNrbGlzdFRhc2tJbmRleH1gKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb247XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5hcHBlbmRDaGlsZChjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3ggPSBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jaGVja2VkID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpO1xuICAgICAgICBpZiAoY2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4gICAgICAgICAgICBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtdGFzay1jb21wbGV0ZWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94LmNsYXNzTGlzdC5yZW1vdmUoXCJjaGVja2xpc3QtdGFzay1jb21wbGV0ZWRcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGFuZ2VQaW5CdXR0b25JbWFnZSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHBpbkJ1dHRvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tcGluXCIpXG4gICAgICAgIGNvbnN0IHBpbkJ1dHRvbkltYWdlID0gcGluQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICAgIGlmICh0YXNrT2JqZWN0LmdldFBpbm5lZFN0YXRlKCkpIHtcbiAgICAgICAgICAgIHBpbkJ1dHRvbkltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4vYXNzZXRzL3Bpbi1waW5uZWQucG5nXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGluQnV0dG9uSW1hZ2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi9hc3NldHMvcGluLXVucGlubmVkLnBuZ1wiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbiA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50SW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgdGFza0NvbnRlbnRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICBpZiAodGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGlubmVkLXRhc2tcIikpO1xuICAgICAgICAgICAgaWYgKGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCB0YXNrQ29udGVudFNlY3Rpb24uZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUVuZEluZGV4ID0gbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFBpbm5lZFRhc2tFbGVtZW50ID0gbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzW2FycmF5RW5kSW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGlubmVkVGFza0VsZW1lbnQgb2YgbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpbm5lZFRhc2tFbGVtZW50SW5kZXggPSBwaW5uZWRUYXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tFbGVtZW50SW5kZXggPCBwaW5uZWRUYXNrRWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCBwaW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaW5uZWRUYXNrRWxlbWVudCA9PT0gbGFzdFBpbm5lZFRhc2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGlubmVkVGFza0VsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgdGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBpbm5lZC10YXNrXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMgPSBBcnJheS5mcm9tKHRhc2tDb250ZW50U2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXRhc2s6bm90KC5waW5uZWQtdGFzaylcIikpO1xuICAgICAgICAgICAgaWYgKGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRhc2tDb250ZW50U2VjdGlvbi5hcHBlbmRDaGlsZCh0YXNrRWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5RW5kSW5kZXggPSBsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50ID0gbGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHNbYXJyYXlFbmRJbmRleF07XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1bnBpbm5lZFRhc2tFbGVtZW50IG9mIGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVucGlubmVkVGFza0VsZW1lbnRJbmRleCA9IHVucGlubmVkVGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrRWxlbWVudEluZGV4IDwgdW5waW5uZWRUYXNrRWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCB1bnBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVucGlubmVkVGFza0VsZW1lbnQgPT09IGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uYXBwZW5kQ2hpbGQodGFza0VsZW1lbnQsIGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwaW5uZWQtdGFza1wiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUFuaW1hdGlvbnMgPSAodGFza0luZGV4LCBhY3Rpb24pID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9nZ2xlRGlzcGxheUJ1dHRvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFzay1jaGFuZ2UtZGlzcGxheVwiKTtcbiAgICAgICAgY29uc3QgYnV0dG9uSW1hZ2UgPSB0b2dnbGVEaXNwbGF5QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzVG9Ub2dnbGUgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYW5pbWF0aW9uLXRhcmdldFwiKSk7XG4gICAgICAgIGVsZW1lbnRzVG9Ub2dnbGUucHVzaChidXR0b25JbWFnZSlcbiAgICAgICAgZWxlbWVudHNUb1RvZ2dsZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcIkVuYWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm8tYW5pbWF0aW9uc1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcIkRpc2FibGVcIil7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibm8tYW5pbWF0aW9uc1wiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgbG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IGxpc3RPZlRhc2tzID0gY3VycmVudFRhYk9iamVjdC5nZXRDaGVja2xpc3RUYXNrcygpO1xuICAgICAgICBmb3IgKGNvbnN0IHRhc2tJbmRleCBpbiBsaXN0T2ZUYXNrcykge1xuICAgICAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGxpc3RPZlRhc2tzW3Rhc2tJbmRleF1cbiAgICAgICAgICAgIGlmICh0YXNrT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUYXNrRWxlbWVudCA9IGFkZE5ld1Rhc2tUb0RPTSh0YXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgIHNldFBpbkJ1dHRvbkltYWdlKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICByZWFycmFuZ2VQaW5uZWRUYXNrc1Bvc2l0aW9uKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB0b2dnbGVUYXNrRE9NQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICBldmVudEJ1bmRsZXIuYWRkVGFza0xpc3RlbmVycyhuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdE9mQ2hlY2tsaXN0VGFza3MgPSB0YXNrT2JqZWN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggaW4gbGlzdE9mQ2hlY2tsaXN0VGFza3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGxpc3RPZkNoZWNrbGlzdFRhc2tzW2NoZWNrbGlzdFRhc2tJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2xpc3RUYXNrT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50ID0gYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEJ1bmRsZXIuYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyhuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgc2V0UGluQnV0dG9uSW1hZ2UgPSAobmV3VGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhc2tJbmRleCA9IG5ld1Rhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGN1cnJlbnRUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBwaW5CdXR0b24gPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXBpblwiKTtcbiAgICAgICAgY29uc3QgcGluQnV0dG9uSW1hZ2UgPSBwaW5CdXR0b24ucXVlcnlTZWxlY3RvcihcImltZ1wiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYXNrT2JqZWN0LmdldFBpbm5lZFN0YXRlKCkpIHtcbiAgICAgICAgICAgIHBpbkJ1dHRvbkltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4vYXNzZXRzL3Bpbi1waW5uZWQucG5nXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGluQnV0dG9uSW1hZ2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi9hc3NldHMvcGluLXVucGlubmVkLnBuZ1wiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHJlYXJyYW5nZVBpbm5lZFRhc2tzUG9zaXRpb24gPSAobmV3VGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhc2tJbmRleCA9IG5ld1Rhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGN1cnJlbnRUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrQ29udGVudFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIGlmIChjdXJyZW50VGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGlubmVkLXRhc2tcIikpO1xuICAgICAgICAgICAgaWYgKGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKG5ld1Rhc2tFbGVtZW50LCB0YXNrQ29udGVudFNlY3Rpb24uZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUVuZEluZGV4ID0gbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFBpbm5lZFRhc2tFbGVtZW50ID0gbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzW2FycmF5RW5kSW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGlubmVkVGFza0VsZW1lbnQgb2YgbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpbm5lZFRhc2tFbGVtZW50SW5kZXggPSBwaW5uZWRUYXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUYXNrSW5kZXggPCBwaW5uZWRUYXNrRWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKG5ld1Rhc2tFbGVtZW50LCBwaW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaW5uZWRUYXNrRWxlbWVudCA9PT0gbGFzdFBpbm5lZFRhc2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGlubmVkVGFza0VsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgbmV3VGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbmV3VGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBpbm5lZC10YXNrXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBlbGVtZW50c1RvVG9nZ2xlID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFuaW1hdGlvbi10YXJnZXRcIikpO1xuICAgICAgICBlbGVtZW50c1RvVG9nZ2xlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRDbGFzc2VzID0gQXJyYXkuZnJvbShlbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudENsYXNzZXMuaW5jbHVkZXMoXCJoaWRlLXRvLWRvLWRldGFpbHNcIikpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLXRvLWRvLWRldGFpbHNcIik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGlzcGxheS10by1kby1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRlLXRvLWRvLWRldGFpbHNcIik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzcGxheS10by1kby1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBwcmV2ZW50RG91YmxlQ2xpY2sodGFza0VsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgcHJldmVudERvdWJsZUNsaWNrID0gKHRhc2tFbGVtZW50KSA9PiB7XG4gICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtaWQtYW5pbWF0aW9uXCIpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtaWQtYW5pbWF0aW9uXCIpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9O1xuICAgIGNvbnN0IHJvdGF0ZUNoZXZyb25CdXR0b24gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZXZyb25CdXR0b24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIik7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkltYWdlID0gY2hldnJvbkJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgICAgICBjb25zdCBidXR0b25JbWFnZUNsYXNzZXMgPSBBcnJheS5mcm9tKGJ1dHRvbkltYWdlLmNsYXNzTGlzdCk7XG4gICAgICAgIGlmIChidXR0b25JbWFnZUNsYXNzZXMubGVuZ3RoID09PSAwIHx8IGJ1dHRvbkltYWdlQ2xhc3Nlcy5pbmNsdWRlcyhcInJvdGF0ZS1oaWRlLXRhc2stZGV0YWlsc1wiKSkge1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LnJlbW92ZShcInJvdGF0ZS1oaWRlLXRhc2stZGV0YWlsc1wiKTtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5hZGQoXCJyb3RhdGUtZGlzcGxheS10YXNrLWRldGFpbHNcIik7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QuYWRkKFwicm90YXRlZC1jaGV2cm9uXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbkltYWdlQ2xhc3Nlcy5pbmNsdWRlcyhcInJvdGF0ZS1kaXNwbGF5LXRhc2stZGV0YWlsc1wiKSkge1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LnJlbW92ZShcInJvdGF0ZS1kaXNwbGF5LXRhc2stZGV0YWlsc1wiKTtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5hZGQoXCJyb3RhdGUtaGlkZS10YXNrLWRldGFpbHNcIik7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwicm90YXRlZC1jaGV2cm9uXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgYWRkTmV3VGFiVG9ET00sIHNldFRhYklucHV0RWxlbWVudFZhbHVlLFxuICAgICAgICBpbnNlcnRUYWJJbnB1dEVsZW1lbnQsIGluc2VydFRhYk5hbWVFbGVtZW50LCBzZXREZWZhdWx0Q3VycmVudFRhYkRPTSxcbiAgICAgICAgc2V0Q3VycmVudFRhYkRPTSwgc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIsIGFkZE5ld1Rhc2tUb0RPTSxcbiAgICAgICAgaW5zZXJ0VGFza0lucHV0RWxlbWVudCwgc2V0VGFza0lucHV0RWxlbWVudFZhbHVlLCBpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQsXG4gICAgICAgIHRvZ2dsZVRhc2tET01Db21wbGV0ZSwgYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NLCBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LFxuICAgICAgICBzZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUsIGluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQsXG4gICAgICAgIHRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSwgY2hhbmdlUGluQnV0dG9uSW1hZ2UsIHNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbixcbiAgICAgICAgbG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIsIHRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscywgcm90YXRlQ2hldnJvbkJ1dHRvbiwgdG9nZ2xlQW5pbWF0aW9ucywgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZVRhYkZyb21Ub2RvQXJyYXkgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgdG9Eb0xpc3QucmVtb3ZlVGFzayh0YWJJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYXNrRnJvbVRhYkFycmF5ID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjdXJyZW50VGFiT2JqZWN0LnJlbW92ZVRhc2sodGFza0luZGV4KTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0Zyb21UYXNrQXJyYXkgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIHRhc2tPYmplY3QucmVtb3ZlVGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSwgcmVtb3ZlVGFza0Zyb21UYWJBcnJheSwgcmVtb3ZlQ2hlY2tsaXN0VGFza0Zyb21UYXNrQXJyYXksIH07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IERPTUNvbnRyb2xsZXJSZW1vdmUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZVRhYk5hbWVFbGVtZW50ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGxldCBzd2l0Y2hUYWIgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKVxuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKHN3aXRjaFRhYik7XG4gICAgICAgIHN3aXRjaFRhYiA9IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYklucHV0RWxlbWVudCA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIHRhYkVsZW1lbnQucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGxldCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIHRvRG9UYWJTZWN0aW9uLnJlbW92ZUNoaWxkKHRhYkVsZW1lbnQpO1xuICAgICAgICB0YWJFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0Q3VycmVudFRhYlN0YXR1cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY3VycmVudC10YWJcIik7XG4gICAgICAgIGlmIChjdXJyZW50VGFiICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjdXJyZW50VGFiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrRWxlbWVudEZyb21ET00gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGxldCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b0RvVGFza1NlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIHRvRG9UYXNrU2VjdGlvbi5yZW1vdmVDaGlsZCh0YXNrRWxlbWVudCk7XG4gICAgICAgIHRhc2tFbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlVGFza1N1YmNvbnRlbnRFbGVtZW50RnJvbURPTSA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQodGFza0luZGV4LCBidXR0b25UeXBlKTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZCh0YXNrU3ViY29udGVudEVsZW1lbnQpO1xuICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBudWxsXG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tJbnB1dEVsZW1lbnQgPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucmVtb3ZlQ2hpbGQoY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tFbGVtZW50RE9NID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdEVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdFwiKTtcbiAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY2hlY2tsaXN0RWxlbWVudC5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUFsbFRhc2tFbGVtZW50cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbnRlbnRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24ucmVwbGFjZUNoaWxkcmVuKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyByZW1vdmVUYWJOYW1lRWxlbWVudCwgcmVtb3ZlVGFiSW5wdXRFbGVtZW50LCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVzZXRDdXJyZW50VGFiU3RhdHVzLCByZW1vdmVUYXNrRWxlbWVudEZyb21ET00sIHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00sXG4gICAgICAgIHJlbW92ZVRhc2tJbnB1dEVsZW1lbnQsIHJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSwgcmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgcmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00sIHJlbW92ZUFsbFRhc2tFbGVtZW50cywgfVxufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcbmltcG9ydCB7IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfYWRkX2VkaXRfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX3JlbW92ZVwiO1xuXG5jb25zdCBldmVudEJ1bmRsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZFRhYiA9IChldmVudCwgdGFiTmFtZT1cIk5ldyBUYWJcIikgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld1RhYlRvVG9kb0FycmF5KHRhYk5hbWUpO1xuICAgICAgICBjb25zdCBuZXdUYWJFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3VGFiVG9ET00obmV3VGFiSW5kZXgpO1xuICAgICAgICBhZGRUYWJMaXN0ZW5lcnMobmV3VGFiRWxlbWVudCk7XG4gICAgICAgIGlmIChoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZk9ubHlPbmVUYWIoKSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYihmaXJzdFRhYkluZGV4KVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JFeGlzdGluZ0lucHV0RWxlbWVudChldmVudCwgXCJUYWJcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYklucHV0RWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYk5hbWVFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhYklucHV0RWxlbWVudFZhbHVlKHRhYkluZGV4KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVGFiSW5wdXRMaXN0ZW5lcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RhYk5hbWUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0TmV3VmFsdWUoZXZlbnQpO1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhYk5hbWUodGFiSW5kZXgsIG5ld1RhYk5hbWUpO1xuICAgICAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYk5hbWVFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiSW5wdXRFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkU3dpdGNoVGFiTGlzdGVuZXIodGFiRWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZVRhYkZyb21Ub2RvQXJyYXkodGFiSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NKHRhYkluZGV4KTtcbiAgICAgICAgaWYgKGhlbHBlckZ1bmN0aW9ucy5jaGVja0lmV2FzQ3VycmVudFRhYihldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYigpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoZmlyc3RUYWJJbmRleClcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQWxsVGFza0VsZW1lbnRzKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5sb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzd2l0Y2hUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZldhc0N1cnJlbnRUYWIoZXZlbnQpKSB7XG4gICAgICAgICAgICBjb25zdCB0YWJJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJJbmRleChldmVudCk7XG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC51cGRhdGVDdXJyZW50VGFiKHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVzZXRDdXJyZW50VGFiU3RhdHVzKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRDdXJyZW50VGFiRE9NKHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQWxsVGFza0VsZW1lbnRzKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5sb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYigpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBuZXdUYXNrID0gKGV2ZW50LCB0aXRsZT1cIk5ldyBUYXNrIFRpdGxlXCIsIGR1ZURhdGU9XCJUYXNrIER1ZSBEYXRlXCIsIGRlc2NyaXB0aW9uPVwiVGFzayBEZXNjcmlwdGlvblwiLCBub3Rlcz1cIlRhc2sgTm90ZXNcIiwgcGlubmVkPWZhbHNlLCBjb21wbGV0ZWQ9ZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFza1RvVGFiKHRpdGxlLCBkdWVEYXRlLCBkZXNjcmlwdGlvbiwgbm90ZXMsIHBpbm5lZCwgY29tcGxldGVkKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0VsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdUYXNrVG9ET00obmV3VGFza0luZGV4KTtcbiAgICAgICAgYWRkVGFza0xpc3RlbmVycyhuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIHJldHVybiBuZXdUYXNrSW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFza0Zyb21UYWJBcnJheSh0YXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSh0YXNrSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50KGV2ZW50LCBcIlRhc2tcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lclR5cGUoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrU3ViY29udGVudEVsZW1lbnRGcm9tRE9NKHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFza0lucHV0RWxlbWVudCh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVGFza0lucHV0TGlzdGVuZXIoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJUeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJUeXBlKGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2tTdWJjb250ZW50VmFsdWUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0TmV3VmFsdWUoZXZlbnQpO1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhc2tPYmplY3RJbmZvKHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUsIG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50KHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlVGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC50b2dnbGVUYXNrQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgbmV3Q2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyhuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQoZXZlbnQsIFwiQ2hlY2tsaXN0IFRhc2tcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdEZXNjcmlwdGlvblZhbHVlID0gaGVscGVyRnVuY3Rpb25zLmdldE5ld1ZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgsIG5ld0Rlc2NyaXB0aW9uVmFsdWUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZUNoZWNrbGlzdFRhc2tGcm9tVGFza0FycmF5KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVDaGVja2xpc3RUYXNrRWxlbWVudERPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrUGluID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVBbmltYXRpb25zKHRhc2tJbmRleCwgXCJFbmFibGVcIik7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnRvZ2dsZVRhc2tQaW4odGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuY2hhbmdlUGluQnV0dG9uSW1hZ2UodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uKHRhc2tJbmRleCk7XG4gICAgfTtcbiAgICAvLyBjb25zdCBsb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYiA9ICgpID0+IHtcbiAgICAvLyAgICAgZm9yIChjb25zdCB0YXNrIClcbiAgICAvLyB9O1xuICAgIGNvbnN0IGFkZFRhc2tMaXN0ZW5lcnMgPSAobmV3VGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYXNrTGlzdGVuZXJzKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lcihuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVUYXNrUGluTGlzdGVuZXJzKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVEaXNwbGF5VGFza0RldGFpbHNMaXN0ZW5lcnMobmV3VGFza0VsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyA9IChuZXdDaGVja2xpc3RUYXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lcihuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlQ2hlY2tsaXN0VGFza0xpc3RlbmVyKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscyA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMudHJ5aW5nVG9Eb3VibGVDbGljayh0YXNrSW5kZXgpKSB7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVBbmltYXRpb25zKHRhc2tJbmRleCwgXCJEaXNhYmxlXCIpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzKHRhc2tJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5yb3RhdGVDaGV2cm9uQnV0dG9uKHRhc2tJbmRleCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRUYWJMaXN0ZW5lcnMgPSAobmV3VGFiRWxlbWVudCkgPT4ge1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lcihuZXdUYWJFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lcihuZXdUYWJFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lcihuZXdUYWJFbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJbml0aWFsUGFnZSA9ICgpID0+IHtcbiAgICAgICAgYWRkVGFiKGV2ZW50LCBcIkluc3RydWN0aW9uc1wiKTtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gbmV3VGFzayhldmVudCwgXCJRdWljayBUaXBzISBDbGljayB0aGUgcGluIGJ1dHRvbiB0byBwaW4gYSB0YXNrIHRvIHRoZSB0b3Agb2YgdGhlIGxpc3QuXCIsXG4gICAgICAgICAgICBgVG9tb3Jyb3csIG5leHQgd2Vlaywgb3Igd2hlbmV2ZXIgeW91ciB0YXNrIGlzIGR1ZSwgeW91IGNhbiBhZGQgaXQgaGVyZSEgQ2xpY2sgdGhlIGFycm93IGJ1dHRvbiB0byB0b2dnbGUgYmV0d2VlbiBzaG93aW5nIGFuZCBoaWRpbmcgdGFzayBkZXRhaWxzLmAsXG4gICAgICAgICAgICBcIkFkZCBhIGRlc2NyaXB0aW9uIG9mIHlvdXIgdGFzayBoZXJlISBDbGljayB0aGUgcGVuY2lsIGJ1dHRvbnMgdG8gZWRpdCB0aGUgdmFyaW91cyBwYXJ0cyBvZiB5b3VyIHRhc2suXCIsXG4gICAgICAgICAgICBcIkpvdCBkb3duIHNvbWUgbm90ZXMgaGVyZSEgTWFyayB5b3VyIHRhc2sgYXMgY29tcGxldGUgd2hlbiB5b3UncmUgZG9uZSwgb3IgcmVtb3ZlIGl0IGZyb20gdGhlIGxpc3QgYnkgY2xpY2tpbmcgdGhlIFggYnV0dG9uLlwiLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmNoYW5nZVBpbkJ1dHRvbkltYWdlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbih0YXNrSW5kZXgpO1xuICAgICAgICBhZGRJbnN0cnVjdGlvbnNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRJbnN0cnVjdGlvbnNDaGVja2xpc3RUYXNrID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBbXG4gICAgICAgICAgICBbXCJJZiB5b3VyIHRhc2sgaGFzIG11bHRpcGxlIHN0ZXBzLCB0cnkgYnJlYWtpbmcgdGhlbSBkb3duIGludG8gYSBjaGVja2xpc3QhIENsaWNrIHRoZSBwbHVzIHNpZ24gYnV0dG9uIHRvIGFkZCBzdGVwcyBhcyBuZWVkZWQuXCIsIHRydWVdLFxuICAgICAgICAgICAgW1wiSGF2ZSBhIG5ldyB0YXNrIHlvdSB3YW50IHRvIGtlZXAgdHJhY2sgb2Y/IEFkZCBpdCB0byB0aGUgbGlzdCBieSBjbGlja2luZyBvbiB0aGUgJ05ldyBUYXNrJyBidXR0b24gYmVsb3chXCIsIHRydWVdLFxuICAgICAgICAgICAgW2BPcmdhbml6ZSB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIHRhc2tzIGluIHlvdXIgbGlmZSBieSBjcmVhdGluZyB0aGVtZWQgdGFicy4gQ3JlYXRlIGEgbmV3IHRhYiBieSBjbGlja2luZyBvbiB0aGUgcGx1cyBzaWduIGJ1dHRvbiBhdCB0aGUgdG9wIG9mIHRoZSBsaXN0LiBDaGFuZ2UgdGFicyBieSBjbGlja2luZyBvbiBkaWZmZXJlbnQgdGFiIG5hbWVzLmAsIHRydWVdXTtcbiAgICAgICAgaW5zdHJ1Y3Rpb25zLmZvckVhY2goKGluc3RydWN0aW9uc0l0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sodGFza0luZGV4LCBpbnN0cnVjdGlvbnNJdGVtWzBdLCBpbnN0cnVjdGlvbnNJdGVtWzFdKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKGNoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgfSlcbiAgICB9O1xuICAgIHJldHVybiB7IGFkZFRhYiwgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LCB1cGRhdGVUYWIsIHJlbW92ZVRhYiwgc3dpdGNoVGFiLFxuICAgICAgICBuZXdUYXNrLCByZW1vdmVUYXNrLCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50LCB1cGRhdGVUYXNrLCB0b2dnbGVUYXNrQ29tcGxldGUsXG4gICAgICAgIGFkZE5ld0NoZWNrbGlzdFRhc2ssIGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQsIHVwZGF0ZUNoZWNrbGlzdFRhc2ssXG4gICAgICAgIHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSwgcmVtb3ZlQ2hlY2tsaXN0VGFzaywgdG9nZ2xlVGFza1BpbiwgYWRkVGFza0xpc3RlbmVycyxcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycywgdG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzLCBhZGRUYWJMaXN0ZW5lcnMsIGxvYWRJbml0aWFsUGFnZSwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QnVuZGxlciB9OyIsImltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcblxuY29uc3Qgc3RvcmFnZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbGl6ZVRvZG9MaXN0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdEpTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJjdXJyZW50X3RhYlwiOiAke3RvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpfSxcbiAgICAgICAgICAgIFwidGFic1wiOiB7fVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRvZG9MaXN0SlNPTlN0cmluZyk7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhYiA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiT2JqZWN0KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCB0YWJKU09OU3RyaW5nID0gYHtcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCIke3RhYk9iamVjdC5nZXRUYXNrVGl0bGUoKX1cIixcbiAgICAgICAgICAgIFwidGFza3NcIjoge31cbiAgICAgICAgfWA7XG4gICAgICAgIGNvbnN0IHRhYlBhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UodGFiSlNPTlN0cmluZyk7XG4gICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF0gPSB0YWJQYXJzZWRPYmplY3Q7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFza0pTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrVGl0bGUoKX1cIixcbiAgICAgICAgICAgIFwiZHVlLWRhdGVcIjogXCIke3Rhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKX1cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCIke3Rhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCl9XCIsXG4gICAgICAgICAgICBcIm5vdGVzXCI6IFwiJHt0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpfVwiLFxuICAgICAgICAgICAgXCJjb21wbGV0ZWRcIjogJHt0YXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCl9LFxuICAgICAgICAgICAgXCJwaW5uZWRcIjogJHt0YXNrT2JqZWN0LmdldFBpbm5lZFN0YXRlKCl9LFxuICAgICAgICAgICAgXCJjaGVja2xpc3RfdGFza3NcIjoge31cbiAgICAgICAgfWA7XG4gICAgICAgIGNvbnN0IHRhc2tQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRhc2tKU09OU3RyaW5nKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdID0gdGFza1BhcnNlZE9iamVjdDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0pTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIiR7Y2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKX1cIixcbiAgICAgICAgICAgIFwiY29tcGxldGVkXCI6ICR7Y2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpfVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza1BhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UoY2hlY2tsaXN0VGFza0pTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdID0gY2hlY2tsaXN0VGFza1BhcnNlZE9iamVjdDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0TG9jYWxTdG9yYWdlVmFsdWUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0SlNPTlN0cmluZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9fZG9fbGlzdFwiKTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRvZG9MaXN0SlNPTlN0cmluZyk7XG4gICAgICAgIHJldHVybiB0b2RvTGlzdFBhcnNlZE9iamVjdDtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlID0gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRKU09OU3RyaW5nVmFsdWUgPSBKU09OLnN0cmluZ2lmeShuZXdWYWx1ZSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidG9fZG9fbGlzdFwiLCB1cGRhdGVkSlNPTlN0cmluZ1ZhbHVlKTtcbiAgICB9O1xuICAgIC8vIGNvbnN0IHVwZGF0ZUxvY2FsU3RvcmFnZSA9IChvYmplY3RUeXBlLCB0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAvLyAgICAgY29uc3QgdG9kb0xpc3RSYXdTdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvX2RvX2xpc3RcIik7XG4gICAgLy8gICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkU3RyaW5nID0gSlNPTi5wYXJzZSh0b2RvTGlzdFJhd1N0cmluZyk7XG4gICAgLy8gICAgIGxldCBvYmplY3RQYXJzZWRTdHJpbmcgPSB1bmRlZmluZWQ7XG4gICAgLy8gICAgIGlmIChvYmplY3RUeXBlID09PSBcIlRhYlwiKSB7XG4gICAgLy8gICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFiSW5kZXgpO1xuICAgIC8vICAgICAgICAgY29uc3QgdGFiUmF3U3RyaW5nID0gYHtcbiAgICAvLyAgICAgICAgICAgICBcInRpdGxlXCI6IFwiJHt0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCl9XCIsXG4gICAgLy8gICAgICAgICAgICAgXCJ0YXNrc1wiOiB7fVxuICAgIC8vICAgICAgICAgfWA7XG4gICAgLy8gICAgICAgICBvYmplY3RQYXJzZWRTdHJpbmcgPSBKU09OLnBhcnNlKHRhYlJhd1N0cmluZyk7XG4gICAgLy8gICAgIH0gZWxzZSBpZiAob2JqZWN0VHlwZSA9PT0gXCJUYXNrXCIpIHtcbiAgICAvLyAgICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgLy8gICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gdGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgIC8vICAgICAgICAgY29uc3QgdGFza1Jhd1N0cmluZyA9IGB7XG4gICAgLy8gICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrVGl0bGUoKX1cIixcbiAgICAvLyAgICAgICAgICAgICBcImR1ZS1kYXRlXCI6IFwiJHt0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCl9XCIsXG4gICAgLy8gICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKX1cIixcbiAgICAvLyAgICAgICAgICAgICBcIm5vdGVzXCI6IFwiJHt0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpfVwiLFxuICAgIC8vICAgICAgICAgICAgIFwiY29tcGxldGVkXCI6IFwiJHt0YXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCl9XCIsXG4gICAgLy8gICAgICAgICAgICAgXCJwaW5uZWRcIjogXCIke3Rhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKX1cIixcbiAgICAvLyAgICAgICAgICAgICBcImNoZWNrbGlzdF90YXNrc1wiOiB7fVxuICAgIC8vICAgICAgICAgfWA7XG4gICAgLy8gICAgICAgICBvYmplY3RQYXJzZWRTdHJpbmcgPSBKU09OLnBhcnNlKHRhc2tSYXdTdHJpbmcpO1xuICAgIC8vICAgICB9XG4gICAgLy8gfTtcbiAgICByZXR1cm4geyBpbml0aWFsaXplVG9kb0xpc3QsIGFkZFRhYiwgYWRkVGFzaywgYWRkQ2hlY2tsaXN0VGFza31cbn0pKCk7XG5cbmV4cG9ydCB7IHN0b3JhZ2UgfTsiLCJpbXBvcnQgeyB0b0RvVGFzayB9IGZyb20gXCIuL29iamVjdHMvdG9kb190YXNrX29iamVjdFwiO1xuaW1wb3J0IHsgY2hlY2tsaXN0T2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy9jaGVja2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy9jaGVja2xpc3RfdGFza19vYmplY3RcIjtcbmltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2NvbXBsZXRlZF9jb21wb25lbnRcIjtcblxuLy8gdGVzdGluZyB0b2RvIHRhc2sgb2JqZWN0XG5pbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvZHVlX2RhdGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBub3Rlc0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9waW5uZWRfY29tcG9uZW50XCI7XG5cbi8vIHRlc3RpbmcgY2hlY2tsaXN0IG9iamVjdFxuLy8gaW1wb3J0IHsgY2hlY2tsaXN0T2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0X29iamVjdFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG4vLyB0ZXN0aW5nIHRhYnMgKGFycmF5cyB0aGF0IGNvbnRhaW4gbWFueSB0byBkbyB0YXNrcylcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi9vYmplY3RzL3RvZG9fdGFiX29iamVjdFwiO1xuXG4vLyB0ZXN0aW5nIGxpc3QgdGhhdCBjb250YWluIGV2ZXJ5dGhpbmdcbmltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vb2JqZWN0cy90b2RvX2xpc3Rfb2JqZWN0XCI7XG5cbi8vIHRlc3RpbmcgZm9yIERPTSBjb250cm9sbGVyIG9iamVjdHNcbmltcG9ydCB7IGV2ZW50QnVuZGxlciB9IGZyb20gXCIuL29iamVjdHMvZXZlbnRfYnVuZGxlcl9vYmplY3RcIjtcbmltcG9ydCB7IGV2ZW50QXNzaWduZXIgfSBmcm9tIFwiLi9vYmplY3RzL2V2ZW50X2Fzc2lnbmVyX29iamVjdFwiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlckFkZEVkaXQgfSBmcm9tIFwiLi9vYmplY3RzL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5cblxuLy8gdGVzdGluZyBmb3Igc3RvcmFnZVxuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gXCIuL29iamVjdHMvc3RvcmFnZV9vYmplY3RcIjtcblxuLy8gbGV0IHRlc3QgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiZGR0ZXN0XCIpO1xuLy8gY29uc29sZS5sb2codGVzdClcblxuLy8gY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBpZiAodGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBub3cgdHJ1ZVwiKVxuLy8gfSBlbHNlIHtcbi8vICAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIHN0aWxsIGZhbHNlXCIpXG4vLyB9XG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gY29uc29sZS5sb2codGVzdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cblxuLy8gaWYgKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuLy8gICAgIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSxcInRoaXMgaXMgbm93IHRydWVcIilcbi8vIH0gZWxzZSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBzdGlsbCBmYWxzZVwiKVxuLy8gfVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG4vLyB0ZXN0LnNldFRhc2tEZXNjcmlwdGlvbihcIndvd3dpZVwiKVxuLy8gY29uc29sZS5sb2codGVzdC5nZXRUYXNrRGVzY3JpcHRpb24oKSlcblxuLy8gbGV0IGltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIk1ha2UgQ2VyZWFsXCIsIFwicGFydCBvZiBicmVha2Zhc3QgcGxhblwiLCBcInRoaXMgbW9ybmluZ1wiLCBcIm1ha2Ugc3VyZSB0byBwdXQgbWlsayBiYWNrIGluIGZyaWRnZVwiKTtcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2spXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tUaXRsZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRGVzY3JpcHRpb24oKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza0R1ZURhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza05vdGVzKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFBpbm5lZFN0YXRlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGltcG9ydGFudFRhc2suc2V0VGFza1RpdGxlKFwiTWFrZSBDaGlja2VuIEJyb3RoXCIpXG4vLyBpbXBvcnRhbnRUYXNrLnNldFRhc2tEZXNjcmlwdGlvbihcInJlcXVpcmVzIDEgY2hpY2tlbiBhbmQgMSBicm90aFwiKVxuLy8gaW1wb3J0YW50VGFzay5zZXRUYXNrRHVlRGF0ZShcImJlZm9yZSBJIGNhdWdodCB0aGlzIGNvbGRcIilcbi8vIGltcG9ydGFudFRhc2suc2V0VGFza05vdGVzKFwiZG9uJ3Qgc25lZXplIGludG8gcG90XCIpXG4vLyBpbXBvcnRhbnRUYXNrLnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG4vLyBpbXBvcnRhbnRUYXNrLnRvZ2dsZUNvbXBsZXRlZFN0YXRlKCk7XG5cbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza1RpdGxlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRHVlRGF0ZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrTm90ZXMoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0UGlubmVkU3RhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gaW1wb3J0YW50VGFzay5hZGRUYXNrKHRlc3QpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuXG5cbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyB0YWIxLmFkZFRhc2soaW1wb3J0YW50VGFzaylcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG4vLyBsZXQgYW5vdGhlckltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIkNsZWFuIHBvdFwiLCBcInBhcnQgb2YgY2hvcmVzIHBsYW5cIiwgXCJ0aGlzIGFmdGVybm9vblwiLCBcIm1ha2Ugc3VyZSB0byB1c2Ugc29hcFwiKTtcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyB0YWIxLmFkZFRhc2soYW5vdGhlckltcG9ydGFudFRhc2spXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygxKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDEpLmdldFRhc2tUaXRsZSgpKVxuXG5cbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkuZ2V0VGFza1RpdGxlKCkpXG5cbi8vIC8vIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiKDApO1xuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcblxuLy8gbGV0IHRhYjIgPSB0b0RvVGFiKFwiaGVlIGhlZVwiKVxuLy8gdG9Eb0xpc3QuYWRkVGFzayh0YWIyKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcblxuLy8gbGV0IHRhYjEgPSB0b0RvVGFiKFwiRGVmYXVsdCB0ZXN0XCIpXG4vLyB0b0RvTGlzdC5hZGRUYXNrKHRhYjEpXG5cbi8vIGxldCB0YXNrMSA9IHRvRG9UYXNrKFwiTWFrZSBNb25leSBURVNUIDBcIiwgXCJUYXNrIER1ZSBEYXRlXCIsIFwiVGFzayBEZXNjcmlwdGlvblwiLCBcIlRhc2sgTm90ZXNcIik7XG4vLyBjb25zb2xlLmxvZyh0YWIxLmFkZFRhc2sodGFzazEpKVxuXG4vLyBsZXQgdGFzazIgPSB0b0RvVGFzayhcIk1ha2UgTW9uZXkgVEVTVCBBR0FJTiAxXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuLy8gdGFiMS5hZGRUYXNrKHRhc2syKVxuXG4vLyBsZXQgdGFzazMgPSB0b0RvVGFzayhcIk1ha2UgTW9uZXkgVEVTVCBBR0FJTiBBR0FJTiAyXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuLy8gdGFiMS5hZGRUYXNrKHRhc2szKVxuXG4vLyBsZXQgdGFzazQgPSB0b0RvVGFzayhcIk1ha2UgTW9uZXkgVEVTVCBBR0FJTiBBR0FJTiBBR0FJTiAzXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuLy8gdGFiMS5hZGRUYXNrKHRhc2s0KVxuXG4vLyBsZXQgdGFiMiA9IHRvRG9UYWIoXCJUZXN0IGZvciBsb2FkaW5nIGluIHRhc2sgb2JqZWN0c1wiKVxuLy8gdG9Eb0xpc3QuYWRkVGFzayh0YWIyKVxuLy8gbGV0IHRhc2tBID0gdG9Eb1Rhc2soXCJURVNUIE9GIFRIRSBPVVRET09SIFdBUk5JTkcgU1lTVEVNXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuLy8gdGFiMi5hZGRUYXNrKHRhc2tBKVxuLy8gbGV0IHRhc2tCID0gdG9Eb1Rhc2soXCJUSElTIElTIE9OTFkgQSBURVNUXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuLy8gdGFiMi5hZGRUYXNrKHRhc2tCKVxuXG4vLyBsZXQgY2hlY2tsaXN0VGFza0EgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiQ2hlY2tsaXN0IFRhc2sgRGVzY3JpcHRpb24gVEVTVCBBXCIpXG4vLyB0YXNrQS5hZGRUYXNrKGNoZWNrbGlzdFRhc2tBKVxuLy8gbGV0IGNoZWNrbGlzdFRhc2tCID0gY2hlY2tsaXN0VGFza09iamVjdChcIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uIFRFU1QgQlwiKVxuLy8gdGFza0EuYWRkVGFzayhjaGVja2xpc3RUYXNrQilcbi8vIGxldCBjaGVja2xpc3RUYXNrQyA9IGNoZWNrbGlzdFRhc2tPYmplY3QoXCJDaGVja2xpc3QgVGFzayBEZXNjcmlwdGlvbiBURVNUIENcIilcbi8vIHRhc2tCLmFkZFRhc2soY2hlY2tsaXN0VGFza0MpXG4vLyBsZXQgY2hlY2tsaXN0VGFza0QgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiQ2hlY2tsaXN0IFRhc2sgRGVzY3JpcHRpb24gVEVTVCBEXCIpXG4vLyB0YXNrQi5hZGRUYXNrKGNoZWNrbGlzdFRhc2tEKVxuLy8gbGV0IGNoZWNrbGlzdFRhc2tFID0gY2hlY2tsaXN0VGFza09iamVjdChcIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uIFRFU1QgRFwiKVxuLy8gdGFza0IuYWRkVGFzayhjaGVja2xpc3RUYXNrRSlcblxuLy8gdGFza0IucmVtb3ZlVGFzaygxKVxuXG5ldmVudEFzc2lnbmVyLmFkZE5ld1RhYkxpc3RlbmVyKCk7XG4vLyBldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJMaXN0ZW5lcigpO1xuZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXIoKTtcblxuXG5cbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0KVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKVxuLy8gY29uc29sZS5sb2codGFiMS5nZXRDaGVja2xpc3RUYXNrcygpKVxuLy8gY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKS5nZXRUYXNrVGl0bGUoKSlcblxuRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0RGVmYXVsdEN1cnJlbnRUYWJET00oMClcblxuZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lcigpXG5cbmV2ZW50QXNzaWduZXIuYWRkTmV3VGFza0xpc3RlbmVyKCk7XG5cbmV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyKCk7XG5cbmV2ZW50QXNzaWduZXIuYWRkRWRpdFRhc2tMaXN0ZW5lcnMoKTtcblxuLy8gY29uc3QgaGVoID0gKCkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKFwiYmxvb3BcIilcbi8vIH1cblxuLy8gY29uc3QgYm9pID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb21wbGV0ZS1jaGVja2JveFwiKVxuLy8gYm9pLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoZWgpXG5cbmV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlVGFza0NvbXBsZXRlTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyKCk7XG5ldmVudEFzc2lnbmVyLmFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKCk7XG5cbi8vIGxldCBjaGVja2xpc3RUYXNrMSA9IGNoZWNrbGlzdFRhc2tPYmplY3QoXCJDaGVja2xpc3QgVGFzayBEZXNjcmlwdGlvbiBURVNUXCIpXG4vLyB0YXNrMS5hZGRUYXNrKGNoZWNrbGlzdFRhc2sxKVxuXG5ldmVudEFzc2lnbmVyLmFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyKCk7XG5ldmVudEFzc2lnbmVyLmFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lcigpO1xuXG5ldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tQaW5MaXN0ZW5lcnMoKTtcbmV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzTGlzdGVuZXJzKCk7XG5cbmV2ZW50QnVuZGxlci5sb2FkSW5pdGlhbFBhZ2UoKTtcblxuc3RvcmFnZS5pbml0aWFsaXplVG9kb0xpc3QoKTtcbnN0b3JhZ2UuYWRkVGFiKDApXG5zdG9yYWdlLmFkZFRhc2soMCwwKVxuc3RvcmFnZS5hZGRDaGVja2xpc3RUYXNrKDAsMCwwKVxuc3RvcmFnZS5hZGRDaGVja2xpc3RUYXNrKDAsMCwxKVxuc3RvcmFnZS5hZGRDaGVja2xpc3RUYXNrKDAsMCwyKVxuLy8gbG9jYWxTdG9yYWdlLmNsZWFyKClcblxuY29uc29sZS5sb2coSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvX2RvX2xpc3RcIikpKSJdLCJuYW1lcyI6WyJjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCIsIm9iamVjdCIsImNoZWNrbGlzdCIsIk9iamVjdCIsImFzc2lnbiIsImFkZFRhc2siLCJ0YXNrIiwicHVzaCIsImxlbmd0aCIsInJlbW92ZVRhc2siLCJpbmRleCIsInVuZGVmaW5lZCIsImdldENoZWNrbGlzdFRhc2tzIiwiZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrIiwidG9Eb0xpc3QiLCJjdXJyZW50VGFiIiwiZ2V0Q3VycmVudFRhYkluZGV4Iiwic2V0Q3VycmVudFRhYkluZGV4IiwibmV3Q3VycmVudFRhYiIsImdldEN1cnJlbnRUYWJPYmplY3QiLCJjdXJyZW50VGFiSW5kZXgiLCJ0aXRsZUJlaGF2aW9yQ29tcG9uZW50IiwiaW5pdGlhbFRpdGxlIiwidGl0bGUiLCJnZXRUYXNrVGl0bGUiLCJzZXRUYXNrVGl0bGUiLCJuZXdUaXRsZSIsImhlbHBlckZ1bmN0aW9ucyIsImVuc3VyZUNvcnJlY3RUYWJFbGVtZW50IiwiZXZlbnQiLCJ0YWJFbGVtZW50IiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudCIsInRhc2tTdWJjb250YWluZXJFbGVtZW50IiwiY2xhc3NMaXN0IiwiQXJyYXkiLCJmcm9tIiwiaW5jbHVkZXMiLCJlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQiLCJjaGVja2xpc3RUYXNrRWxlbWVudCIsImdldFRhc2tFbGVtZW50IiwidGFza0luZGV4IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0VGFiT2JqZWN0IiwidGFiSW5kZXgiLCJnZXRUYXNrT2JqZWN0IiwiY2hlY2tJZldhc0N1cnJlbnRUYWIiLCJjaGVja0lmT25seU9uZVRhYiIsInRvRG9UYWJTZWN0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImdldFRhc2tJbmRleCIsInRhc2tFbGVtZW50IiwiZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50IiwiZGF0YXNldCIsImdldENoZWNrbGlzdFRhc2tJbmRleCIsImNoZWNrbGlzdFRhc2tJbmRleCIsImdldFRhYkluZGV4IiwiZ2V0TmV3VmFsdWUiLCJ2YWx1ZSIsImdldFRhc2tTdWJjb250YWluZXJUeXBlIiwidGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzIiwidGFza1N1YmNvbnRhaW5lclR5cGUiLCJnZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCIsImJ1dHRvblR5cGUiLCJnZXRDaGVja2xpc3RUYXNrRWxlbWVudCIsImdldFRhYkVsZW1lbnQiLCJjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJpbnB1dEVsZW1lbnQiLCJ0cnlpbmdUb0RvdWJsZUNsaWNrIiwiZ2V0Q2hlY2tsaXN0VGFza09iamVjdCIsImRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImdldFRhc2tEZXNjcmlwdGlvbiIsInNldFRhc2tEZXNjcmlwdGlvbiIsIm5ld0Rlc2NyaXB0aW9uIiwiY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsQ29tcGxldGVkU3RhdGUiLCJjb21wbGV0ZWQiLCJ0b2dnbGVDb21wbGV0ZWRTdGF0ZSIsImdldENvbXBsZXRlZFN0YXRlIiwib2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QiLCJ0YWJOYW1lIiwibmV3VGFiIiwidG9Eb1RhYiIsIm5ld1RhYk5hbWUiLCJ0YWJBcnJheSIsImZpcnN0VGFiIiwidGFiIiwiZHVlRGF0ZSIsIm5vdGVzIiwicGlubmVkIiwibmV3VGFzayIsImluaXRpYWxEdWVEYXRlIiwiZ2V0VGFza0R1ZURhdGUiLCJzZXRUYXNrRHVlRGF0ZSIsIm5ld0R1ZURhdGUiLCJkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsTm90ZXMiLCJnZXRUYXNrTm90ZXMiLCJzZXRUYXNrTm90ZXMiLCJuZXdOb3RlcyIsIm5vdGVzQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsUGlubmVkU3RhdGUiLCJ0b2dnbGVQaW5uZWRTdGF0ZSIsImdldFBpbm5lZFN0YXRlIiwicGlubmVkQmVoYXZpb3JDb21wb25lbnQiLCJ0b0RvVGFzayIsIm5ld1Rhc2tTdWJjb250ZW50VmFsdWUiLCJ0YXNrT2JqZWN0IiwibmV3Q2hlY2tsaXN0VGFzayIsImNoZWNrbGlzdFRhc2tPYmplY3QiLCJuZXdEZXNjcmlwdGlvblZhbHVlIiwiZXZlbnRBc3NpZ25lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudEJ1bmRsZXIiLCJhZGRUYWIiLCJzY29wZSIsInRhYkVkaXRCdXR0b25zIiwiYnV0dG9uIiwiaW5zZXJ0VGFiSW5wdXRFbGVtZW50IiwidXBkYXRlVGFiIiwidGFiUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhYiIsInRhYlN3aXRjaEJ1dHRvbnMiLCJzd2l0Y2hUYWIiLCJ0YXNrUmVtb3ZlQnV0dG9ucyIsInRhc2tFZGl0QnV0dG9ucyIsImluc2VydFRhc2tJbnB1dEVsZW1lbnQiLCJ1cGRhdGVUYXNrIiwidGFza0NvbXBsZXRlQ2hlY2tib3hlcyIsImNoZWNrYm94IiwidG9nZ2xlVGFza0NvbXBsZXRlIiwibmV3Q2hlY2tsaXN0VGFza0J1dHRvbnMiLCJhZGROZXdDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0RWRpdEJ1dHRvbnMiLCJpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50IiwidXBkYXRlQ2hlY2tsaXN0VGFzayIsImNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3hlcyIsInRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSIsImNoZWNrbGlzdFRhc2tSZW1vdmVCdXR0b25zIiwicmVtb3ZlQ2hlY2tsaXN0VGFzayIsInRhc2tQaW5CdXR0b25zIiwidG9nZ2xlVGFza1BpbiIsInRhc2tUb2dnbGVEaXNwbGF5QnV0dG9ucyIsInRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscyIsIkRPTUNvbnRyb2xsZXJBZGRFZGl0IiwiYWRkTmV3VGFza1RvRE9NIiwibmV3VGFza09iamVjdCIsInRvRG9Db250ZW50IiwibmV3VGFza0VsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYWRkIiwibmV3VGFza1RpdGxlIiwibmV3VGFza0Rlc2NyaXB0aW9uIiwibmV3VGFza0R1ZURhdGUiLCJuZXdUYXNrTm90ZXMiLCJuZXdUYXNrQ29tcGxldGVJRCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJzZXRBdHRyaWJ1dGUiLCJ0b2dnbGVUYXNrRE9NQ29tcGxldGUiLCJjb21wbGV0ZUNoZWNrYm94IiwiY2hlY2tlZCIsInJlbW92ZSIsImFkZE5ld0NoZWNrbGlzdFRhc2tUb0RPTSIsIm5ld0NoZWNrbGlzdFRhc2tJbmRleCIsImNoZWNrbGlzdEVsZW1lbnQiLCJuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24iLCJuZXdDaGVja2xpc3RUYXNrRWxlbWVudCIsInRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSIsImNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3giLCJzZXRQaW5CdXR0b25JbWFnZSIsImN1cnJlbnRUYWJPYmplY3QiLCJjdXJyZW50VGFza0luZGV4IiwiY3VycmVudFRhc2tPYmplY3QiLCJwaW5CdXR0b25JbWFnZSIsInJlYXJyYW5nZVBpbm5lZFRhc2tzUG9zaXRpb24iLCJ0YXNrQ29udGVudFNlY3Rpb24iLCJsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImxhc3RQaW5uZWRUYXNrRWxlbWVudCIsInBpbm5lZFRhc2tFbGVtZW50IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiYWRkTmV3VGFiVG9ET00iLCJhZGRUYWJCdXR0b24iLCJuZXdUYWJFbGVtZW50IiwibmV3VGFiT2JqZWN0VGl0bGUiLCJzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSIsImZpcnN0Q2hpbGQiLCJmb2N1cyIsImluc2VydFRhYk5hbWVFbGVtZW50IiwidGFiQnV0dG9uIiwidGFiQnV0dG9uTmFtZSIsInNldERlZmF1bHRDdXJyZW50VGFiRE9NIiwic2V0Q3VycmVudFRhYkRPTSIsInNldEZpcnN0VGFiVG9DdXJyZW50VGFiIiwiZmlyc3RUYWJJbmRleCIsInRhc2tTdWJjb250YWluZXIiLCJzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUiLCJ0YXNrT2JqZWN0VmFsdWUiLCJpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQiLCJ0YXNrU3ViY29udGVudEVsZW1lbnQiLCJ0YXNrVGl0bGUiLCJ0YXNrRHVlRGF0ZSIsInRhc2tEZXNjcmlwdGlvbiIsInRhc2tOb3RlcyIsImNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiIsInNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSIsImNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiIsImluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQiLCJjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50IiwiY2hhbmdlUGluQnV0dG9uSW1hZ2UiLCJzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24iLCJ0YXNrRWxlbWVudEluZGV4IiwibGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMiLCJsYXN0VW5waW5uZWRUYXNrRWxlbWVudCIsInVucGlubmVkVGFza0VsZW1lbnQiLCJsb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYiIsImxpc3RPZlRhc2tzIiwiYWRkVGFza0xpc3RlbmVycyIsImxpc3RPZkNoZWNrbGlzdFRhc2tzIiwiYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyIsImZvckVhY2giLCJlbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5Iiwic2V0VGltZW91dCIsInByZXZlbnREb3VibGVDbGljayIsInJvdGF0ZUNoZXZyb25CdXR0b24iLCJidXR0b25JbWFnZSIsImJ1dHRvbkltYWdlQ2xhc3NlcyIsInRvZ2dsZUFuaW1hdGlvbnMiLCJhY3Rpb24iLCJlbGVtZW50c1RvVG9nZ2xlIiwib2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCIsIkRPTUNvbnRyb2xsZXJSZW1vdmUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUF0dHJpYnV0ZSIsInJlcGxhY2VDaGlsZHJlbiIsIm5ld1RhYkluZGV4IiwiYWRkVGFiTGlzdGVuZXJzIiwibmV3VGFza0luZGV4IiwiY29kZSIsImxvYWRJbml0aWFsUGFnZSIsImluc3RydWN0aW9uc0l0ZW0iLCJhZGRJbnN0cnVjdGlvbnNDaGVja2xpc3RUYXNrIiwic3RvcmFnZSIsImdldExvY2FsU3RvcmFnZVZhbHVlIiwidG9kb0xpc3RKU09OU3RyaW5nIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlIiwibmV3VmFsdWUiLCJ1cGRhdGVkSlNPTlN0cmluZ1ZhbHVlIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsImluaXRpYWxpemVUb2RvTGlzdCIsInRvZG9MaXN0UGFyc2VkT2JqZWN0IiwidGFiT2JqZWN0IiwidGFiSlNPTlN0cmluZyIsInRhYlBhcnNlZE9iamVjdCIsInRhc2tKU09OU3RyaW5nIiwidGFza1BhcnNlZE9iamVjdCIsImFkZENoZWNrbGlzdFRhc2siLCJjaGVja2xpc3RUYXNrSlNPTlN0cmluZyIsImNoZWNrbGlzdFRhc2tQYXJzZWRPYmplY3QiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==
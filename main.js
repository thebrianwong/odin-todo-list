(()=>{"use strict";const t=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},e=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",G.insertTabInputElement)},s=t=>{t.addEventListener("keydown",G.updateTab)},n=(t=document)=>{const e=Array.from(t.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",G.removeTab)},a=(t=document)=>{const e=Array.from(t.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",G.switchTab)},o=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.addTask)},c=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",G.insertTaskInputElement)},i=t=>{t.addEventListener("keydown",G.updateTask)},l=(t=document)=>{const e=t.querySelectorAll(".to-do-pin");for(const t of e)t.addEventListener("click",G.toggleTaskPin)},r=(t=document)=>{const e=t.querySelectorAll(".to-do-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleTaskComplete)},d=(t=document)=>{const e=Array.from(t.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",G.removeTask)},k=(t=document)=>{const e=t.querySelectorAll(".add-checklist-task");for(const t of e)t.addEventListener("click",G.addNewChecklistTask)},u=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-checklist-task"));for(const t of e)t.addEventListener("click",G.insertChecklistTaskInputElement)},T=t=>{t.addEventListener("keydown",G.updateChecklistTask)},g=(t=document)=>{const e=t.querySelectorAll(".checklist-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleChecklistTaskComplete)},b=(t=document)=>{const e=t.querySelectorAll(".remove-checklist-task");for(const t of e)t.addEventListener("click",G.removeChecklistTask)},m=(t=document)=>{const e=t.querySelectorAll(".to-do-task-change-display");for(const t of e)t.addEventListener("click",G.toggleDisplayTaskDetails)},p=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},h=(()=>{let t=0;const e=()=>t;let s={getCurrentTabIndex:e,setCurrentTabIndex:e=>{t=null===e?null:Number(e)},getCurrentTabObject:()=>{const t=e();return h.getSpecificChecklistTask(t)}};return Object.assign(s,p(s)),s})(),C=(t,e)=>{let s=e;return Object.assign(t,{getTaskTitle:()=>s,setTaskTitle(t){s=t}})},f=(t,e)=>{let s=e;return Object.assign(t,{getTaskDescription:()=>s,setTaskDescription(t){s=t}})},S=(t,e)=>{let s=e;return Object.assign(t,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},y=(t="New Tab")=>{const e=(t=>{let e={};return Object.assign(e,C(e,t),p(e)),e})(t);return h.addTask(e)},E=(t,e)=>{h.getSpecificChecklistTask(t).setTaskTitle(e)},I=t=>{h.setCurrentTabIndex(t)},v=()=>{const t=h.getChecklistTasks();let e;for(const s in t)if(void 0!==t[s])return h.setCurrentTabIndex(s),e=s,e;return h.setCurrentTabIndex(null),null},D=(t,e="New Task Title",s="Task Due Date",n="Task Description",a="Task Notes",o=!1,c=!1)=>{const i=h.getSpecificChecklistTask(t),l=((t,e,s,n,a,o)=>{let c={};return Object.assign(c,C(c,t),f(c,s),((t,e)=>{let s=e;return Object.assign(t,{getTaskDueDate:()=>s,setTaskDueDate(t){s=t}})})(c,e),((t,e)=>{let s=e;return Object.assign(t,{getTaskNotes:()=>s,setTaskNotes(t){s=t}})})(c,n),((t,e)=>{let s=e;return Object.assign(t,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(c,a),S(c,o),p(c)),c})(e,s,n,a,o,c);return i.addTask(l)},L=(t,e,s)=>{const n=h.getCurrentTabObject().getSpecificChecklistTask(t);"Title"===e?n.setTaskTitle(s):"Due Date"===e?n.setTaskDueDate(s):"Description"===e?n.setTaskDescription(s):"Notes"===e&&n.setTaskNotes(s)},x=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).togglePinnedState()},O=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).toggleCompletedState()},q=(t,e,s="Checklist Task Description",n=!1)=>{const a=h.getSpecificChecklistTask(t).getSpecificChecklistTask(e),o=((t,e)=>{let s={};return Object.assign(s,f(s,t),S(s,e)),s})(s,n);return a.addTask(o)},A=(t,e,s)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).setTaskDescription(s)},_=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).toggleCompletedState()},N=(()=>{const t=t=>h.getSpecificChecklistTask(t),e=(e,s)=>t(e).getSpecificChecklistTask(s),s=t=>document.querySelector(`[data-task-index='${t}']`),n=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e},a=t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task-subcontainer");)e=e.parentElement,s=Array.from(e.classList);return e},o=t=>{let e=t.target,s=Array.from(e.classList);for(;!s.includes("checklist-task");)e=e.parentElement,s=Array.from(e.classList);return e};return{getTabIndex:t=>n(t).dataset.tabIndex,getTabObject:t,getTabElement:t=>document.querySelector(`[data-tab-index='${t}']`),checkIfWasCurrentTab:t=>"current-tab"===n(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},checkIfNoMoreTabs:()=>{const t=document.querySelector(".to-do-tab-section");return 0===Array.from(t.querySelectorAll(".tab-title")).length},getTaskIndex:t=>(t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task");)e=e.parentElement,s=Array.from(e.classList);return e})(t).dataset.taskIndex,getTaskObject:e,getTaskElement:s,getTaskSubcontainerType:t=>{const e=a(t),s=Array.from(e.classList);let n;return s.includes("to-do-title-section")?n="Title":s.includes("to-do-due-date-section")?n="Due Date":s.includes("to-do-description-section")?n="Description":s.includes("to-do-notes-section")&&(n="Notes"),n},getTaskSubcontainerElement:(t,e)=>{const n=s(t);let a;return"Title"===e?a=n.querySelector(".to-do-title-section"):"Due Date"===e?a=n.querySelector(".to-do-due-date-section"):"Description"===e?a=n.querySelector(".to-do-description-section"):"Notes"===e&&(a=n.querySelector(".to-do-notes-section")),a},getChecklistTaskIndex:t=>o(t).dataset.checklistTaskIndex,getChecklistTaskObject:(t,s,n)=>e(t,s).getSpecificChecklistTask(n),getChecklistTaskElement:(t,e)=>s(t).querySelector(`[data-checklist-task-index='${e}']`),getNewValue:t=>t.target.value,checkForExistingInputElement:(t,e)=>{let s;return"Tab"===e?s=n(t).querySelector(".tab-name-input"):"Task"===e?s=a(t).querySelector(".task-input"):"Checklist Task"===e&&(s=o(t).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==s},tryingToDoubleClick:t=>{const e=s(t);return!!Array.from(e.classList).includes("mid-animation")}}})(),$=(()=>{const t=t=>{const e=h.getCurrentTabObject().getSpecificChecklistTask(t),s=document.querySelector(".to-do-content"),n=document.createElement("div");n.classList.add("to-do-task"),n.dataset.taskIndex=t;const a=e.getTaskTitle(),o=e.getTaskDescription(),c=e.getTaskDueDate(),i=e.getTaskNotes(),l=`to-do-complete-checkbox-${t}`;return n.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',n.querySelector(".to-do-title").textContent=a,n.querySelector(".to-do-due-date").textContent="Due On: "+c,n.querySelector(".to-do-description").textContent="Description: "+o,n.querySelector(".to-do-notes").textContent="Notes: "+i,s.appendChild(n),n.querySelector("label").setAttribute("for",l),n.querySelector(".to-do-complete-checkbox").setAttribute("id",l),n},e=t=>{const e=N.getTaskElement(t),s=e.querySelector(".to-do-complete-checkbox");h.getCurrentTabObject().getSpecificChecklistTask(t).getCompletedState()?(s.checked=!0,e.classList.add("task-completed")):(s.checked=!1,e.classList.remove("task-completed"))},s=(t,e)=>{const s=N.getTaskElement(t).querySelector(".checklist"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("div");return a.classList.add("checklist-task"),a.dataset.checklistTaskIndex=e,a.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${t}-${e}" class="checklist-complete-checkbox">\n                <label for="checklist-${t}-${e}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,a.querySelector(".checklist-task-description").textContent=n,s.appendChild(a),a},n=(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e);s.checked=n.getCompletedState(),n.getCompletedState()?s.classList.add("checklist-task-completed"):s.classList.remove("checklist-task-completed")},a=t=>{const e=N.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.querySelector(".to-do-pin").querySelector("img");s.getPinnedState()?n.setAttribute("src","./assets/pin-pinned.png"):n.setAttribute("src","./assets/pin-unpinned.png")},o=t=>{const e=N.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.dataset.taskIndex,a=document.querySelector(".to-do-content");if(s.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const o of t){if(n<o.dataset.taskIndex){a.insertBefore(e,o);break}o===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}else{const t=Array.from(a.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===t.length)a.appendChild(e);else{const s=t[t.length-1];for(const o of t){if(n<o.dataset.taskIndex){a.insertBefore(e,o);break}o===s&&a.appendChild(e,s)}}e.classList.remove("pinned-task")}};return{addNewTabToDOM:t=>{const e=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),a=h.getSpecificChecklistTask(t).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=t,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=a,s.insertBefore(n,e),n},insertTabInputElement:t=>{const e=N.getTabElement(t),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),e.insertBefore(s,e.firstChild),s.focus(),s},setTabInputElementValue:t=>{const e=N.getTabElement(t).querySelector("input"),s=h.getSpecificChecklistTask(t).getTaskTitle();e.value=s},insertTabNameElement:t=>{const e=N.getTabElement(t),s=h.getSpecificChecklistTask(t).getTaskTitle(),n=document.createElement("button");n.classList.add("switch-tab");const a=document.createElement("h2");return a.classList.add("tab-name"),a.textContent=s,n.appendChild(a),e.insertBefore(n,e.firstChild),e},addCurrentTabIndicator:()=>{const t=h.getCurrentTabIndex();null!==t&&N.getTabElement(t).setAttribute("id","current-tab")},loadTasksFromNewCurrentTab:()=>{const c=h.getCurrentTabObject().getChecklistTasks();for(const i in c){const l=c[i];if(void 0!==l){const c=t(i);a(i),o(i),e(i),G.addTaskListeners(c);const r=l.getChecklistTasks();for(const t in r)if(void 0!==r[t]){const e=s(i,t);n(i,t),G.addChecklistTaskListeners(e)}}}},addNewTaskToDOM:t,insertTaskInputElement:(t,e)=>{const s=N.getTaskSubcontainerElement(t,e),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),s.insertBefore(n,s.firstChild),n.focus(),n},setTaskInputElementValue:(t,e)=>{const s=N.getTaskSubcontainerElement(t,e).querySelector("input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;"Title"===e?a=n.getTaskTitle():"Due Date"===e?a=n.getTaskDueDate():"Description"===e?a=n.getTaskDescription():"Notes"===e&&(a=n.getTaskNotes()),s.value=a},insertTaskSubcontentElement:(t,e)=>{const s=N.getTaskSubcontainerElement(t,e),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;if("Title"===e){const t=n.getTaskTitle();a=document.createElement("h3"),a.classList.add("to-do-title"),a.textContent=t}else if("Due Date"===e){const t=n.getTaskDueDate();a=document.createElement("p"),a.classList.add("to-do-due-date"),a.textContent="Due On: "+t}else if("Description"===e){const t=n.getTaskDescription();a=document.createElement("p"),a.classList.add("to-do-description"),a.textContent="Description: "+t}else if("Notes"===e){const t=n.getTaskNotes();a=document.createElement("p"),a.classList.add("to-do-notes"),a.textContent="Notes: "+t}s.insertBefore(a,s.firstChild)},toggleTaskDOMComplete:e,addNewChecklistTaskToDOM:s,insertChecklistTaskInputElement:(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=document.createElement("input");return n.classList.add("checklist-input"),n.setAttribute("type","text"),s.appendChild(n),n.focus(),n},setChecklistTaskInputElementValue:(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription();s.value=n},insertChecklistTaskDescriptionElement:(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${t}-${e}`),a.classList.add("checklist-task-description"),a.textContent=n,s.appendChild(a)},toggleChecklistTaskDOMComplete:n,changePinButtonImage:a,shiftTaskElementPosition:o,toggleDisplayTaskDetails:t=>{const e=N.getTaskElement(t);Array.from(e.querySelectorAll(".animation-target")).forEach((t=>{Array.from(t.classList).includes("hide-to-do-details")?(t.classList.remove("hide-to-do-details"),t.classList.add("display-to-do-details"),t.style.display="flex"):(t.classList.add("hide-to-do-details"),t.classList.remove("display-to-do-details"),setTimeout((()=>{t.style.display="none"}),1e3))})),(t=>{t.classList.add("mid-animation"),setTimeout((()=>{t.classList.remove("mid-animation")}),1e3)})(e)},rotateChevronButton:t=>{const e=N.getTaskElement(t).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(e.classList);0===s.length||s.includes("rotate-hide-task-details")?(e.classList.remove("rotate-hide-task-details"),e.classList.add("rotate-display-task-details"),e.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(e.classList.remove("rotate-display-task-details"),e.classList.add("rotate-hide-task-details"),e.classList.remove("rotated-chevron"))},toggleAnimations:(t,e)=>{const s=N.getTaskElement(t),n=s.querySelector(".to-do-task-change-display").querySelector("img"),a=Array.from(s.querySelectorAll(".animation-target"));a.push(n),a.forEach((t=>{"Enable"===e?t.classList.add("no-animations"):"Disable"===e&&t.classList.remove("no-animations")}))}}})(),j=t=>{const e=N.getTabElement(t);let s=e.querySelector(".switch-tab");e.removeChild(s),s=null},w=t=>{const e=N.getTabElement(t);let s=e.querySelector("input");e.removeChild(s),s=null},P=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},M=t=>{let e=N.getTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},V=t=>{let e=N.getTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},B=(t,e)=>{const s=N.getTaskSubcontainerElement(t,e);let n=s.firstElementChild;s.removeChild(n),n=null},H=(t,e)=>{const s=N.getTaskSubcontainerElement(t,e);let n=s.querySelector("input");s.removeChild(n),n=null},R=(t,e)=>{const s=N.getChecklistTaskElement(t,e),n=s.querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-task-description");n.removeChild(a),a=null},F=(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section");let n=s.querySelector(".checklist-input");s.removeChild(n),n=null},J=(t,e)=>{const s=N.getTaskElement(t).querySelector(".checklist");let n=N.getChecklistTaskElement(t,e);s.removeChild(n),n=null},z=()=>{document.querySelector(".to-do-content").replaceChildren()},W=t=>{h.removeTask(t)},Q=t=>{h.getCurrentTabObject().removeTask(t)},U=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).removeTask(e)},X=(()=>{let t=!1;const e=()=>{const t=localStorage.getItem("to_do_list");return JSON.parse(t)},s=t=>{const e=JSON.stringify(t);localStorage.setItem("to_do_list",e)};return{addTab:t=>{const n=N.getTabObject(t),a=e(),o=`{\n            "title": "${n.getTaskTitle()}",\n            "tasks": {}\n        }`,c=JSON.parse(o);a.tabs[`tab_${t}`]=c,s(a)},setCurrentTab:t=>{const n=e();n.current_tab=null===t?null:Number(t),s(n)},setTabName:t=>{const n=N.getTabObject(t),a=e();a.tabs[`tab_${t}`].title=n.getTaskTitle(),s(a)},getCurrentTabIndex:()=>e().current_tab,getTabTitle:t=>e().tabs[t].title,getTabObjects:()=>X.getLocalStorageValue().tabs,removeTab:t=>{const n=e();n.tabs[`tab_${t}`]=null,s(n)},addTask:(t,n)=>{const a=N.getTaskObject(t,n),o=e(),c=`{\n            "title": "${a.getTaskTitle()}",\n            "due_date": "${a.getTaskDueDate()}",\n            "description": "${a.getTaskDescription()}",\n            "notes": "${a.getTaskNotes()}",\n            "pinned": ${a.getPinnedState()},\n            "completed": ${a.getCompletedState()},\n            "checklist_tasks": {}\n        }`,i=JSON.parse(c);o.tabs[`tab_${t}`].tasks[`task_${n}`]=i,s(o)},setTaskSubcontainerValue:(t,n,a)=>{const o=N.getTaskObject(t,n),c=e();"Title"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].title=o.getTaskTitle():"Due Date"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].due_date=o.getTaskDueDate():"Description"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].description=o.getTaskDescription():"Notes"===a&&(c.tabs[`tab_${t}`].tasks[`task_${n}`].notes=o.getTaskNotes()),s(c)},toggleTaskPinned:(t,n)=>{const a=N.getTaskObject(t,n),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].pinned=a.getPinnedState(),s(o)},toggleTaskCompleted:(t,n)=>{const a=N.getTaskObject(t,n),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].completed=a.getCompletedState(),s(o)},getTaskValues:(t,s)=>{const n=e();let a=[];const o=n.tabs[t].tasks[s].title;a.push(o);const c=n.tabs[t].tasks[s].due_date;a.push(c);const i=n.tabs[t].tasks[s].description;a.push(i);const l=n.tabs[t].tasks[s].notes;a.push(l);const r=n.tabs[t].tasks[s].pinned;a.push(r);const d=n.tabs[t].tasks[s].completed;return a.push(d),a},getTaskObjects:t=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks,removeTask:(t,n)=>{const a=e();a.tabs[`tab_${t}`].tasks[`task_${n}`]=null,s(a)},addChecklistTask:(t,n,a)=>{const o=N.getChecklistTaskObject(t,n,a),c=e(),i=`{\n            "description": "${o.getTaskDescription()}",\n            "completed": ${o.getCompletedState()}\n        }`,l=JSON.parse(i);c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=l,s(c)},setChecklistTaskDescription:(t,n,a)=>{const o=N.getChecklistTaskObject(t,n,a),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].description=o.getTaskDescription(),s(c)},toggleChecklistTaskCompleted:(t,n,a)=>{const o=N.getChecklistTaskObject(t,n,a),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].completed=o.getCompletedState(),s(c)},getChecklistTaskValues:(t,s,n)=>{const a=e();let o=[];const c=a.tabs[t].tasks[s].checklist_tasks[n].description;o.push(c);const i=a.tabs[t].tasks[s].checklist_tasks[n].completed;return o.push(i),o},getChecklistTaskObjects:(t,e)=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks,removeChecklistTask:(t,n,a)=>{const o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=null,s(o)},checkForExistingStorage:()=>!!localStorage.getItem("to_do_list"),getLocalStorageValue:e,initializeTodoList:()=>{const t=`{\n            "current_tab": ${h.getCurrentTabIndex()},\n            "tabs": {}\n        }`,e=JSON.parse(t);s(e)},toggleLoading:()=>{t=!t},isLoading:()=>t}})(),G=(()=>{const p=(t,e="New Tab")=>{const s=y(e),n=$.addNewTabToDOM(s);if(C(n),!X.isLoading()&&(X.addTab(s),N.checkIfOnlyOneTab())){const t=v();$.addCurrentTabIndicator(),X.setCurrentTab(t)}return s},C=t=>{e(t),n(t),a(t)},f=(t,e=h.getCurrentTabIndex(),s="New Task Title",n="Task Due Date",a="Task Description",o="Task Notes",c=!1,i=!1)=>{if(null===h.getCurrentTabIndex())return void K();const l=D(e,s,n,a,o,c,i),r=$.addNewTaskToDOM(l);return S(r),X.isLoading()||X.addTask(h.getCurrentTabIndex(),l),l},S=t=>{d(t),c(t),r(t),k(t),l(t),m(t)},G=t=>{u(t),g(t),b(t)},K=()=>{const t=p(event,"Instructions"),e=f(event,t,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!1,!1);$.toggleTaskDOMComplete(e),$.changePinButtonImage(e),$.shiftTaskElementPosition(e),Y(t,e,"If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!1),Y(t,e,"Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!1),Y(t,e,"Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!1)},Y=(t,e,s,n)=>{const a=q(t,e,s,n),o=$.addNewChecklistTaskToDOM(e,a);$.toggleChecklistTaskDOMComplete(e,a),G(o),X.isLoading()||X.addChecklistTask(t,e,a)},Z=()=>{X.toggleLoading(),tt(),et(),X.toggleLoading()},tt=()=>{const t=X.getCurrentTabIndex();h.setCurrentTabIndex(t)},et=()=>{const t=X.getTabObjects();for(const e in t)if(null===t[e])h.addTask(void 0);else{const t=X.getTabTitle(e),s=p(event,t);st(s,e)}$.addCurrentTabIndicator()},st=(t,e)=>{const s=N.getTabObject(t),n=X.getTaskObjects(t);for(const a in n)if(null===n[a])s.addTask(void 0);else{const s=X.getTaskValues(e,a),n=s[0],o=s[1],c=s[2],i=s[3],l=s[4],r=s[5];let d;t===h.getCurrentTabIndex()?(d=f(event,t,n,o,c,i,l,r),$.toggleTaskDOMComplete(d),$.changePinButtonImage(d),$.shiftTaskElementPosition(d)):d=D(t,n,o,c,i,l,r),nt(t,e,d,a)}},nt=(t,e,s,n)=>{const a=N.getTaskObject(t,s),o=X.getChecklistTaskObjects(t,s);for(const c in o)if(null===o[c])a.addTask(void 0);else{const a=X.getChecklistTaskValues(e,n,c),o=a[0],i=a[1];let l;l=t===h.getCurrentTabIndex()?Y(t,s,o,i):q(t,s,o,i)}},at=()=>{t(),o()};return{addTab:p,insertTabInputElement:t=>{if(!N.checkForExistingInputElement(t,"Tab")){const e=N.getTabIndex(t),n=$.insertTabInputElement(e);j(e),$.setTabInputElementValue(e),s(n)}},updateTab:t=>{if("Enter"===t.code){const e=N.getTabIndex(t),s=N.getNewValue(t);E(e,s);const n=$.insertTabNameElement(e);w(e),a(n),X.setTabName(e)}},switchTab:t=>{if(!N.checkIfWasCurrentTab(t)){const e=N.getTabIndex(t);I(e),P(),$.addCurrentTabIndicator(),z(),$.loadTasksFromNewCurrentTab(),X.setCurrentTab(e)}},removeTab:t=>{const e=N.getTabIndex(t);if(W(e),M(e),X.removeTab(e),N.checkIfWasCurrentTab(t)){const t=v();$.addCurrentTabIndicator(),z(),X.setCurrentTab(t),N.checkIfNoMoreTabs()||$.loadTasksFromNewCurrentTab()}},addTabListeners:C,addTask:f,insertTaskInputElement:t=>{if(!N.checkForExistingInputElement(t,"Task")){const e=N.getTaskIndex(t),s=N.getTaskSubcontainerType(t);B(e,s);const n=$.insertTaskInputElement(e,s);$.setTaskInputElementValue(e,s),i(n)}},updateTask:t=>{if("Enter"===t.code){const e=N.getTaskIndex(t),s=N.getTaskSubcontainerType(t),n=N.getNewValue(t);L(e,s,n),$.insertTaskSubcontentElement(e,s),H(e,s),X.setTaskSubcontainerValue(h.getCurrentTabIndex(),e,s)}},toggleTaskPin:t=>{const e=N.getTaskIndex(t);$.toggleAnimations(e,"Enable"),x(e),$.changePinButtonImage(e),$.shiftTaskElementPosition(e),X.toggleTaskPinned(h.getCurrentTabIndex(),e)},toggleTaskComplete:t=>{const e=N.getTaskIndex(t);O(e),$.toggleTaskDOMComplete(e),X.toggleTaskCompleted(h.getCurrentTabIndex(),e)},removeTask:t=>{const e=N.getTaskIndex(t);Q(e),V(e),X.removeTask(h.getCurrentTabIndex(),e)},addTaskListeners:S,addNewChecklistTask:t=>{const e=h.getCurrentTabIndex(),s=N.getTaskIndex(t),n=q(e,s),a=$.addNewChecklistTaskToDOM(s,n);G(a),X.isLoading()||X.addChecklistTask(h.getCurrentTabIndex(),s,n)},insertChecklistTaskInputElement:t=>{if(!N.checkForExistingInputElement(t,"Checklist Task")){const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t);R(e,s);const n=$.insertChecklistTaskInputElement(e,s);$.setChecklistTaskInputElementValue(e,s),T(n)}},updateChecklistTask:t=>{if("Enter"===t.code){const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t),n=N.getNewValue(t);A(e,s,n),$.insertChecklistTaskDescriptionElement(e,s),F(e,s),X.setChecklistTaskDescription(h.getCurrentTabIndex(),e,s)}},toggleChecklistTaskComplete:t=>{const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t);_(e,s),$.toggleChecklistTaskDOMComplete(e,s),X.toggleChecklistTaskCompleted(h.getCurrentTabIndex(),e,s)},removeChecklistTask:t=>{const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t);U(e,s),J(e,s),X.removeChecklistTask(h.getCurrentTabIndex(),e,s)},addChecklistTaskListeners:G,toggleDisplayTaskDetails:t=>{const e=N.getTaskIndex(t);N.tryingToDoubleClick(e)||($.toggleAnimations(e,"Disable"),$.toggleDisplayTaskDetails(e),$.rotateChevronButton(e))},loadInInstructionsPage:K,loadInLocalStorage:Z,loadInTabObjects:et,loadInInitialListeners:at,loadInPage:()=>{at(),X.checkForExistingStorage()?Z():(X.initializeTodoList(),K())}}})();G.loadInPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUN6Q1AsRUFBcUJFLEVBQWdCOEIsc0JBQXNCekIsR0FDakV3SCxFQUF5RHJJLEVBQVdNLEdBQ3BFMkgsRUFBa0RqSSxFQUFXTSxHQUM3RGdJLEVBQWdCM00sb0JBQW9CZSxFQUFTRSxxQkFBc0JvRCxFQUFXTSxFQUFtQixFQStLakdnRyw0QkFDQXpLLHlCQXpLOEJnRixJQUM5QixNQUFNYixFQUFZUSxFQUFnQnVCLGFBQWFsQixHQUMxQ0wsRUFBZ0JxQyxvQkFBb0I3QyxLQUNyQzhDLEVBQXFCZ0YsaUJBQWlCOUgsRUFBVyxXQUNqRDhDLEVBQXFCakgseUJBQXlCbUUsR0FDOUM4QyxFQUFxQjZFLG9CQUFvQjNILEdBQzVDLEVBb0tEd0wseUJBQ0FHLHFCQUNBRSxvQkFDQU8sMEJBQ0FFLFdBbENlLEtBQ2ZGLEtBQ0k5RCxFQUFnQjJDLDBCQUNoQlUsS0FFQXJELEVBQWdCNEMscUJBQ2hCTSxJQUNILEVBNkJSLEVBblhvQixHQ1ByQi9SLEVBQWE2UyxZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ldmVudF9hc3NpZ25lcl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX2xpc3Rfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFiX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFza19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9waW5uZWRfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvY2hlY2tsaXN0X3Rhc2tfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvaGVscGVyX2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfcmVtb3ZlLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fbGlzdF9zdG9yYWdlX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2V2ZW50X2J1bmRsZXJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV2ZW50QnVuZGxlciB9IGZyb20gXCIuL2V2ZW50X2J1bmRsZXJfb2JqZWN0XCI7XG5cbmNvbnN0IGV2ZW50QXNzaWduZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYkxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBhZGRUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YWJcIik7XG4gICAgICAgIGFkZFRhYkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmFkZFRhYik7XG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJFZGl0QnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuaW5zZXJ0VGFiSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhZGRUYWJJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZVRhYilcbiAgICB9XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiUmVtb3ZlQnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5yZW1vdmUtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlVGFiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFN3aXRjaFRhYkxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYlN3aXRjaEJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3dpdGNoLXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYlN3aXRjaEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnN3aXRjaFRhYik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGFkZE5ld1Rhc2tMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFza0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3LXRvLWRvLXRhc2tcIik7XG4gICAgICAgIG5ld1Rhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5hZGRUYXNrKTtcbiAgICB9XG4gICAgY29uc3QgYWRkRWRpdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza0VkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYXNrSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2tJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZVRhc2spO1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlVGFza1Bpbkxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tQaW5CdXR0b25zID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi50by1kby1waW5cIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tQaW5CdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci50b2dnbGVUYXNrUGluKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tDb21wbGV0ZUNoZWNrYm94ZXMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrYm94IG9mIHRhc2tDb21wbGV0ZUNoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlVGFza0NvbXBsZXRlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZVRhc2tCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrUmVtb3ZlQnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi50by1kby1yZW1vdmUtdGFza1wiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tSZW1vdmVCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYXNrKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrQnV0dG9ucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWRkLWNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBuZXdDaGVja2xpc3RUYXNrQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuYWRkTmV3Q2hlY2tsaXN0VGFzaylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0RWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC1jaGVja2xpc3QtdGFza1wiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGNoZWNrbGlzdEVkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZUNoZWNrbGlzdFRhc2spO1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5jaGVja2xpc3QtY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tib3ggb2YgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzKSB7XG4gICAgICAgICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlbW92ZS1jaGVja2xpc3QtdGFza1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZUNoZWNrbGlzdFRhc2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1RvZ2dsZURpc3BsYXlCdXR0b25zID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi50by1kby10YXNrLWNoYW5nZS1kaXNwbGF5XCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrVG9nZ2xlRGlzcGxheUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZE5ld1RhYkxpc3RlbmVyLFxuICAgICAgICBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXIsXG4gICAgICAgIGFkZFRhYklucHV0TGlzdGVuZXIsXG4gICAgICAgIGFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyLFxuICAgICAgICBhZGRTd2l0Y2hUYWJMaXN0ZW5lcixcbiAgICAgICAgYWRkTmV3VGFza0xpc3RlbmVyLFxuICAgICAgICBhZGRFZGl0VGFza0xpc3RlbmVyLFxuICAgICAgICBhZGRUYXNrSW5wdXRMaXN0ZW5lcixcbiAgICAgICAgYWRkVG9nZ2xlVGFza1Bpbkxpc3RlbmVyLFxuICAgICAgICBhZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lcixcbiAgICAgICAgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyLFxuICAgICAgICBhZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyLFxuICAgICAgICBhZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lcixcbiAgICAgICAgYWRkUmVtb3ZlQ2hlY2tsaXN0VGFza0xpc3RlbmVyLFxuICAgICAgICBhZGRUb2dnbGVEaXNwbGF5VGFza0RldGFpbHNMaXN0ZW5lclxuICAgIH07XG59KSgpO1xuXG5leHBvcnQgeyBldmVudEFzc2lnbmVyIH07IiwiY29uc3QgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0KSA9PiB7XG4gICAgbGV0IGNoZWNrbGlzdCA9IFtdO1xuICAgIGNvbnN0IGdldFRhc2tJbmRleCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdC5sZW5ndGggLSAxO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGFkZFRhc2sodGFzaykge1xuICAgICAgICAgICAgY2hlY2tsaXN0LnB1c2godGFzayk7XG4gICAgICAgICAgICAvLyByZXR1cm4gY2hlY2tsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VGFza0luZGV4KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVRhc2soaW5kZXgpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFtpbmRleF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldENoZWNrbGlzdFRhc2tzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrbGlzdDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tsaXN0W2luZGV4XTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfTsiLCIvLyBpbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcblxuY29uc3QgdG9Eb0xpc3QgPSAoKCkgPT4ge1xuICAgIGxldCBjdXJyZW50VGFiID0gMDtcbiAgICBjb25zdCBnZXRDdXJyZW50VGFiSW5kZXggPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VGFiO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q3VycmVudFRhYkluZGV4ID0gKG5ld0N1cnJlbnRUYWIpID0+IHtcbiAgICAgICAgaWYgKG5ld0N1cnJlbnRUYWIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUYWIgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudFRhYiA9IE51bWJlcihuZXdDdXJyZW50VGFiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGdldEN1cnJlbnRUYWJPYmplY3QgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJJbmRleCA9IGdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGN1cnJlbnRUYWJJbmRleCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50VGFiT2JqZWN0O1xuICAgIH1cbiAgICBsZXQgb2JqZWN0ID0ge1xuICAgICAgICBnZXRDdXJyZW50VGFiSW5kZXgsXG4gICAgICAgIHNldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgZ2V0Q3VycmVudFRhYk9iamVjdFxuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufSkoKTtcblxuZXhwb3J0IHsgdG9Eb0xpc3QgfTsiLCJjb25zdCB0aXRsZUJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbFRpdGxlKSA9PiB7XG4gICAgbGV0IHRpdGxlID0gaW5pdGlhbFRpdGxlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrVGl0bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tUaXRsZShuZXdUaXRsZSkge1xuICAgICAgICAgICAgdGl0bGUgPSBuZXdUaXRsZTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IiwiY29uc3QgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxEZXNjcmlwdGlvbikgPT4ge1xuICAgIGxldCBkZXNjcmlwdGlvbiA9IGluaXRpYWxEZXNjcmlwdGlvbjtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza0Rlc2NyaXB0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrRGVzY3JpcHRpb24obmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSIsIi8vIG9yaWdpbmFsIHdoZXJlIGFsbCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGdldCByZXR1cm5lZCwgc28gbm8gcHJpdmF0ZSBmaWVsZHMgKGNvbXBsZXRlZCBzaG91bGQgYmUgcHJpdmF0ZSlcbi8vIGtlZXBpbmcgZm9yIHBvc3Rlcml0eSwgcHJvYmFibHkgd2lsbCBkZWxldGVkIGF0IHRoZSBlbmRcbi8vIGNvbnN0IGNhbkNvbXBsZXRlID0gKG9iamVjdCkgPT4gKHtcbi8vICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuLy8gICAgIHRvZ2dsZTogKCkgPT4ge1xuLy8gICAgICAgICBpZiAob2JqZWN0LmNvbXBsZXRlZCkge1xuLy8gICAgICAgICAgICAgb2JqZWN0LmNvbXBsZXRlZCA9IGZhbHNlO1xuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgb2JqZWN0LmNvbXBsZXRlZCA9IHRydWU7XG4vLyAgICAgICAgIH07XG4vLyAgICAgfSxcbi8vICAgICBnZXRDb21wbGV0ZWRTdGF0ZTogKCkgPT4ge1xuLy8gICAgICAgICByZXR1cm4gb2JqZWN0LmNvbXBsZXRlZFxuLy8gICAgIH1cbi8vIH0pO1xuXG5jb25zdCBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxDb21wbGV0ZWRTdGF0ZSkgPT4ge1xuICAgIGxldCBjb21wbGV0ZWQgPSBpbml0aWFsQ29tcGxldGVkU3RhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZUNvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q29tcGxldGVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1Rhc2sgfSBmcm9tIFwiLi90b2RvX3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0X3Rhc2tfb2JqZWN0XCI7XG5cbmNvbnN0IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0ID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJUb1RvZG9MaXN0ID0gKHRhYk5hbWU9XCJOZXcgVGFiXCIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiID0gdG9Eb1RhYih0YWJOYW1lKTtcbiAgICAgICAgcmV0dXJuIHRvRG9MaXN0LmFkZFRhc2sobmV3VGFiKTtcbiAgICB9XG4gICAgY29uc3QgZWRpdFRhYk5hbWUgPSAodGFiSW5kZXgsIG5ld1RhYk5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgdGFiT2JqZWN0LnNldFRhc2tUaXRsZShuZXdUYWJOYW1lKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlQ3VycmVudFRhYiA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiSW5kZXgpXG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJBcnJheSA9IHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgIGxldCBmaXJzdFRhYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCB0YWIgaW4gdGFiQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0YWJBcnJheVt0YWJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRhYiA9IHRhYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RUYWI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KG51bGwpXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdUYXNrVG9UYWIgPSAodGFiSW5kZXgsIHRpdGxlPVwiTmV3IFRhc2sgVGl0bGVcIiwgZHVlRGF0ZT1cIlRhc2sgRHVlIERhdGVcIiwgZGVzY3JpcHRpb249XCJUYXNrIERlc2NyaXB0aW9uXCIsIG5vdGVzPVwiVGFzayBOb3Rlc1wiLCBwaW5uZWQ9ZmFsc2UsIGNvbXBsZXRlZD1mYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrID0gdG9Eb1Rhc2sodGl0bGUsIGR1ZURhdGUsIGRlc2NyaXB0aW9uLCBub3RlcywgcGlubmVkLCBjb21wbGV0ZWQpO1xuICAgICAgICBjb25zdCBuZXdUYXNrSW5kZXggPSB0YWJPYmplY3QuYWRkVGFzayhuZXdUYXNrKTtcbiAgICAgICAgcmV0dXJuIG5ld1Rhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRUYXNrSW5mbyA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUsIG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGlmIChidXR0b25UeXBlID09PSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3Quc2V0VGFza1RpdGxlKG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRHVlIERhdGVcIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrRHVlRGF0ZShuZXdUYXNrU3ViY29udGVudFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3Quc2V0VGFza0Rlc2NyaXB0aW9uKG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrTm90ZXMobmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrUGluID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgdGFza09iamVjdC50b2dnbGVQaW5uZWRTdGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlVGFza0NvbXBsZXRlID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgdGFza09iamVjdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBkZXNjcmlwdGlvbj1cIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uXCIsIGNvbXBsZXRlZD1mYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gdGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrID0gY2hlY2tsaXN0VGFza09iamVjdChkZXNjcmlwdGlvbiwgY29tcGxldGVkKTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0luZGV4ID0gdGFza09iamVjdC5hZGRUYXNrKG5ld0NoZWNrbGlzdFRhc2spO1xuICAgICAgICByZXR1cm4gbmV3Q2hlY2tsaXN0VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZWRpdENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCwgbmV3RGVzY3JpcHRpb25WYWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tPYmplY3Quc2V0VGFza0Rlc2NyaXB0aW9uKG5ld0Rlc2NyaXB0aW9uVmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY2hlY2tsaXN0VGFza09iamVjdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkTmV3VGFiVG9Ub2RvTGlzdCxcbiAgICAgICAgZWRpdFRhYk5hbWUsXG4gICAgICAgIHVwZGF0ZUN1cnJlbnRUYWIsXG4gICAgICAgIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLFxuICAgICAgICBhZGROZXdUYXNrVG9UYWIsXG4gICAgICAgIGVkaXRUYXNrSW5mbyxcbiAgICAgICAgdG9nZ2xlVGFza1BpbixcbiAgICAgICAgdG9nZ2xlVGFza0NvbXBsZXRlLFxuICAgICAgICBhZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrLFxuICAgICAgICBlZGl0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uLFxuICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVcbiAgICB9O1xufSkoKTtcblxuZXhwb3J0IHsgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgfTsiLCJpbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG4vLyBpbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcblxuY29uc3QgdG9Eb1RhYiA9ICh0aXRsZSkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgdGl0bGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIHRpdGxlKSxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCB7IHRvRG9UYWIgfTsiLCJpbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcblxuY29uc3QgdG9Eb1Rhc2sgPSAodGl0bGUsIGR1ZURhdGUsIGRlc2NyaXB0aW9uLCBub3RlcywgcGlubmVkLCBjb21wbGV0ZWQpID0+IHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIHRpdGxlQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCB0aXRsZSksIFxuICAgICAgICBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgZGVzY3JpcHRpb24pLFxuICAgICAgICBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkdWVEYXRlKSxcbiAgICAgICAgbm90ZXNCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIG5vdGVzKSxcbiAgICAgICAgLy8gY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudChvYmplY3QpLFxuICAgICAgICBwaW5uZWRCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIHBpbm5lZCksXG4gICAgICAgIGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgY29tcGxldGVkKSxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCB7IHRvRG9UYXNrIH07IiwiY29uc3QgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbER1ZURhdGUpID0+IHtcbiAgICBsZXQgZHVlRGF0ZSA9IGluaXRpYWxEdWVEYXRlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrRHVlRGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBkdWVEYXRlO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrRHVlRGF0ZShuZXdEdWVEYXRlKSB7XG4gICAgICAgICAgICBkdWVEYXRlID0gbmV3RHVlRGF0ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBub3Rlc0JlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbE5vdGVzKSA9PiB7XG4gICAgbGV0IG5vdGVzID0gaW5pdGlhbE5vdGVzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrTm90ZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gbm90ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tOb3RlcyhuZXdOb3Rlcykge1xuICAgICAgICAgICAgbm90ZXMgPSBuZXdOb3RlcztcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IiwiY29uc3QgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsUGlubmVkU3RhdGUpID0+IHtcbiAgICBsZXQgcGlubmVkID0gaW5pdGlhbFBpbm5lZFN0YXRlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICB0b2dnbGVQaW5uZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChwaW5uZWQpIHtcbiAgICAgICAgICAgICAgICBwaW5uZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGlubmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBpbm5lZFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBpbm5lZDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgfTsiLCJpbXBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbXBsZXRlZF9jb21wb25lbnRcIjtcblxuLy8gb3JpZ2luYWwgd2hlcmUgb2JqZWN0IHdvdWxkIG5lZWQgdG8gaGF2ZSBPYmplY3QuYXNzaWduKCkgZm9yIGV2ZXJ5IGluc3RhbmNlXG4vLyBrZWVwaW5nIGZvciBwb3N0ZXJpdHksIHByb2JhYmx5IHdpbGwgZGVsZXRlZCBhdCB0aGUgZW5kXG4vLyBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gKGRlc2NyaXB0aW9uKSA9PiB7XG4gICAgLy8gY29uc3QgZ2V0VGFza0Rlc2NyaXB0aW9uID0gKCkgPT4ge1xuICAgIC8vICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgLy8gfTtcbiAgICAvLyBjb25zdCBzZXRUYXNrRGVzY3JpcHRpb24gPSAobmV3RGVzY3JpcHRpb24pID0+IHtcbiAgICAvLyAgICAgZGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICAvLyB9O1xuLy8gICAgIHJldHVybiB7IGdldFRhc2tEZXNjcmlwdGlvbiwgc2V0VGFza0Rlc2NyaXB0aW9uIH07XG4vLyB9O1xuXG5jb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gKGRlc2NyaXB0aW9uLCBjb21wbGV0ZWQpID0+IHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkZXNjcmlwdGlvbiksXG4gICAgICAgIGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgY29tcGxldGVkKVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IHsgY2hlY2tsaXN0VGFza09iamVjdCB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuXG5jb25zdCBoZWxwZXJGdW5jdGlvbnMgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGdldFRhYkluZGV4ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhYkluZGV4ID0gdGFiRWxlbWVudC5kYXRhc2V0LnRhYkluZGV4O1xuICAgICAgICByZXR1cm4gdGFiSW5kZXg7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYWJPYmplY3QgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhYk9iamVjdDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhYkVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHt0YWJJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZXYXNDdXJyZW50VGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGlmICh0YWJFbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBcImN1cnJlbnQtdGFiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tJZk9ubHlPbmVUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgdG9Eb1RhYnMgPSBBcnJheS5mcm9tKHRvRG9UYWJTZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLXRpdGxlXCIpKTtcbiAgICAgICAgaWYgKHRvRG9UYWJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0lmTm9Nb3JlVGFicyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFicyA9IEFycmF5LmZyb20odG9Eb1RhYlNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbChcIi50YWItdGl0bGVcIikpO1xuICAgICAgICBpZiAodG9Eb1RhYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tJbmRleCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IHRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICByZXR1cm4gdGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFza09iamVjdCA9ICh0YWJJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IGdldFRhYk9iamVjdCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSB0YWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIHJldHVybiB0YXNrT2JqZWN0O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFza0VsZW1lbnQgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFzay1pbmRleD0nJHt0YXNrSW5kZXh9J11gKTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBnZXRUYXNrU3ViY29udGFpbmVyVHlwZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50Q2xhc3NlcyA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250YWluZXJUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tdGl0bGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIlRpdGxlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkR1ZSBEYXRlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkRlc2NyaXB0aW9uXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tbm90ZXMtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIk5vdGVzXCI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyVHlwZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRpdGxlLXNlY3Rpb25cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzLXNlY3Rpb25cIik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGdldENoZWNrbGlzdFRhc2tJbmRleCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza09iamVjdCA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza09iamVjdDtcbiAgICB9XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBnZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNoZWNrbGlzdC10YXNrLWluZGV4PScke2NoZWNrbGlzdFRhc2tJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGdldE5ld1ZhbHVlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50ID0gKGV2ZW50LCBlbGVtZW50VHlwZSkgPT4ge1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFza1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2staW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiQ2hlY2tsaXN0IFRhc2tcIikge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0cnlpbmdUb0RvdWJsZUNsaWNrID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tDbGFzc2VzID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICBpZiAodGFza0NsYXNzZXMuaW5jbHVkZXMoXCJtaWQtYW5pbWF0aW9uXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YWJFbGVtZW50ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlICh0YWJFbGVtZW50LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpICE9PSBcInRhYi10aXRsZVwiKSB7XG4gICAgICAgICAgICB0YWJFbGVtZW50ID0gdGFiRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFza0VsZW1lbnQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgbGV0IGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgd2hpbGUgKCFjbGFzc0xpc3QuaW5jbHVkZXMoXCJ0by1kby10YXNrXCIpKSB7XG4gICAgICAgICAgICB0YXNrRWxlbWVudCA9IHRhc2tFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgbGV0IGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KVxuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2stc3ViY29udGFpbmVyXCIpKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHRhc2tTdWJjb250YWluZXJFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKHRhc2tTdWJjb250YWluZXJFbGVtZW50LmNsYXNzTGlzdClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RUYXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcImNoZWNrbGlzdC10YXNrXCIpKSB7XG4gICAgICAgICAgICBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKGNoZWNrbGlzdFRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrRWxlbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0VGFiSW5kZXgsXG4gICAgICAgIGdldFRhYk9iamVjdCxcbiAgICAgICAgZ2V0VGFiRWxlbWVudCxcbiAgICAgICAgY2hlY2tJZldhc0N1cnJlbnRUYWIsXG4gICAgICAgIGNoZWNrSWZPbmx5T25lVGFiLFxuICAgICAgICBjaGVja0lmTm9Nb3JlVGFicyxcbiAgICAgICAgZ2V0VGFza0luZGV4LFxuICAgICAgICBnZXRUYXNrT2JqZWN0LFxuICAgICAgICBnZXRUYXNrRWxlbWVudCxcbiAgICAgICAgZ2V0VGFza1N1YmNvbnRhaW5lclR5cGUsXG4gICAgICAgIGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50LFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrSW5kZXgsXG4gICAgICAgIGdldENoZWNrbGlzdFRhc2tPYmplY3QsXG4gICAgICAgIGdldENoZWNrbGlzdFRhc2tFbGVtZW50LFxuICAgICAgICBnZXROZXdWYWx1ZSxcbiAgICAgICAgY2hlY2tGb3JFeGlzdGluZ0lucHV0RWxlbWVudCxcbiAgICAgICAgdHJ5aW5nVG9Eb3VibGVDbGljayxcbiAgICB9O1xufSkoKTtcblxuZXhwb3J0IHsgaGVscGVyRnVuY3Rpb25zIH07IiwiaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfYnVuZGxlcl9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuXG5jb25zdCBET01Db250cm9sbGVyQWRkRWRpdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgYWRkVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFiXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IG5ld1RhYkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3RUaXRsZSA9IG5ld1RhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgbmV3VGFiRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiLXRpdGxlXCIpO1xuICAgICAgICBuZXdUYWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXggPSBpbmRleDtcbiAgICAgICAgbmV3VGFiRWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3dpdGNoLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInRhYi1uYW1lXCI+VEFCIE5BTUUgUExBQ0VIT0xERVI8L2gyPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YWIgbmFtZSBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFiIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHRhYk5hbWVFbGVtZW50ID0gbmV3VGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYi1uYW1lXCIpO1xuICAgICAgICB0YWJOYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5ld1RhYk9iamVjdFRpdGxlO1xuICAgICAgICB0b0RvVGFiU2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFiRWxlbWVudCwgYWRkVGFiQnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIG5ld1RhYkVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRCZWZvcmUoaW5wdXRFbGVtZW50LCB0YWJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9XG4gICAgY29uc3Qgc2V0VGFiSW5wdXRFbGVtZW50VmFsdWUgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHRhYk5hbWU7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYk5hbWVFbGVtZW50ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IHRhYkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwic3dpdGNoLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGFiQnV0dG9uTmFtZS5jbGFzc0xpc3QuYWRkKFwidGFiLW5hbWVcIik7XG4gICAgICAgIHRhYkJ1dHRvbk5hbWUudGV4dENvbnRlbnQgPSB0YWJOYW1lO1xuICAgICAgICB0YWJCdXR0b24uYXBwZW5kQ2hpbGQodGFiQnV0dG9uTmFtZSk7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRhYkJ1dHRvbiwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBhZGRDdXJyZW50VGFiSW5kaWNhdG9yID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWJJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQoY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgdGFiRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImN1cnJlbnQtdGFiXCIpO1xuICAgIH1cbiAgICBjb25zdCBsb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgbGlzdE9mVGFza3MgPSBjdXJyZW50VGFiT2JqZWN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgIGZvciAoY29uc3QgdGFza0luZGV4IGluIGxpc3RPZlRhc2tzKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gbGlzdE9mVGFza3NbdGFza0luZGV4XVxuICAgICAgICAgICAgaWYgKHRhc2tPYmplY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2tFbGVtZW50ID0gYWRkTmV3VGFza1RvRE9NKHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgY2hhbmdlUGluQnV0dG9uSW1hZ2UodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICBzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24odGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICB0b2dnbGVUYXNrRE9NQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICBldmVudEJ1bmRsZXIuYWRkVGFza0xpc3RlbmVycyhuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdE9mQ2hlY2tsaXN0VGFza3MgPSB0YXNrT2JqZWN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggaW4gbGlzdE9mQ2hlY2tsaXN0VGFza3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGxpc3RPZkNoZWNrbGlzdFRhc2tzW2NoZWNrbGlzdFRhc2tJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2xpc3RUYXNrT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50ID0gYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEJ1bmRsZXIuYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyhuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3VGFza1RvRE9NID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IHRvRG9Db250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICBjb25zdCBuZXdUYXNrRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG5ld1Rhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby10YXNrXCIpO1xuICAgICAgICBuZXdUYXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleCA9IGluZGV4O1xuICAgICAgICBjb25zdCBuZXdUYXNrVGl0bGUgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrRGVzY3JpcHRpb24gPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdUYXNrRHVlRGF0ZSA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza05vdGVzID0gbmV3VGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0NvbXBsZXRlSUQgPSBgdG8tZG8tY29tcGxldGUtY2hlY2tib3gtJHtpbmRleH1gO1xuICAgICAgICBuZXdUYXNrRWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tdGFzay1vdmVydmlld1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby10aXRsZS1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRvLWRvLXRpdGxlXCI+VElUTEUgUExBQ0VIT0xERVI8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tcGluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL3Bpbi11bnBpbm5lZC5wbmdcIiBhbHQ9XCJQaW4gdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stdGl0bGUgZWRpdC10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIHRpdGxlIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvLWRvLXJlbW92ZS10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiSUQgUExBQ0VIT0xERVJcIiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlLWxhYmVsXCI+Q29tcGxldGVkOjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cIlwiIGNsYXNzPVwidG8tZG8tY29tcGxldGUtY2hlY2tib3hcIiBpZD1cIklEIFBMQUNFSE9MREVSXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tdGFzay1jaGFuZ2UtZGlzcGxheVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2hldnJvbi1kb3duLnBuZ1wiIGFsdD1cIkNoYW5nZSB0YXNrIGRpc3BsYXkgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1kdWUtZGF0ZS1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tZHVlLWRhdGVcIj5EVUUgREFURSBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1kdWUtZGF0ZSBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgZHVlIGRhdGUgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lciBhbmltYXRpb24tdGFyZ2V0XCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0by1kby1kZXNjcmlwdGlvblwiPkRFU0NSSVBUSU9OIFBMQUNFSE9MREVSPC9wPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stZGVzY3JpcHRpb24gZWRpdC10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgZGVzY3JpcHRpb24gYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1ub3Rlcy1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyIGFuaW1hdGlvbi10YXJnZXRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLW5vdGVzXCI+Tk9URVMgUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1ub3RlcyBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBub3RlcyBidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBhY3Rpb249XCJcIiBjbGFzcz1cImNoZWNrbGlzdCBhbmltYXRpb24tdGFyZ2V0XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrbGlzdC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxlZ2VuZCBjbGFzcz1cImNoZWNrbGlzdC1sYWJlbFwiPkNoZWNrbGlzdDwvbGVnZW5kPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYWRkLWNoZWNrbGlzdC10YXNrXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGx1cy5wbmdcIiBhbHQ9XCJBZGQgY2hlY2tsaXN0IHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHRpdGxlRWxlbWVudCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGl0bGVcIik7XG4gICAgICAgIHRpdGxlRWxlbWVudC50ZXh0Q29udGVudCA9IG5ld1Rhc2tUaXRsZTtcbiAgICAgICAgY29uc3QgZHVlRGF0ZUVsZW1lbnQgPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWR1ZS1kYXRlXCIpO1xuICAgICAgICBkdWVEYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IFwiRHVlIE9uOiBcIiArIG5ld1Rhc2tEdWVEYXRlO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbkVsZW1lbnQgPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBcIkRlc2NyaXB0aW9uOiBcIiArIG5ld1Rhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgY29uc3Qgbm90ZXNFbGVtZW50ID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1ub3Rlc1wiKTtcbiAgICAgICAgbm90ZXNFbGVtZW50LnRleHRDb250ZW50ID0gXCJOb3RlczogXCIgKyBuZXdUYXNrTm90ZXM7XG4gICAgICAgIHRvRG9Db250ZW50LmFwcGVuZENoaWxkKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgY29uc3QgY29tcGxldGVMYWJlbCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJsYWJlbFwiKTtcbiAgICAgICAgY29tcGxldGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgbmV3VGFza0NvbXBsZXRlSUQpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUNoZWNrYm94ID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgY29tcGxldGVDaGVja2JveC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBuZXdUYXNrQ29tcGxldGVJRCk7XG4gICAgICAgIHJldHVybiBuZXdUYXNrRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFza0lucHV0RWxlbWVudCA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFzay1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyLmluc2VydEJlZm9yZShpbnB1dEVsZW1lbnQsIHRhc2tTdWJjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3Qgc2V0VGFza0lucHV0RWxlbWVudFZhbHVlID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBsZXQgdGFza09iamVjdFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYnV0dG9uVHlwZSA9PT0gXCJUaXRsZVwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0VmFsdWUgPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRHVlIERhdGVcIikge1xuICAgICAgICAgICAgdGFza09iamVjdFZhbHVlID0gdGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgdGFza09iamVjdFZhbHVlID0gdGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIk5vdGVzXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3RWYWx1ZSA9IHRhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHRhc2tPYmplY3RWYWx1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydFRhc2tTdWJjb250ZW50RWxlbWVudCA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQodGFza0luZGV4LCBidXR0b25UeXBlKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGVudEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChidXR0b25UeXBlID09PSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tUaXRsZSA9IHRhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLXRpdGxlXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gdGFza1RpdGxlO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRHVlIERhdGVcIikge1xuICAgICAgICAgICAgY29uc3QgdGFza0R1ZURhdGUgPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tZHVlLWRhdGVcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIkR1ZSBPbjogXCIgKyB0YXNrRHVlRGF0ZTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IHRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIkRlc2NyaXB0aW9uOiBcIiArIHRhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIk5vdGVzXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tOb3RlcyA9IHRhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tbm90ZXNcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIk5vdGVzOiBcIiArIHRhc2tOb3RlcztcbiAgICAgICAgfTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRhc2tTdWJjb250ZW50RWxlbWVudCwgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGNvbnN0IHRvZ2dsZVRhc2tET01Db21wbGV0ZSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY29tcGxldGVDaGVja2JveCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSAgdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlZFN0YXRlZCA9IHRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgaWYgKHRhc2tDb21wbGV0ZWRTdGF0ZWQpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFzay1jb21wbGV0ZWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wbGV0ZUNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YXNrLWNvbXBsZXRlZFwiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tUb0RPTSA9ICh0YXNrSW5kZXgsIG5ld0NoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFbGVtZW50ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3RcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sobmV3Q2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBuZXdDaGVja2xpc3RUYXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2tcIik7XG4gICAgICAgIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4ID0gbmV3Q2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICBuZXdDaGVja2xpc3RUYXNrRWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJjaGVja2xpc3QtJHt0YXNrSW5kZXh9LSR7bmV3Q2hlY2tsaXN0VGFza0luZGV4fVwiIGNsYXNzPVwiY2hlY2tsaXN0LWNvbXBsZXRlLWNoZWNrYm94XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtuZXdDaGVja2xpc3RUYXNrSW5kZXh9XCIgY2xhc3M9XCJjaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICBERVNDUklQVElPTiBQTEFDRUhPTERFUlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LWNoZWNrbGlzdC10YXNrXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVtb3ZlLWNoZWNrbGlzdC10YXNrXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIkVkaXQgY2hlY2tsaXN0IHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgYFxuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50ID0gbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IG5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgY2hlY2tsaXN0RWxlbWVudC5hcHBlbmRDaGlsZChuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIHJldHVybiBuZXdDaGVja2xpc3RUYXNrRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5hcHBlbmRDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbjtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZm9yXCIsIGBjaGVja2xpc3QtJHt0YXNrSW5kZXh9LSR7Y2hlY2tsaXN0VGFza0luZGV4fWApO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLmFwcGVuZENoaWxkKGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94LmNoZWNrZWQgPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCk7XG4gICAgICAgIGlmIChjaGVja2xpc3RUYXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCkpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3guY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC10YXNrLWNvbXBsZXRlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3guY2xhc3NMaXN0LnJlbW92ZShcImNoZWNrbGlzdC10YXNrLWNvbXBsZXRlZFwiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoYW5nZVBpbkJ1dHRvbkltYWdlID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgcGluQnV0dG9uID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1waW5cIilcbiAgICAgICAgY29uc3QgcGluQnV0dG9uSW1hZ2UgPSBwaW5CdXR0b24ucXVlcnlTZWxlY3RvcihcImltZ1wiKTtcbiAgICAgICAgdGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpXG4gICAgICAgICAgICA/IHBpbkJ1dHRvbkltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4vYXNzZXRzL3Bpbi1waW5uZWQucG5nXCIpXG4gICAgICAgICAgICA6IHBpbkJ1dHRvbkltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4vYXNzZXRzL3Bpbi11bnBpbm5lZC5wbmdcIik7XG4gICAgfTtcbiAgICBjb25zdCBzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudEluZGV4ID0gdGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhc2tDb250ZW50U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgaWYgKHRhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBpbm5lZC10YXNrXCIpKTtcbiAgICAgICAgICAgIGlmIChsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgdGFza0NvbnRlbnRTZWN0aW9uLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlFbmRJbmRleCA9IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQaW5uZWRUYXNrRWxlbWVudCA9IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50c1thcnJheUVuZEluZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBpbm5lZFRhc2tFbGVtZW50IG9mIGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaW5uZWRUYXNrRWxlbWVudEluZGV4ID0gcGlubmVkVGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrRWxlbWVudEluZGV4IDwgcGlubmVkVGFza0VsZW1lbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgcGlubmVkVGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGlubmVkVGFza0VsZW1lbnQgPT09IGxhc3RQaW5uZWRUYXNrRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBpbm5lZFRhc2tFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIHRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwaW5uZWQtdGFza1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzID0gQXJyYXkuZnJvbSh0YXNrQ29udGVudFNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbChcIi50by1kby10YXNrOm5vdCgucGlubmVkLXRhc2spXCIpKTtcbiAgICAgICAgICAgIGlmIChsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uYXBwZW5kQ2hpbGQodGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUVuZEluZGV4ID0gbGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0VW5waW5uZWRUYXNrRWxlbWVudCA9IGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzW2FycmF5RW5kSW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdW5waW5uZWRUYXNrRWxlbWVudCBvZiBsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bnBpbm5lZFRhc2tFbGVtZW50SW5kZXggPSB1bnBpbm5lZFRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFza0VsZW1lbnRJbmRleCA8IHVucGlubmVkVGFza0VsZW1lbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgdW5waW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1bnBpbm5lZFRhc2tFbGVtZW50ID09PSBsYXN0VW5waW5uZWRUYXNrRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmFwcGVuZENoaWxkKHRhc2tFbGVtZW50LCBsYXN0VW5waW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwicGlubmVkLXRhc2tcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzVG9Ub2dnbGUgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYW5pbWF0aW9uLXRhcmdldFwiKSk7XG4gICAgICAgIGVsZW1lbnRzVG9Ub2dnbGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudENsYXNzZXMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Q2xhc3Nlcy5pbmNsdWRlcyhcImhpZGUtdG8tZG8tZGV0YWlsc1wiKSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtdG8tZG8tZGV0YWlsc1wiKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNwbGF5LXRvLWRvLWRldGFpbHNcIik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGUtdG8tZG8tZGV0YWlsc1wiKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNwbGF5LXRvLWRvLWRldGFpbHNcIik7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnREb3VibGVDbGljayh0YXNrRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCBwcmV2ZW50RG91YmxlQ2xpY2sgPSAodGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1pZC1hbmltYXRpb25cIik7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1pZC1hbmltYXRpb25cIik7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH07XG4gICAgY29uc3Qgcm90YXRlQ2hldnJvbkJ1dHRvbiA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hldnJvbkJ1dHRvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFzay1jaGFuZ2UtZGlzcGxheVwiKTtcbiAgICAgICAgY29uc3QgYnV0dG9uSW1hZ2UgPSBjaGV2cm9uQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkltYWdlQ2xhc3NlcyA9IEFycmF5LmZyb20oYnV0dG9uSW1hZ2UuY2xhc3NMaXN0KTtcbiAgICAgICAgaWYgKGJ1dHRvbkltYWdlQ2xhc3Nlcy5sZW5ndGggPT09IDAgfHwgYnV0dG9uSW1hZ2VDbGFzc2VzLmluY2x1ZGVzKFwicm90YXRlLWhpZGUtdGFzay1kZXRhaWxzXCIpKSB7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwicm90YXRlLWhpZGUtdGFzay1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LmFkZChcInJvdGF0ZS1kaXNwbGF5LXRhc2stZGV0YWlsc1wiKTtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5hZGQoXCJyb3RhdGVkLWNoZXZyb25cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uSW1hZ2VDbGFzc2VzLmluY2x1ZGVzKFwicm90YXRlLWRpc3BsYXktdGFzay1kZXRhaWxzXCIpKSB7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwicm90YXRlLWRpc3BsYXktdGFzay1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LmFkZChcInJvdGF0ZS1oaWRlLXRhc2stZGV0YWlsc1wiKTtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJyb3RhdGVkLWNoZXZyb25cIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVBbmltYXRpb25zID0gKHRhc2tJbmRleCwgYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZURpc3BsYXlCdXR0b24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIik7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkltYWdlID0gdG9nZ2xlRGlzcGxheUJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgICAgICBjb25zdCBlbGVtZW50c1RvVG9nZ2xlID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFuaW1hdGlvbi10YXJnZXRcIikpO1xuICAgICAgICBlbGVtZW50c1RvVG9nZ2xlLnB1c2goYnV0dG9uSW1hZ2UpXG4gICAgICAgIGVsZW1lbnRzVG9Ub2dnbGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJFbmFibGVcIikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vLWFuaW1hdGlvbnNcIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJEaXNhYmxlXCIpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm5vLWFuaW1hdGlvbnNcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZE5ld1RhYlRvRE9NLFxuICAgICAgICBpbnNlcnRUYWJJbnB1dEVsZW1lbnQsXG4gICAgICAgIHNldFRhYklucHV0RWxlbWVudFZhbHVlLFxuICAgICAgICBpbnNlcnRUYWJOYW1lRWxlbWVudCxcbiAgICAgICAgYWRkQ3VycmVudFRhYkluZGljYXRvcixcbiAgICAgICAgbG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIsXG4gICAgICAgIGFkZE5ld1Rhc2tUb0RPTSxcbiAgICAgICAgaW5zZXJ0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgc2V0VGFza0lucHV0RWxlbWVudFZhbHVlLFxuICAgICAgICBpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQsXG4gICAgICAgIHRvZ2dsZVRhc2tET01Db21wbGV0ZSxcbiAgICAgICAgYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NLFxuICAgICAgICBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LFxuICAgICAgICBzZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUsXG4gICAgICAgIGluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQsXG4gICAgICAgIHRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSxcbiAgICAgICAgY2hhbmdlUGluQnV0dG9uSW1hZ2UsXG4gICAgICAgIHNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbixcbiAgICAgICAgdG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzLFxuICAgICAgICByb3RhdGVDaGV2cm9uQnV0dG9uLFxuICAgICAgICB0b2dnbGVBbmltYXRpb25zXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH07IiwiaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuXG5jb25zdCBET01Db250cm9sbGVyUmVtb3ZlID0gKCgpID0+IHtcbiAgICBjb25zdCByZW1vdmVUYWJOYW1lRWxlbWVudCA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBsZXQgc3dpdGNoVGFiID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnN3aXRjaC10YWJcIilcbiAgICAgICAgdGFiRWxlbWVudC5yZW1vdmVDaGlsZChzd2l0Y2hUYWIpO1xuICAgICAgICBzd2l0Y2hUYWIgPSBudWxsXG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWJJbnB1dEVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZXNldEN1cnJlbnRUYWJTdGF0dXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2N1cnJlbnQtdGFiXCIpO1xuICAgICAgICBpZiAoY3VycmVudFRhYiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY3VycmVudFRhYi5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlVGFiRWxlbWVudEZyb21ET00gPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24ucmVtb3ZlQ2hpbGQodGFiRWxlbWVudCk7XG4gICAgICAgIHRhYkVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFza0VsZW1lbnRGcm9tRE9NID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBsZXQgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9Eb1Rhc2tTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0b0RvVGFza1NlY3Rpb24ucmVtb3ZlQ2hpbGQodGFza0VsZW1lbnQpO1xuICAgICAgICB0YXNrRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00gPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGVudEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucmVtb3ZlQ2hpbGQodGFza1N1YmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gbnVsbFxuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrSW5wdXRFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25ET00gPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBsZXQgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnJlbW92ZUNoaWxkKGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50ID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrRWxlbWVudERPTSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFbGVtZW50ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3RcIik7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVBbGxUYXNrRWxlbWVudHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tDb250ZW50U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLnJlcGxhY2VDaGlsZHJlbigpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlVGFiTmFtZUVsZW1lbnQsXG4gICAgICAgIHJlbW92ZVRhYklucHV0RWxlbWVudCxcbiAgICAgICAgcmVzZXRDdXJyZW50VGFiU3RhdHVzLFxuICAgICAgICByZW1vdmVUYWJFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVtb3ZlVGFza0VsZW1lbnRGcm9tRE9NLFxuICAgICAgICByZW1vdmVUYXNrU3ViY29udGVudEVsZW1lbnRGcm9tRE9NLFxuICAgICAgICByZW1vdmVUYXNrSW5wdXRFbGVtZW50LFxuICAgICAgICByZW1vdmVDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25ET00sXG4gICAgICAgIHJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQsXG4gICAgICAgIHJlbW92ZUNoZWNrbGlzdFRhc2tFbGVtZW50RE9NLFxuICAgICAgICByZW1vdmVBbGxUYXNrRWxlbWVudHNcbiAgICB9XG59KSgpO1xuXG5leHBvcnQgeyBET01Db250cm9sbGVyUmVtb3ZlIH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5cbmNvbnN0IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZVRhYkZyb21Ub2RvTGlzdCA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICB0b0RvTGlzdC5yZW1vdmVUYXNrKHRhYkluZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhc2tGcm9tVGFiID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjdXJyZW50VGFiT2JqZWN0LnJlbW92ZVRhc2sodGFza0luZGV4KTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0Zyb21UYXNrID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICB0YXNrT2JqZWN0LnJlbW92ZVRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZVRhYkZyb21Ub2RvTGlzdCxcbiAgICAgICAgcmVtb3ZlVGFza0Zyb21UYWIsXG4gICAgICAgIHJlbW92ZUNoZWNrbGlzdFRhc2tGcm9tVGFza1xuICAgIH07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IHRvZG9MaXN0U3RvcmFnZSA9ICgoKSA9PiB7XG4gICAgbGV0IGxvYWRpbmdJbkNvbnRlbnQgPSBmYWxzZTtcbiAgICBjb25zdCBhZGRUYWIgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYk9iamVjdCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFiSlNPTlN0cmluZyA9IGB7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiJHt0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCl9XCIsXG4gICAgICAgICAgICBcInRhc2tzXCI6IHt9XG4gICAgICAgIH1gO1xuICAgICAgICBjb25zdCB0YWJQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRhYkpTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdID0gdGFiUGFyc2VkT2JqZWN0O1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDdXJyZW50VGFiID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdGFiSW5kZXggPT09IG51bGxcbiAgICAgICAgICAgID8gKHRvZG9MaXN0UGFyc2VkT2JqZWN0W1wiY3VycmVudF90YWJcIl0gPSBudWxsKVxuICAgICAgICAgICAgOiAodG9kb0xpc3RQYXJzZWRPYmplY3RbXCJjdXJyZW50X3RhYlwiXSA9IE51bWJlcih0YWJJbmRleCkpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdClcbiAgICB9O1xuICAgIGNvbnN0IHNldFRhYk5hbWUgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYk9iamVjdCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRpdGxlXCJdID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDdXJyZW50VGFiSW5kZXggPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJjdXJyZW50X3RhYlwiXTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWJJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhYlRpdGxlID0gKHRhYktleSkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHRhYlRpdGxlID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0aXRsZVwiXTtcbiAgICAgICAgcmV0dXJuIHRhYlRpdGxlO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiT2JqZWN0cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0cyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXTtcbiAgICAgICAgcmV0dXJuIHRhYk9iamVjdHM7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWIgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdID0gbnVsbDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCB0YXNrSlNPTlN0cmluZyA9IGB7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiJHt0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpfVwiLFxuICAgICAgICAgICAgXCJkdWVfZGF0ZVwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpfVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKX1cIixcbiAgICAgICAgICAgIFwibm90ZXNcIjogXCIke3Rhc2tPYmplY3QuZ2V0VGFza05vdGVzKCl9XCIsXG4gICAgICAgICAgICBcInBpbm5lZFwiOiAke3Rhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKX0sXG4gICAgICAgICAgICBcImNvbXBsZXRlZFwiOiAke3Rhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKX0sXG4gICAgICAgICAgICBcImNoZWNrbGlzdF90YXNrc1wiOiB7fVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgdGFza1BhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UodGFza0pTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF0gPSB0YXNrUGFyc2VkT2JqZWN0O1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRUYXNrU3ViY29udGFpbmVyVmFsdWUgPSAodGFiSW5kZXgsIHRhc2tJbmRleCwgc3ViY29udGFpbmVyVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgaWYgKHN1YmNvbnRhaW5lclR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1widGl0bGVcIl0gPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmNvbnRhaW5lclR5cGUgPT09IFwiRHVlIERhdGVcIikge1xuICAgICAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiZHVlX2RhdGVcIl0gPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViY29udGFpbmVyVHlwZSA9PT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJkZXNjcmlwdGlvblwiXSA9IHRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViY29udGFpbmVyVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJub3Rlc1wiXSA9IHRhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW5uZWQgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wicGlubmVkXCJdID0gdGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrQ29tcGxldGVkID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcImNvbXBsZXRlZFwiXSA9IHRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFza1ZhbHVlcyA9ICh0YWJLZXksIHRhc2tLZXkpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBsZXQgdGFza1ZhbHVlcyA9IFtdO1xuICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1widGl0bGVcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrVGl0bGUpO1xuICAgICAgICBjb25zdCB0YXNrRHVlRGF0ZSA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJkdWVfZGF0ZVwiXTtcbiAgICAgICAgdGFza1ZhbHVlcy5wdXNoKHRhc2tEdWVEYXRlKTtcbiAgICAgICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0YXNrc1wiXVt0YXNrS2V5XVtcImRlc2NyaXB0aW9uXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgY29uc3QgdGFza05vdGVzID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0YXNrc1wiXVt0YXNrS2V5XVtcIm5vdGVzXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza05vdGVzKTtcbiAgICAgICAgY29uc3QgdGFza1Bpbm5lZCA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJwaW5uZWRcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrUGlubmVkKTtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlZCA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJjb21wbGV0ZWRcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrQ29tcGxldGVkKTtcbiAgICAgICAgcmV0dXJuIHRhc2tWYWx1ZXM7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrT2JqZWN0cyA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IHRvZG9MaXN0U3RvcmFnZS5nZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0cyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3RzO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdID0gbnVsbDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0pTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIiR7Y2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKX1cIixcbiAgICAgICAgICAgIFwiY29tcGxldGVkXCI6ICR7Y2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpfVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza1BhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UoY2hlY2tsaXN0VGFza0pTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdID0gY2hlY2tsaXN0VGFza1BhcnNlZE9iamVjdDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3Qgc2V0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdW1wiZGVzY3JpcHRpb25cIl0gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVkID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdW1wiY29tcGxldGVkXCJdID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDaGVja2xpc3RUYXNrVmFsdWVzID0gKHRhYktleSwgdGFza0tleSwgY2hlY2tsaXN0VGFza0tleSkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrVmFsdWVzID0gW107XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJjaGVja2xpc3RfdGFza3NcIl1bY2hlY2tsaXN0VGFza0tleV1bXCJkZXNjcmlwdGlvblwiXTtcbiAgICAgICAgY2hlY2tsaXN0VGFza1ZhbHVlcy5wdXNoKGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbik7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2NoZWNrbGlzdFRhc2tLZXldW1wiY29tcGxldGVkXCJdO1xuICAgICAgICBjaGVja2xpc3RUYXNrVmFsdWVzLnB1c2goY2hlY2tsaXN0VGFza0NvbXBsZXRlZCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrVmFsdWVzO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza09iamVjdHMgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IHRvZG9MaXN0U3RvcmFnZS5nZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0cyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcImNoZWNrbGlzdF90YXNrc1wiXTtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFRhc2tPYmplY3RzO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdID0gbnVsbDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tGb3JFeGlzdGluZ1N0b3JhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvX2RvX2xpc3RcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RKU09OU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b19kb19saXN0XCIpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UodG9kb0xpc3RKU09OU3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRvZG9MaXN0UGFyc2VkT2JqZWN0O1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUgPSAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEpTT05TdHJpbmdWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b19kb19saXN0XCIsIHVwZGF0ZWRKU09OU3RyaW5nVmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgaW5pdGlhbGl6ZVRvZG9MaXN0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdEpTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJjdXJyZW50X3RhYlwiOiAke3RvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpfSxcbiAgICAgICAgICAgIFwidGFic1wiOiB7fVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRvZG9MaXN0SlNPTlN0cmluZyk7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUxvYWRpbmcgPSAoKSA9PiB7XG4gICAgICAgIGxvYWRpbmdJbkNvbnRlbnQgPyBsb2FkaW5nSW5Db250ZW50ID0gZmFsc2UgOiBsb2FkaW5nSW5Db250ZW50ID0gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGlzTG9hZGluZyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGxvYWRpbmdJbkNvbnRlbnQ7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRUYWIsXG4gICAgICAgIHNldEN1cnJlbnRUYWIsXG4gICAgICAgIHNldFRhYk5hbWUsXG4gICAgICAgIGdldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgZ2V0VGFiVGl0bGUsXG4gICAgICAgIGdldFRhYk9iamVjdHMsXG4gICAgICAgIHJlbW92ZVRhYixcbiAgICAgICAgYWRkVGFzayxcbiAgICAgICAgc2V0VGFza1N1YmNvbnRhaW5lclZhbHVlLFxuICAgICAgICB0b2dnbGVUYXNrUGlubmVkLFxuICAgICAgICB0b2dnbGVUYXNrQ29tcGxldGVkLFxuICAgICAgICBnZXRUYXNrVmFsdWVzLFxuICAgICAgICBnZXRUYXNrT2JqZWN0cyxcbiAgICAgICAgcmVtb3ZlVGFzayxcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFzayxcbiAgICAgICAgc2V0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uLFxuICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVkLFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrVmFsdWVzLFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrT2JqZWN0cyxcbiAgICAgICAgcmVtb3ZlQ2hlY2tsaXN0VGFzayxcbiAgICAgICAgY2hlY2tGb3JFeGlzdGluZ1N0b3JhZ2UsXG4gICAgICAgIGdldExvY2FsU3RvcmFnZVZhbHVlLFxuICAgICAgICBpbml0aWFsaXplVG9kb0xpc3QsXG4gICAgICAgIHRvZ2dsZUxvYWRpbmcsXG4gICAgICAgIGlzTG9hZGluZ1xuICAgIH1cbn0pKCk7XG5cbmV4cG9ydCB7IHRvZG9MaXN0U3RvcmFnZSB9OyIsImltcG9ydCB7IGV2ZW50QXNzaWduZXIgfSBmcm9tIFwiLi9ldmVudF9hc3NpZ25lcl9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RfY29udHJvbGxlcl9hZGRfZWRpdF9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJSZW1vdmUgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9yZW1vdmVcIjtcbmltcG9ydCB7IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RfY29udHJvbGxlcl9yZW1vdmVfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyB0b2RvTGlzdFN0b3JhZ2UgfSBmcm9tIFwiLi90b2RvX2xpc3Rfc3RvcmFnZV9vYmplY3RcIjtcblxuY29uc3QgZXZlbnRCdW5kbGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGRUYWIgPSAoZXZlbnQsIHRhYk5hbWU9XCJOZXcgVGFiXCIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYWJUb1RvZG9MaXN0KHRhYk5hbWUpO1xuICAgICAgICBjb25zdCBuZXdUYWJFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3VGFiVG9ET00obmV3VGFiSW5kZXgpO1xuICAgICAgICBhZGRUYWJMaXN0ZW5lcnMobmV3VGFiRWxlbWVudCk7XG4gICAgICAgIGlmICghdG9kb0xpc3RTdG9yYWdlLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2UuYWRkVGFiKG5ld1RhYkluZGV4KTtcbiAgICAgICAgICAgIGlmIChoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZk9ubHlPbmVUYWIoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYigpO1xuICAgICAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZEN1cnJlbnRUYWJJbmRpY2F0b3IoKVxuICAgICAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRDdXJyZW50VGFiKGZpcnN0VGFiSW5kZXgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3VGFiSW5kZXhcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFiSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQoZXZlbnQsIFwiVGFiXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB0YWJJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYWJJbnB1dEVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWJOYW1lRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSh0YWJJbmRleCk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRhYklucHV0TGlzdGVuZXIoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBjb25zdCB0YWJJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdUYWJOYW1lID0gaGVscGVyRnVuY3Rpb25zLmdldE5ld1ZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRUYWJOYW1lKHRhYkluZGV4LCBuZXdUYWJOYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYWJOYW1lRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYklucHV0RWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZFN3aXRjaFRhYkxpc3RlbmVyKHRhYkVsZW1lbnQpO1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldFRhYk5hbWUodGFiSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdC5yZW1vdmVUYWJGcm9tVG9kb0xpc3QodGFiSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NKHRhYkluZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnJlbW92ZVRhYih0YWJJbmRleCk7XG4gICAgICAgIGlmIChoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZldhc0N1cnJlbnRUYWIoZXZlbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFRhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3Quc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZEN1cnJlbnRUYWJJbmRpY2F0b3IoKVxuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVBbGxUYXNrRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRDdXJyZW50VGFiKGZpcnN0VGFiSW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZk5vTW9yZVRhYnMoKSkge1xuICAgICAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmxvYWRUYXNrc0Zyb21OZXdDdXJyZW50VGFiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHN3aXRjaFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0lmV2FzQ3VycmVudFRhYihldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnVwZGF0ZUN1cnJlbnRUYWIodGFiSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZXNldEN1cnJlbnRUYWJTdGF0dXMoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZEN1cnJlbnRUYWJJbmRpY2F0b3IoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQWxsVGFza0VsZW1lbnRzKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5sb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYigpO1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldEN1cnJlbnRUYWIodGFiSW5kZXgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBhZGRUYWJMaXN0ZW5lcnMgPSAobmV3VGFiRWxlbWVudCkgPT4ge1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lcihuZXdUYWJFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lcihuZXdUYWJFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lcihuZXdUYWJFbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2sgPSAoXG4gICAgICAgIGV2ZW50LFxuICAgICAgICB0YWJJbmRleD10b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSxcbiAgICAgICAgdGl0bGU9XCJOZXcgVGFzayBUaXRsZVwiLFxuICAgICAgICBkdWVEYXRlPVwiVGFzayBEdWUgRGF0ZVwiLFxuICAgICAgICBkZXNjcmlwdGlvbj1cIlRhc2sgRGVzY3JpcHRpb25cIixcbiAgICAgICAgbm90ZXM9XCJUYXNrIE5vdGVzXCIsXG4gICAgICAgIHBpbm5lZD1mYWxzZSxcbiAgICAgICAgY29tcGxldGVkPWZhbHNlXG4gICAgKSA9PiB7XG4gICAgICAgIGlmICh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9hZEluSW5zdHJ1Y3Rpb25zUGFnZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBuZXdUYXNrSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYXNrVG9UYWIoXG4gICAgICAgICAgICB0YWJJbmRleCxcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgZHVlRGF0ZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbm90ZXMsXG4gICAgICAgICAgICBwaW5uZWQsXG4gICAgICAgICAgICBjb21wbGV0ZWRcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0VsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdUYXNrVG9ET00obmV3VGFza0luZGV4KTtcbiAgICAgICAgYWRkVGFza0xpc3RlbmVycyhuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIGlmICghdG9kb0xpc3RTdG9yYWdlLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2UuYWRkVGFzayh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgbmV3VGFza0luZGV4KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ld1Rhc2tJbmRleDtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50KGV2ZW50LCBcIlRhc2tcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lclR5cGUoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrU3ViY29udGVudEVsZW1lbnRGcm9tRE9NKHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFza0lucHV0RWxlbWVudCh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVGFza0lucHV0TGlzdGVuZXIoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJUeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJUeXBlKGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2tTdWJjb250ZW50VmFsdWUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0TmV3VmFsdWUoZXZlbnQpO1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhc2tJbmZvKHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUsIG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50KHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldFRhc2tTdWJjb250YWluZXJWYWx1ZSh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrUGluID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVBbmltYXRpb25zKHRhc2tJbmRleCwgXCJFbmFibGVcIik7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnRvZ2dsZVRhc2tQaW4odGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuY2hhbmdlUGluQnV0dG9uSW1hZ2UodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uKHRhc2tJbmRleCk7XG4gICAgICAgIHRvZG9MaXN0U3RvcmFnZS50b2dnbGVUYXNrUGlubmVkKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlVGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC50b2dnbGVUYXNrQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgIHRvZG9MaXN0U3RvcmFnZS50b2dnbGVUYXNrQ29tcGxldGVkKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdC5yZW1vdmVUYXNrRnJvbVRhYih0YXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSh0YXNrSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UucmVtb3ZlVGFzayh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2tMaXN0ZW5lcnMgPSAobmV3VGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYXNrTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tQaW5MaXN0ZW5lcihuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJJbmRleCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdDaGVja2xpc3RUYXNrVG9ET00odGFza0luZGV4LCBuZXdDaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgaWYgKCF0b2RvTGlzdFN0b3JhZ2UuaXNMb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5hZGRDaGVja2xpc3RUYXNrKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgsIG5ld0NoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQoZXZlbnQsIFwiQ2hlY2tsaXN0IFRhc2tcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdEZXNjcmlwdGlvblZhbHVlID0gaGVscGVyRnVuY3Rpb25zLmdldE5ld1ZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgsIG5ld0Rlc2NyaXB0aW9uVmFsdWUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbih0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZWQodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZUNoZWNrbGlzdFRhc2tGcm9tVGFzayh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UucmVtb3ZlQ2hlY2tsaXN0VGFzayh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyA9IChuZXdDaGVja2xpc3RUYXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy50cnlpbmdUb0RvdWJsZUNsaWNrKHRhc2tJbmRleCkpIHtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZUFuaW1hdGlvbnModGFza0luZGV4LCBcIkRpc2FibGVcIik7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVEaXNwbGF5VGFza0RldGFpbHModGFza0luZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnJvdGF0ZUNoZXZyb25CdXR0b24odGFza0luZGV4KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJbkluc3RydWN0aW9uc1BhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkluZGV4ID0gYWRkVGFiKGV2ZW50LCBcIkluc3RydWN0aW9uc1wiKTtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gYWRkVGFzayhcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICBcIlF1aWNrIFRpcHMhIENsaWNrIHRoZSBwaW4gYnV0dG9uIHRvIHBpbiBhIHRhc2sgdG8gdGhlIHRvcCBvZiB0aGUgbGlzdC5cIixcbiAgICAgICAgICAgIFwiVG9tb3Jyb3csIG5leHQgd2Vlaywgb3Igd2hlbmV2ZXIgeW91ciB0YXNrIGlzIGR1ZSwgeW91IGNhbiBhZGQgaXQgaGVyZSEgQ2xpY2sgdGhlIGFycm93IGJ1dHRvbiB0byB0b2dnbGUgYmV0d2VlbiBzaG93aW5nIGFuZCBoaWRpbmcgdGFzayBkZXRhaWxzLlwiLFxuICAgICAgICAgICAgXCJBZGQgYSBkZXNjcmlwdGlvbiBvZiB5b3VyIHRhc2sgaGVyZSEgQ2xpY2sgdGhlIHBlbmNpbCBidXR0b25zIHRvIGVkaXQgdGhlIHZhcmlvdXMgcGFydHMgb2YgeW91ciB0YXNrLlwiLFxuICAgICAgICAgICAgXCJKb3QgZG93biBzb21lIG5vdGVzIGhlcmUhIE1hcmsgeW91ciB0YXNrIGFzIGNvbXBsZXRlIHdoZW4geW91J3JlIGRvbmUsIG9yIHJlbW92ZSBpdCBmcm9tIHRoZSBsaXN0IGJ5IGNsaWNraW5nIHRoZSBYIGJ1dHRvbi5cIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmNoYW5nZVBpbkJ1dHRvbkltYWdlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbih0YXNrSW5kZXgpO1xuICAgICAgICBhZGRMb2FkZWRJbkNoZWNrbGlzdFRhc2soXG4gICAgICAgICAgICB0YWJJbmRleCxcbiAgICAgICAgICAgIHRhc2tJbmRleCxcbiAgICAgICAgICAgIFwiSWYgeW91ciB0YXNrIGhhcyBtdWx0aXBsZSBzdGVwcywgdHJ5IGJyZWFraW5nIHRoZW0gZG93biBpbnRvIGEgY2hlY2tsaXN0ISBDbGljayB0aGUgcGx1cyBzaWduIGJ1dHRvbiB0byBhZGQgc3RlcHMgYXMgbmVlZGVkLlwiLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgYWRkTG9hZGVkSW5DaGVja2xpc3RUYXNrKFxuICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICB0YXNrSW5kZXgsXG4gICAgICAgICAgICBcIkhhdmUgYSBuZXcgdGFzayB5b3Ugd2FudCB0byBrZWVwIHRyYWNrIG9mPyBBZGQgaXQgdG8gdGhlIGxpc3QgYnkgY2xpY2tpbmcgb24gdGhlICdOZXcgVGFzaycgYnV0dG9uIGJlbG93IVwiLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgYWRkTG9hZGVkSW5DaGVja2xpc3RUYXNrKHRhYkluZGV4LFxuICAgICAgICAgICAgdGFza0luZGV4LFxuICAgICAgICAgICAgXCJPcmdhbml6ZSB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIHRhc2tzIGluIHlvdXIgbGlmZSBieSBjcmVhdGluZyB0aGVtZWQgdGFicy4gQ3JlYXRlIGEgbmV3IHRhYiBieSBjbGlja2luZyBvbiB0aGUgcGx1cyBzaWduIGJ1dHRvbiBhdCB0aGUgdG9wIG9mIHRoZSBsaXN0LiBDaGFuZ2UgdGFicyBieSBjbGlja2luZyBvbiBkaWZmZXJlbnQgdGFiIG5hbWVzLlwiLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZExvYWRlZEluQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBkZXNjcmlwdGlvbiwgY29tcGxldGVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sodGFiSW5kZXgsIHRhc2tJbmRleCwgZGVzY3JpcHRpb24sIGNvbXBsZXRlZCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyhjaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGlmICghdG9kb0xpc3RTdG9yYWdlLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2UuYWRkQ2hlY2tsaXN0VGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5Mb2NhbFN0b3JhZ2UgPSAoKSA9PiB7XG4gICAgICAgIHRvZG9MaXN0U3RvcmFnZS50b2dnbGVMb2FkaW5nKCk7XG4gICAgICAgIGxvYWRJbkN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBsb2FkSW5UYWJPYmplY3RzKClcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZUxvYWRpbmcoKTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJbkN1cnJlbnRUYWJJbmRleCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9kb0xpc3RTdG9yYWdlLmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgoY3VycmVudFRhYkluZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJblRhYk9iamVjdHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdHMgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0VGFiT2JqZWN0cygpO1xuICAgICAgICBmb3IgKGNvbnN0IHRhYktleSBpbiB0YWJPYmplY3RzKSB7XG4gICAgICAgICAgICBpZiAodGFiT2JqZWN0c1t0YWJLZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdG9Eb0xpc3QuYWRkVGFzayh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJUaXRsZSA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYWJUaXRsZSh0YWJLZXkpXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiSW5kZXggPSBhZGRUYWIoZXZlbnQsIHRhYlRpdGxlKVxuICAgICAgICAgICAgICAgIGxvYWRJblRhc2tPYmplY3RzKHRhYkluZGV4LCB0YWJLZXkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkQ3VycmVudFRhYkluZGljYXRvcigpXG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5UYXNrT2JqZWN0cyA9ICh0YWJJbmRleCwgdGFiS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJPYmplY3QodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0cyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYXNrT2JqZWN0cyh0YWJJbmRleCk7XG4gICAgICAgIGZvciAoY29uc3QgdGFza0tleSBpbiB0YXNrT2JqZWN0cykge1xuICAgICAgICAgICAgaWYgKHRhc2tPYmplY3RzW3Rhc2tLZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGFiT2JqZWN0LmFkZFRhc2sodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza1ZhbHVlcyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYXNrVmFsdWVzKHRhYktleSwgdGFza0tleSlcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSB0YXNrVmFsdWVzWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gdGFza1ZhbHVlc1sxXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSB0YXNrVmFsdWVzWzJdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tOb3RlcyA9IHRhc2tWYWx1ZXNbM107XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza1Bpbm5lZCA9IHRhc2tWYWx1ZXNbNF07XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlZCA9IHRhc2tWYWx1ZXNbNV07XG4gICAgICAgICAgICAgICAgbGV0IHRhc2tJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tJbmRleCA9IGFkZFRhc2soXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1RpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0R1ZURhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrRGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrTm90ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrUGlubmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbXBsZXRlZFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVUYXNrRE9NQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuY2hhbmdlUGluQnV0dG9uSW1hZ2UodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uKHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFza1RvVGFiKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrRHVlRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tOb3RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tQaW5uZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29tcGxldGVkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvYWRJbkNoZWNrbGlzdFRhc2tPYmplY3RzKHRhYkluZGV4LCB0YWJLZXksIHRhc2tJbmRleCwgdGFza0tleSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluQ2hlY2tsaXN0VGFza09iamVjdHMgPSAodGFiSW5kZXgsIHRhYktleSwgdGFza0luZGV4LCB0YXNrS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdHMgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0Q2hlY2tsaXN0VGFza09iamVjdHModGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tsaXN0VGFza0tleSBpbiBjaGVja2xpc3RUYXNrT2JqZWN0cykge1xuICAgICAgICAgICAgaWYgKGNoZWNrbGlzdFRhc2tPYmplY3RzW2NoZWNrbGlzdFRhc2tLZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGFza09iamVjdC5hZGRUYXNrKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tWYWx1ZXMgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0Q2hlY2tsaXN0VGFza1ZhbHVlcyh0YWJLZXksIHRhc2tLZXksIGNoZWNrbGlzdFRhc2tLZXkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tWYWx1ZXNbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0NvbXBsZXRlZCA9IGNoZWNrbGlzdFRhc2tWYWx1ZXNbMV07XG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tJbmRleCA9IGFkZExvYWRlZEluQ2hlY2tsaXN0VGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24sIGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tsaXN0VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24sIGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluSW5pdGlhbExpc3RlbmVycyA9ICgpID0+IHtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGROZXdUYWJMaXN0ZW5lcigpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZE5ld1Rhc2tMaXN0ZW5lcigpO1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluUGFnZSA9ICgpID0+IHtcbiAgICAgICAgbG9hZEluSW5pdGlhbExpc3RlbmVycygpO1xuICAgICAgICBpZiAodG9kb0xpc3RTdG9yYWdlLmNoZWNrRm9yRXhpc3RpbmdTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgIGxvYWRJbkxvY2FsU3RvcmFnZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLmluaXRpYWxpemVUb2RvTGlzdCgpOztcbiAgICAgICAgICAgIGxvYWRJbkluc3RydWN0aW9uc1BhZ2UoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFRhYixcbiAgICAgICAgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LFxuICAgICAgICB1cGRhdGVUYWIsXG4gICAgICAgIHN3aXRjaFRhYixcbiAgICAgICAgcmVtb3ZlVGFiLFxuICAgICAgICBhZGRUYWJMaXN0ZW5lcnMsXG4gICAgICAgIGFkZFRhc2ssXG4gICAgICAgIGluc2VydFRhc2tJbnB1dEVsZW1lbnQsXG4gICAgICAgIHVwZGF0ZVRhc2ssXG4gICAgICAgIHRvZ2dsZVRhc2tQaW4sXG4gICAgICAgIHRvZ2dsZVRhc2tDb21wbGV0ZSxcbiAgICAgICAgcmVtb3ZlVGFzayxcbiAgICAgICAgYWRkVGFza0xpc3RlbmVycyxcbiAgICAgICAgYWRkTmV3Q2hlY2tsaXN0VGFzayxcbiAgICAgICAgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgdXBkYXRlQ2hlY2tsaXN0VGFzayxcbiAgICAgICAgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlLFxuICAgICAgICByZW1vdmVDaGVja2xpc3RUYXNrLFxuICAgICAgICBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzLFxuICAgICAgICB0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMsXG4gICAgICAgIGxvYWRJbkluc3RydWN0aW9uc1BhZ2UsXG4gICAgICAgIGxvYWRJbkxvY2FsU3RvcmFnZSxcbiAgICAgICAgbG9hZEluVGFiT2JqZWN0cyxcbiAgICAgICAgbG9hZEluSW5pdGlhbExpc3RlbmVycyxcbiAgICAgICAgbG9hZEluUGFnZSxcbiAgICB9O1xufSkoKTtcblxuZXhwb3J0IHsgZXZlbnRCdW5kbGVyIH07IiwiaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuXG5ldmVudEJ1bmRsZXIubG9hZEluUGFnZSgpOyJdLCJuYW1lcyI6WyJldmVudEFzc2lnbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50QnVuZGxlciIsImFkZFRhYiIsInNjb3BlIiwidGFiRWRpdEJ1dHRvbnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwiaW5zZXJ0VGFiSW5wdXRFbGVtZW50IiwiaW5wdXRFbGVtZW50IiwidXBkYXRlVGFiIiwidGFiUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhYiIsInRhYlN3aXRjaEJ1dHRvbnMiLCJzd2l0Y2hUYWIiLCJhZGRUYXNrIiwidGFza0VkaXRCdXR0b25zIiwiaW5zZXJ0VGFza0lucHV0RWxlbWVudCIsInVwZGF0ZVRhc2siLCJ0YXNrUGluQnV0dG9ucyIsInRvZ2dsZVRhc2tQaW4iLCJ0YXNrQ29tcGxldGVDaGVja2JveGVzIiwiY2hlY2tib3giLCJ0b2dnbGVUYXNrQ29tcGxldGUiLCJ0YXNrUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhc2siLCJuZXdDaGVja2xpc3RUYXNrQnV0dG9ucyIsImFkZE5ld0NoZWNrbGlzdFRhc2siLCJjaGVja2xpc3RFZGl0QnV0dG9ucyIsImluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQiLCJ1cGRhdGVDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzIiwidG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlIiwiY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMiLCJyZW1vdmVDaGVja2xpc3RUYXNrIiwidGFza1RvZ2dsZURpc3BsYXlCdXR0b25zIiwidG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzIiwiY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQiLCJvYmplY3QiLCJjaGVja2xpc3QiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXNrIiwicHVzaCIsImxlbmd0aCIsImluZGV4IiwidW5kZWZpbmVkIiwiZ2V0Q2hlY2tsaXN0VGFza3MiLCJnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2siLCJ0b0RvTGlzdCIsImN1cnJlbnRUYWIiLCJnZXRDdXJyZW50VGFiSW5kZXgiLCJzZXRDdXJyZW50VGFiSW5kZXgiLCJuZXdDdXJyZW50VGFiIiwiTnVtYmVyIiwiZ2V0Q3VycmVudFRhYk9iamVjdCIsImN1cnJlbnRUYWJJbmRleCIsInRpdGxlQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsVGl0bGUiLCJ0aXRsZSIsImdldFRhc2tUaXRsZSIsInNldFRhc2tUaXRsZSIsIm5ld1RpdGxlIiwiZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiZ2V0VGFza0Rlc2NyaXB0aW9uIiwic2V0VGFza0Rlc2NyaXB0aW9uIiwibmV3RGVzY3JpcHRpb24iLCJjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxDb21wbGV0ZWRTdGF0ZSIsImNvbXBsZXRlZCIsInRvZ2dsZUNvbXBsZXRlZFN0YXRlIiwiZ2V0Q29tcGxldGVkU3RhdGUiLCJvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCIsInRhYk5hbWUiLCJuZXdUYWIiLCJ0b0RvVGFiIiwidGFiSW5kZXgiLCJuZXdUYWJOYW1lIiwidGFiQXJyYXkiLCJmaXJzdFRhYiIsInRhYiIsImR1ZURhdGUiLCJub3RlcyIsInBpbm5lZCIsInRhYk9iamVjdCIsIm5ld1Rhc2siLCJpbml0aWFsRHVlRGF0ZSIsImdldFRhc2tEdWVEYXRlIiwic2V0VGFza0R1ZURhdGUiLCJuZXdEdWVEYXRlIiwiZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IiwiaW5pdGlhbE5vdGVzIiwiZ2V0VGFza05vdGVzIiwic2V0VGFza05vdGVzIiwibmV3Tm90ZXMiLCJub3Rlc0JlaGF2aW9yQ29tcG9uZW50IiwiaW5pdGlhbFBpbm5lZFN0YXRlIiwidG9nZ2xlUGlubmVkU3RhdGUiLCJnZXRQaW5uZWRTdGF0ZSIsInBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IiwidG9Eb1Rhc2siLCJ0YXNrSW5kZXgiLCJidXR0b25UeXBlIiwibmV3VGFza1N1YmNvbnRlbnRWYWx1ZSIsInRhc2tPYmplY3QiLCJuZXdDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0VGFza09iamVjdCIsImNoZWNrbGlzdFRhc2tJbmRleCIsIm5ld0Rlc2NyaXB0aW9uVmFsdWUiLCJoZWxwZXJGdW5jdGlvbnMiLCJnZXRUYWJPYmplY3QiLCJnZXRUYXNrT2JqZWN0IiwiZ2V0VGFza0VsZW1lbnQiLCJlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCIsImV2ZW50IiwidGFiRWxlbWVudCIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJlbnN1cmVDb3JyZWN0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQiLCJ0YXNrU3ViY29udGFpbmVyRWxlbWVudCIsImNsYXNzTGlzdCIsImluY2x1ZGVzIiwiZW5zdXJlQ29ycmVjdENoZWNrbGlzdFRhc2tFbGVtZW50IiwiY2hlY2tsaXN0VGFza0VsZW1lbnQiLCJnZXRUYWJJbmRleCIsImRhdGFzZXQiLCJnZXRUYWJFbGVtZW50IiwiY2hlY2tJZldhc0N1cnJlbnRUYWIiLCJjaGVja0lmT25seU9uZVRhYiIsInRvRG9UYWJTZWN0aW9uIiwiY2hlY2tJZk5vTW9yZVRhYnMiLCJnZXRUYXNrSW5kZXgiLCJ0YXNrRWxlbWVudCIsImVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCIsImdldFRhc2tTdWJjb250YWluZXJUeXBlIiwidGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzIiwidGFza1N1YmNvbnRhaW5lclR5cGUiLCJnZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCIsImdldENoZWNrbGlzdFRhc2tJbmRleCIsImdldENoZWNrbGlzdFRhc2tPYmplY3QiLCJnZXRDaGVja2xpc3RUYXNrRWxlbWVudCIsImdldE5ld1ZhbHVlIiwidmFsdWUiLCJjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJ0cnlpbmdUb0RvdWJsZUNsaWNrIiwiRE9NQ29udHJvbGxlckFkZEVkaXQiLCJhZGROZXdUYXNrVG9ET00iLCJuZXdUYXNrT2JqZWN0IiwidG9Eb0NvbnRlbnQiLCJuZXdUYXNrRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGQiLCJuZXdUYXNrVGl0bGUiLCJuZXdUYXNrRGVzY3JpcHRpb24iLCJuZXdUYXNrRHVlRGF0ZSIsIm5ld1Rhc2tOb3RlcyIsIm5ld1Rhc2tDb21wbGV0ZUlEIiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZVRhc2tET01Db21wbGV0ZSIsImNvbXBsZXRlQ2hlY2tib3giLCJjaGVja2VkIiwicmVtb3ZlIiwiYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NIiwibmV3Q2hlY2tsaXN0VGFza0luZGV4IiwiY2hlY2tsaXN0RWxlbWVudCIsIm5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiIsIm5ld0NoZWNrbGlzdFRhc2tFbGVtZW50IiwidG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlIiwiY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveCIsImNoYW5nZVBpbkJ1dHRvbkltYWdlIiwicGluQnV0dG9uSW1hZ2UiLCJzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24iLCJ0YXNrRWxlbWVudEluZGV4IiwidGFza0NvbnRlbnRTZWN0aW9uIiwibGlzdE9mUGlubmVkVGFza0VsZW1lbnRzIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJsYXN0UGlubmVkVGFza0VsZW1lbnQiLCJwaW5uZWRUYXNrRWxlbWVudCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzIiwibGFzdFVucGlubmVkVGFza0VsZW1lbnQiLCJ1bnBpbm5lZFRhc2tFbGVtZW50IiwiYWRkTmV3VGFiVG9ET00iLCJhZGRUYWJCdXR0b24iLCJuZXdUYWJFbGVtZW50IiwibmV3VGFiT2JqZWN0VGl0bGUiLCJmaXJzdENoaWxkIiwiZm9jdXMiLCJzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSIsImluc2VydFRhYk5hbWVFbGVtZW50IiwidGFiQnV0dG9uIiwidGFiQnV0dG9uTmFtZSIsImFkZEN1cnJlbnRUYWJJbmRpY2F0b3IiLCJsb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYiIsImxpc3RPZlRhc2tzIiwiYWRkVGFza0xpc3RlbmVycyIsImxpc3RPZkNoZWNrbGlzdFRhc2tzIiwiYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyIsInRhc2tTdWJjb250YWluZXIiLCJzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUiLCJ0YXNrT2JqZWN0VmFsdWUiLCJpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQiLCJ0YXNrU3ViY29udGVudEVsZW1lbnQiLCJ0YXNrVGl0bGUiLCJ0YXNrRHVlRGF0ZSIsInRhc2tEZXNjcmlwdGlvbiIsInRhc2tOb3RlcyIsImNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiIsInNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSIsImNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiIsImluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQiLCJjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJzZXRUaW1lb3V0IiwicHJldmVudERvdWJsZUNsaWNrIiwicm90YXRlQ2hldnJvbkJ1dHRvbiIsImJ1dHRvbkltYWdlIiwiYnV0dG9uSW1hZ2VDbGFzc2VzIiwidG9nZ2xlQW5pbWF0aW9ucyIsImFjdGlvbiIsImVsZW1lbnRzVG9Ub2dnbGUiLCJET01Db250cm9sbGVyUmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZXBsYWNlQ2hpbGRyZW4iLCJvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IiwidG9kb0xpc3RTdG9yYWdlIiwibG9hZGluZ0luQ29udGVudCIsImdldExvY2FsU3RvcmFnZVZhbHVlIiwidG9kb0xpc3RKU09OU3RyaW5nIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlIiwibmV3VmFsdWUiLCJ1cGRhdGVkSlNPTlN0cmluZ1ZhbHVlIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsInRvZG9MaXN0UGFyc2VkT2JqZWN0IiwidGFiSlNPTlN0cmluZyIsInRhYlBhcnNlZE9iamVjdCIsInNldEN1cnJlbnRUYWIiLCJzZXRUYWJOYW1lIiwiZ2V0VGFiVGl0bGUiLCJ0YWJLZXkiLCJnZXRUYWJPYmplY3RzIiwidGFza0pTT05TdHJpbmciLCJ0YXNrUGFyc2VkT2JqZWN0Iiwic2V0VGFza1N1YmNvbnRhaW5lclZhbHVlIiwic3ViY29udGFpbmVyVHlwZSIsInRvZ2dsZVRhc2tQaW5uZWQiLCJ0b2dnbGVUYXNrQ29tcGxldGVkIiwiZ2V0VGFza1ZhbHVlcyIsInRhc2tLZXkiLCJ0YXNrVmFsdWVzIiwidGFza1Bpbm5lZCIsInRhc2tDb21wbGV0ZWQiLCJnZXRUYXNrT2JqZWN0cyIsImFkZENoZWNrbGlzdFRhc2siLCJjaGVja2xpc3RUYXNrSlNPTlN0cmluZyIsImNoZWNrbGlzdFRhc2tQYXJzZWRPYmplY3QiLCJzZXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24iLCJ0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVkIiwiZ2V0Q2hlY2tsaXN0VGFza1ZhbHVlcyIsImNoZWNrbGlzdFRhc2tLZXkiLCJjaGVja2xpc3RUYXNrVmFsdWVzIiwiY2hlY2tsaXN0VGFza0NvbXBsZXRlZCIsImdldENoZWNrbGlzdFRhc2tPYmplY3RzIiwiY2hlY2tGb3JFeGlzdGluZ1N0b3JhZ2UiLCJpbml0aWFsaXplVG9kb0xpc3QiLCJ0b2dnbGVMb2FkaW5nIiwiaXNMb2FkaW5nIiwibmV3VGFiSW5kZXgiLCJhZGRUYWJMaXN0ZW5lcnMiLCJmaXJzdFRhYkluZGV4IiwibG9hZEluSW5zdHJ1Y3Rpb25zUGFnZSIsIm5ld1Rhc2tJbmRleCIsImFkZExvYWRlZEluQ2hlY2tsaXN0VGFzayIsImxvYWRJbkxvY2FsU3RvcmFnZSIsImxvYWRJbkN1cnJlbnRUYWJJbmRleCIsImxvYWRJblRhYk9iamVjdHMiLCJ0YWJPYmplY3RzIiwidGFiVGl0bGUiLCJsb2FkSW5UYXNrT2JqZWN0cyIsInRhc2tPYmplY3RzIiwibG9hZEluQ2hlY2tsaXN0VGFza09iamVjdHMiLCJjaGVja2xpc3RUYXNrT2JqZWN0cyIsImxvYWRJbkluaXRpYWxMaXN0ZW5lcnMiLCJjb2RlIiwibG9hZEluUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=
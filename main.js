(()=>{"use strict";const e=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},t=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},s=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},n=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},c=(c,o,a,r)=>{let l={};return Object.assign(l,e(l,c),t(l,a),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(l,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(l,r),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(l),s(l),n(l)),l},o=e=>{let n={};return Object.assign(n,t(n,e),s(n)),n},a=t=>{let s={};return Object.assign(s,e(s,t),n(s)),s},r=(()=>{let e=0,t={getCurrentTabIndex:()=>e,setCurrentTabIndex:t=>{e=t}};return Object.assign(t,n(t)),t})(),l=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{const s=t(e).dataset.taskIndex,n=r.getCurrentTabIndex();return r.getSpecificChecklistTask(n).getSpecificChecklistTask(s)},c=e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t},o=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:t,ensureCorrectSubcontainer:s,checkForTaskSubcontainerInputElement:e=>"INPUT"===s(e).firstElementChild.tagName,getTargetTaskObject:n,ensureCorrectButtonElement:c,getButtonType:e=>{const t=c(e);return Array.from(t.classList)},getSubcontainerType:e=>{const t=s(e);return Array.from(t.classList)},ensureCorrectChecklistElement:e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist");)t=t.parentElement,s=Array.from(t.classList);return t},ensureCorrectChecklistTaskElement:o,checkForChecklistTaskInputElement:e=>null!==o(e).querySelector(".checklist-complete-section").querySelector(".checklist-input"),getTargetChecklistTaskObject:e=>{const t=n(e),s=o(e).dataset.checklistTaskIndex;return t.getSpecificChecklistTask(s)}}})(),i=()=>{const e=a("New Tab");return r.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;r.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},k=e=>{const t=l.ensureCorrectTabElement(e).dataset.tabIndex;r.setCurrentTabIndex(t)},u=()=>{const e=r.getChecklistTasks();let t;for(const s in e)if(void 0!==e[s])return r.setCurrentTabIndex(s),t=s,t},T=()=>{const e=r.getCurrentTabIndex(),t=r.getSpecificChecklistTask(e),s=c("New Task","Task Due Date","Task Description","Task Notes");return t.addTask(s)},m=e=>{const t=l.getTargetTaskObject(e),s=e.target.value,n=l.getSubcontainerType(e);return n.includes("to-do-title-section")?t.setTaskTitle(s):n.includes("to-do-due-date-section")?t.setTaskDueDate(s):n.includes("to-do-description-section")?t.setTaskDescription(s):n.includes("to-do-notes-section")?t.setTaskNotes(s):void 0},p=e=>{l.getTargetTaskObject(e).toggleCompletedState()},g=e=>{const t=l.getTargetTaskObject(e),s=o("Checklist Task Description");return t.addTask(s)},b=e=>{const t=l.getTargetChecklistTaskObject(e),s=e.target.value;t.setTaskDescription(s)},h=e=>{l.getTargetChecklistTaskObject(e).toggleCompletedState()},C=e=>{l.getTargetTaskObject(e).togglePinnedState()},E=e=>{const t=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),c=r.getSpecificChecklistTask(e).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=e,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=c,s.insertBefore(n,t),n},f=(e,t)=>{const s=l.ensureCorrectTabElement(e).dataset.tabIndex,n=r.getSpecificChecklistTask(s).getTaskTitle();t.value=n},S=e=>{const t=l.ensureCorrectTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},y=e=>{const t=l.ensureCorrectTabElement(e),s=t.dataset.tabIndex,n=r.getSpecificChecklistTask(s).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const o=document.createElement("h2");o.textContent=n,c.appendChild(o),t.insertBefore(c,t.firstChild)},v=e=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},A=e=>{l.ensureCorrectTabElement(e).setAttribute("id","current-tab"),console.log("FIRINy")},L=e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},I=e=>{const t=r.getCurrentTabIndex(),s=r.getSpecificChecklistTask(t).getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),c=document.createElement("div");c.classList.add("to-do-task"),c.dataset.taskIndex=e;const o=s.getTaskTitle(),a=s.getTaskDescription(),l=s.getTaskDueDate(),i=s.getTaskNotes();return c.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',c.querySelector(".to-do-title").textContent=o,c.querySelector(".to-do-due-date").textContent=l,c.querySelector(".to-do-description").textContent=a,c.querySelector(".to-do-notes").textContent=i,n.appendChild(c),c},x=e=>{const t=l.ensureCorrectSubcontainer(e),s=document.createElement("input");return s.classList.add("task-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},q=(e,t)=>{const s=l.getTargetTaskObject(e),n=l.getButtonType(e);let c;n.includes("edit-task-title")?c=s.getTaskTitle():n.includes("edit-task-due-date")?c=s.getTaskDueDate():n.includes("edit-task-description")?c=s.getTaskDescription():n.includes("edit-task-notes")&&(c=s.getTaskNotes()),t.value=c},D=e=>{const t=l.ensureCorrectSubcontainer(e),s=l.getTargetTaskObject(e),n=l.getSubcontainerType(e);let c;if(n.includes("to-do-title-section")){const e=s.getTaskTitle();c=document.createElement("h3"),c.classList.add("to-do-title"),c.textContent=e}else if(n.includes("to-do-due-date-section")){const e=s.getTaskDueDate();c=document.createElement("p"),c.classList.add("to-do-due-date"),c.textContent=e}else if(n.includes("to-do-description-section")){const e=s.getTaskDescription();c=document.createElement("p"),c.classList.add("to-do-description"),c.textContent=e}else if(n.includes("to-do-notes-section")){const e=s.getTaskNotes();c=document.createElement("p"),c.classList.add("to-do-notes"),c.textContent=e}t.insertBefore(c,t.firstChild)},O=e=>{const t=l.ensureCorrectTaskElement(e),s=t.querySelector(".to-do-complete-checkbox");l.getTargetTaskObject(e).getCompletedState()?(s.checked=!0,t.classList.add("task-completed")):(s.checked=!1,t.classList.remove("task-completed"))},N=(e,t)=>{const s=l.ensureCorrectChecklistElement(e),n=l.ensureCorrectTaskElement(e).dataset.taskIndex,c=l.getTargetTaskObject(e).getSpecificChecklistTask(t),o=c.getTaskDescription(),a=c.getCompletedState(),r=document.createElement("div");r.classList.add("checklist-task"),r.dataset.checklistTaskIndex=t,r.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${n}-${t}" class="checklist-complete-checkbox">\n                <label for="checklist-${n}-${t}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,r.querySelector(".checklist-task-description").textContent=o;return r.querySelector(`#checklist-${n}-${t}`).checked=!!a,s.appendChild(r),r},j=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section"),s=document.createElement("input");return s.classList.add("checklist-input"),s.setAttribute("type","text"),t.appendChild(s),s.focus(),s},w=(e,t)=>{const s=l.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex,n=l.getTargetTaskObject(e).getSpecificChecklistTask(s).getTaskDescription();t.value=n},P=e=>{const t=l.ensureCorrectChecklistTaskElement(e),s=t.dataset.checklistTaskIndex,n=t.querySelector(".checklist-complete-section"),c=l.ensureCorrectTaskElement(e).dataset.taskIndex,o=l.getTargetChecklistTaskObject(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${c}-${s}`),a.classList.add("checklist-task-description"),a.textContent=o,n.appendChild(a)},B=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),s=l.getTargetChecklistTaskObject(e);t.checked=s.getCompletedState(),s.getCompletedState()?t.classList.add("checklist-task-completed"):t.classList.remove("checklist-task-completed")},M=e=>{const t=l.getTargetTaskObject(e),s=l.ensureCorrectButtonElement(e).querySelector("img");t.getPinnedState()?s.setAttribute("src","./assets/pin-pinned.png"):s.setAttribute("src","./assets/pin-unpinned.png")},R=e=>{const t=l.getTargetTaskObject(e),s=l.ensureCorrectTaskElement(e),n=document.querySelector(".to-do-content");if(t.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));0===e.length?n.insertBefore(s,n.firstElementChild):e[e.length-1].insertAdjacentElement("afterend",s),s.classList.add("pinned-task")}else{const e=Array.from(n.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)n.appendChild(s);else{const t=e[e.length-1],c=s.dataset.taskIndex;for(const o of e){if(c<o.dataset.taskIndex){n.insertBefore(s,o);break}o===t&&n.appendChild(s,t)}}s.classList.remove("pinned-task")}},$=()=>{document.querySelector(".add-tab").addEventListener("click",pe.addTab)},H=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",pe.insertTabInputElement)},F=e=>{e.addEventListener("keydown",pe.updateTab)},G=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",pe.removeTab)},U=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",pe.switchTab)},W=()=>{document.querySelector(".new-to-do-task").addEventListener("click",pe.newTask)},z=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",pe.removeTask)},J=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",pe.insertTaskInputElement)},K=e=>{e.addEventListener("keydown",pe.updateTask)},Q=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",pe.toggleTaskComplete)},V=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",pe.addNewChecklistTask)},X=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",pe.insertChecklistTaskInputElement)},Y=e=>{e.addEventListener("keydown",pe.updateChecklistTask)},Z=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",pe.toggleChecklistTaskComplete)},_=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",pe.removeChecklistTask)},ee=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",pe.toggleTaskPin)},te=e=>{const t=l.ensureCorrectTabElement(e).dataset.tabIndex;r.removeTask(t)},se=e=>{const t=l.ensureCorrectTaskElement(e).dataset.taskIndex,s=r.getCurrentTabIndex();r.getSpecificChecklistTask(s).removeTask(t)},ne=e=>{const t=l.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex;l.getTargetTaskObject(e).removeTask(t)},ce=e=>{const t=l.ensureCorrectTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},oe=e=>{const t=l.ensureCorrectTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},ae=e=>{let t=l.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},re=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},le=e=>{let t=l.ensureCorrectTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},ie=e=>{const t=l.ensureCorrectSubcontainer(e);let s=t.firstElementChild;t.removeChild(s),s=null},de=e=>{const t=l.ensureCorrectSubcontainer(e);let s=t.querySelector("input");t.removeChild(s),s=null},ke=e=>{const t=l.ensureCorrectButtonElement(e).previousElementSibling;let s=t.querySelector("label");t.removeChild(s),s=null},ue=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section");let s=t.querySelector(".checklist-input");t.removeChild(s),s=null},Te=e=>{let t=l.ensureCorrectChecklistTaskElement(e);l.ensureCorrectChecklistElement(e).removeChild(t),t=null},me=()=>{document.querySelector(".to-do-content").replaceChildren()},pe={addTab:()=>{const e=i(),t=E(e);if(H(t),G(t),U(t),l.checkIfOnlyOneTab()){const e=u();L(e)}},insertTabInputElement:e=>{if(!l.checkForTabInputElement(e)){const t=S(e);ce(e),f(e,t),F(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),y(e),oe(e))},removeTab:e=>{if(te(e),ae(e),l.checkIfWasCurrentTab(e)){const e=u();L(e)}},switchTab:e=>{l.checkIfWasCurrentTab(e)||(k(e),re(),A(e),me())},newTask:()=>{const e=T(),t=I(e);z(t),J(t),Q(t),V(t),ee(t)},removeTask:e=>{se(e),le(e)},insertTaskInputElement:e=>{if(!l.checkForTaskSubcontainerInputElement(e)){ie(e);const t=x(e);q(e,t),K(t)}},updateTask:e=>{"Enter"===e.code&&(m(e),D(e),de(e))},toggleTaskComplete:e=>{p(e),O(e)},addNewChecklistTask:e=>{const t=g(e),s=N(e,t);X(s),Z(s),_(s)},insertChecklistTaskInputElement:e=>{if(!l.checkForChecklistTaskInputElement(e)){ke(e);const t=j(e);w(e,t),Y(t)}},updateChecklistTask:e=>{"Enter"===e.code&&(b(e),P(e),ue(e))},toggleChecklistTaskComplete:e=>{h(e),B(e)},removeChecklistTask:e=>{ne(e),Te(e)},toggleTaskPin:e=>{C(e),M(e),R(e)}};let ge=a("Default test");r.addTask(ge);let be=c("Make Money TEST 0","Task Due Date","Task Description","Task Notes");console.log(ge.addTask(be));let he=c("Make Money TEST AGAIN 1","Task Due Date","Task Description","Task Notes");ge.addTask(he);let Ce=c("Make Money TEST AGAIN AGAIN 2","Task Due Date","Task Description","Task Notes");ge.addTask(Ce);let Ee=c("Make Money TEST AGAIN AGAIN AGAIN 3","Task Due Date","Task Description","Task Notes");ge.addTask(Ee),$(),H(),G(),console.log(r),console.log(r.getChecklistTasks()),console.log(r.getCurrentTabIndex()),console.log(ge.getChecklistTasks()),console.log(ge.getSpecificChecklistTask(0)),console.log(ge.getSpecificChecklistTask(0).getTaskTitle()),v(0),U(),W(),z(),J(),Q(),V(),X();let fe=o("Checklist Task Description TEST");be.addTask(fe),Z(),_(),ee()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUk3RSxFQUFTRSxzQkFDckIwRSxRQUFRQyxJQUFJeUUsR0FBSzNLLHFCQUNqQmlHLFFBQVFDLElBQUl5RSxHQUFLMUsseUJBQXlCLElBQzFDZ0csUUFBUUMsSUFBSXlFLEdBQUsxSyx5QkFBeUIsR0FBR3ZCLGdCQUU3Q3NHLEVBQTZDLEdBRTdDbUQsSUFFQUEsSUFFQUEsSUFFQUEsSUFTQUEsSUFDQUEsSUFDQUEsSUFFQSxJQUFJNkMsR0FBaUI3SixFQUFvQixtQ0FDekN5SixHQUFNbkwsUUFBUXVMLElBRWQ3QyxJQUNBQSxJQUVBQSxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy90aXRsZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb190YXNrX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9jaGVja2xpc3RfdGFza19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX3RhYl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX2xpc3Rfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvaGVscGVyX2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvZXZlbnRfYXNzaWduZXJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL0RPTV9jb250cm9sbGVyX3JlbW92ZS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2V2ZW50X2J1bmRsZXJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsVGl0bGUpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBpbml0aWFsVGl0bGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tUaXRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza1RpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbERlc2NyaXB0aW9uKSA9PiB7XG4gICAgbGV0IGRlc2NyaXB0aW9uID0gaW5pdGlhbERlc2NyaXB0aW9uO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrRGVzY3JpcHRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tEZXNjcmlwdGlvbihuZXdEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IiwiLy8gb3JpZ2luYWwgd2hlcmUgYWxsIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgZ2V0IHJldHVybmVkLCBzbyBubyBwcml2YXRlIGZpZWxkcyAoY29tcGxldGVkIHNob3VsZCBiZSBwcml2YXRlKVxuLy8ga2VlcGluZyBmb3IgcG9zdGVyaXR5LCBwcm9iYWJseSB3aWxsIGRlbGV0ZWQgYXQgdGhlIGVuZFxuLy8gY29uc3QgY2FuQ29tcGxldGUgPSAob2JqZWN0KSA9PiAoe1xuLy8gICAgIGNvbXBsZXRlZDogZmFsc2UsXG4vLyAgICAgdG9nZ2xlOiAoKSA9PiB7XG4vLyAgICAgICAgIGlmIChvYmplY3QuY29tcGxldGVkKSB7XG4vLyAgICAgICAgICAgICBvYmplY3QuY29tcGxldGVkID0gZmFsc2U7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBvYmplY3QuY29tcGxldGVkID0gdHJ1ZTtcbi8vICAgICAgICAgfTtcbi8vICAgICB9LFxuLy8gICAgIGdldENvbXBsZXRlZFN0YXRlOiAoKSA9PiB7XG4vLyAgICAgICAgIHJldHVybiBvYmplY3QuY29tcGxldGVkXG4vLyAgICAgfVxuLy8gfSk7XG5cbmNvbnN0IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgdG9nZ2xlQ29tcGxldGVkU3RhdGUoKSB7XG4gICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRDb21wbGV0ZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQ7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH07IiwiY29uc3QgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0KSA9PiB7XG4gICAgbGV0IGNoZWNrbGlzdCA9IFtdO1xuICAgIGNvbnN0IGdldFRhc2tJbmRleCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdC5sZW5ndGggLSAxO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGFkZFRhc2sodGFzaykge1xuICAgICAgICAgICAgY2hlY2tsaXN0LnB1c2godGFzayk7XG4gICAgICAgICAgICAvLyByZXR1cm4gY2hlY2tsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VGFza0luZGV4KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVRhc2soaW5kZXgpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFtpbmRleF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldENoZWNrbGlzdFRhc2tzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrbGlzdDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tsaXN0W2luZGV4XTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfTsiLCJpbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcblxuY29uc3QgdG9Eb1Rhc2sgPSAodGl0bGUsIGR1ZURhdGUsIGRlc2NyaXB0aW9uLCBub3RlcykgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgdGl0bGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIHRpdGxlKSwgXG4gICAgICAgIGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkZXNjcmlwdGlvbiksXG4gICAgICAgIGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGR1ZURhdGUpLFxuICAgICAgICBub3Rlc0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgbm90ZXMpLFxuICAgICAgICAvLyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgICAgIHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgICAgIGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgICAgIGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdClcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5leHBvcnQgeyB0b0RvVGFzayB9OyIsImNvbnN0IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxEdWVEYXRlKSA9PiB7XG4gICAgbGV0IGR1ZURhdGUgPSBpbml0aWFsRHVlRGF0ZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza0R1ZURhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZHVlRGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza0R1ZURhdGUobmV3RHVlRGF0ZSkge1xuICAgICAgICAgICAgZHVlRGF0ZSA9IG5ld0R1ZURhdGU7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IiwiY29uc3Qgbm90ZXNCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxOb3RlcykgPT4ge1xuICAgIGxldCBub3RlcyA9IGluaXRpYWxOb3RlcztcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza05vdGVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vdGVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrTm90ZXMobmV3Tm90ZXMpIHtcbiAgICAgICAgICAgIG5vdGVzID0gbmV3Tm90ZXM7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBwaW5uZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgdG9nZ2xlUGlubmVkU3RhdGUoKSB7XG4gICAgICAgICAgICBpZiAocGlubmVkKSB7XG4gICAgICAgICAgICAgICAgcGlubmVkID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBpbm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRQaW5uZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBwaW5uZWQ7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH07IiwiaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5cbi8vIG9yaWdpbmFsIHdoZXJlIG9iamVjdCB3b3VsZCBuZWVkIHRvIGhhdmUgT2JqZWN0LmFzc2lnbigpIGZvciBldmVyeSBpbnN0YW5jZVxuLy8ga2VlcGluZyBmb3IgcG9zdGVyaXR5LCBwcm9iYWJseSB3aWxsIGRlbGV0ZWQgYXQgdGhlIGVuZFxuLy8gY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IChkZXNjcmlwdGlvbikgPT4ge1xuICAgIC8vIGNvbnN0IGdldFRhc2tEZXNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICAvLyAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICAgIC8vIH07XG4gICAgLy8gY29uc3Qgc2V0VGFza0Rlc2NyaXB0aW9uID0gKG5ld0Rlc2NyaXB0aW9uKSA9PiB7XG4gICAgLy8gICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgLy8gfTtcbi8vICAgICByZXR1cm4geyBnZXRUYXNrRGVzY3JpcHRpb24sIHNldFRhc2tEZXNjcmlwdGlvbiB9O1xuLy8gfTtcblxuY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IChkZXNjcmlwdGlvbikgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IHsgY2hlY2tsaXN0VGFza09iamVjdCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFiID0gKHRpdGxlKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1RhYiB9OyIsIi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvTGlzdCA9ICgoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRUYWIgPSAwO1xuICAgIGNvbnN0IGdldEN1cnJlbnRUYWJJbmRleCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWI7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDdXJyZW50VGFiSW5kZXggPSAobmV3Q3VycmVudFRhYikgPT4ge1xuICAgICAgICBjdXJyZW50VGFiID0gbmV3Q3VycmVudFRhYjtcbiAgICB9O1xuICAgIGxldCBvYmplY3QgPSB7XG4gICAgICAgIGdldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgc2V0Q3VycmVudFRhYkluZGV4XG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59KSgpO1xuXG5leHBvcnQgeyB0b0RvTGlzdCB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuXG5jb25zdCBoZWxwZXJGdW5jdGlvbnMgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YWJFbGVtZW50ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlICh0YWJFbGVtZW50LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpICE9PSBcInRhYi10aXRsZVwiKSB7XG4gICAgICAgICAgICB0YWJFbGVtZW50ID0gdGFiRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrRm9yVGFiSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGlmICh0YWJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0lmV2FzQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBpZiAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gXCJjdXJyZW50LXRhYlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZPbmx5T25lVGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJzID0gQXJyYXkuZnJvbSh0b0RvVGFiU2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi10aXRsZVwiKSk7XG4gICAgICAgIGlmICh0b0RvVGFicy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2tcIikpIHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50ID0gdGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKHRhc2tTdWJjb250YWluZXIuY2xhc3NMaXN0KVxuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2stc3ViY29udGFpbmVyXCIpKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyID0gdGFza1N1YmNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyLmNsYXNzTGlzdClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFza1N1YmNvbnRhaW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrRm9yVGFza1N1YmNvbnRhaW5lcklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGlmICh0YXNrU3ViY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXJnZXRUYXNrT2JqZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgYnV0dG9uRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgd2hpbGUgKGJ1dHRvbkVsZW1lbnQudGFnTmFtZSAhPT0gXCJCVVRUT05cIikge1xuICAgICAgICAgICAgYnV0dG9uRWxlbWVudCA9IGJ1dHRvbkVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBnZXRCdXR0b25UeXBlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNsYXNzZXMgPSBBcnJheS5mcm9tKGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkNsYXNzZXM7XG4gICAgfTtcbiAgICBjb25zdCBnZXRTdWJjb250YWluZXJUeXBlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgY29uc3Qgc3ViY29udGFpbmVyQ2xhc3NlcyA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lci5jbGFzc0xpc3QpO1xuICAgICAgICByZXR1cm4gc3ViY29udGFpbmVyQ2xhc3NlcztcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBjaGVja2xpc3RFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwiY2hlY2tsaXN0XCIpKSB7XG4gICAgICAgICAgICBjaGVja2xpc3RFbGVtZW50ID0gY2hlY2tsaXN0RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdENoZWNrbGlzdFRhc2tFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgbGV0IGNsYXNzTGlzdCA9IEFycmF5LmZyb20oY2hlY2tsaXN0VGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgd2hpbGUgKCFjbGFzc0xpc3QuaW5jbHVkZXMoXCJjaGVja2xpc3QtdGFza1wiKSkge1xuICAgICAgICAgICAgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBjaGVja2xpc3RUYXNrRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RUYXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGNoZWNrRm9yQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBnZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBjaGVja2xpc3RUYXNrRWxlbWVudC5kYXRhc2V0LmNoZWNrbGlzdFRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrT2JqZWN0O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQsIGNoZWNrRm9yVGFiSW5wdXRFbGVtZW50LCBjaGVja0lmV2FzQ3VycmVudFRhYixcbiAgICAgICAgY2hlY2tJZk9ubHlPbmVUYWIsIGVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCwgZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcixcbiAgICAgICAgY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50LCBnZXRUYXJnZXRUYXNrT2JqZWN0LCBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudCxcbiAgICAgICAgZ2V0QnV0dG9uVHlwZSwgZ2V0U3ViY29udGFpbmVyVHlwZSwgZW5zdXJlQ29ycmVjdENoZWNrbGlzdEVsZW1lbnQsIGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCwgY2hlY2tGb3JDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LCBnZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0LCB9O1xufSkoKTtcblxuZXhwb3J0IHsgaGVscGVyRnVuY3Rpb25zIH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgdG9Eb1Rhc2sgfSBmcm9tIFwiLi90b2RvX3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0X3Rhc2tfb2JqZWN0XCI7XG5cbmNvbnN0IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0ID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJUb1RvZG9BcnJheSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiID0gdG9Eb1RhYihcIk5ldyBUYWJcIik7XG4gICAgICAgIHJldHVybiB0b0RvTGlzdC5hZGRUYXNrKG5ld1RhYik7XG4gICAgfVxuICAgIGNvbnN0IGVkaXRUYWJOYW1lID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC50YWJJbmRleDtcbiAgICAgICAgY29uc3QgdGFyZ2V0VGFiID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgdGFyZ2V0VGFiLnNldFRhc2tUaXRsZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVDdXJyZW50VGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0N1cnJlbnRUYWIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG5ld0N1cnJlbnRUYWIuZGF0YXNldC50YWJJbmRleDtcbiAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KGluZGV4KVxuICAgIH1cbiAgICBjb25zdCBzZXRGaXJzdFRhYlRvQ3VycmVudFRhYiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiQXJyYXkgPSB0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpO1xuICAgICAgICBsZXQgZmlyc3RUYWIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgdGFiIGluIHRhYkFycmF5KSB7XG4gICAgICAgICAgICBpZiAodGFiQXJyYXlbdGFiXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KHRhYik7XG4gICAgICAgICAgICAgICAgZmlyc3RUYWIgPSB0YWI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0VGFiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdUYXNrVG9UYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJJbmRleCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGN1cnJlbnRUYWJJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB0b0RvVGFzayhcIk5ldyBUYXNrXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuICAgICAgICBjb25zdCBuZXdUYXNrSW5kZXggPSBjdXJyZW50VGFiLmFkZFRhc2sobmV3VGFzayk7XG4gICAgICAgIHJldHVybiBuZXdUYXNrSW5kZXg7XG4gICAgfTtcbiAgICBjb25zdCBlZGl0VGFza09iamVjdEluZm8gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3VGFza1RpdGxlVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJUeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldFN1YmNvbnRhaW5lclR5cGUoZXZlbnQpO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lclR5cGUuaW5jbHVkZXMoXCJ0by1kby10aXRsZS1zZWN0aW9uXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFza09iamVjdC5zZXRUYXNrVGl0bGUobmV3VGFza1RpdGxlVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Quc2V0VGFza0R1ZURhdGUobmV3VGFza1RpdGxlVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Quc2V0VGFza0Rlc2NyaXB0aW9uKG5ld1Rhc2tUaXRsZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLW5vdGVzLXNlY3Rpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrT2JqZWN0LnNldFRhc2tOb3RlcyhuZXdUYXNrVGl0bGVWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgdGFza09iamVjdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrID0gY2hlY2tsaXN0VGFza09iamVjdChcIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrSW5kZXggPSB0YXNrT2JqZWN0LmFkZFRhc2sobmV3Q2hlY2tsaXN0VGFzayk7XG4gICAgICAgIHJldHVybiBuZXdDaGVja2xpc3RUYXNrSW5kZXhcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICBjaGVja2xpc3RUYXNrT2JqZWN0LnNldFRhc2tEZXNjcmlwdGlvbihuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24pO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFyZ2V0Q2hlY2tsaXN0VGFza09iamVjdChldmVudCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW4gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgdGFza09iamVjdC50b2dnbGVQaW5uZWRTdGF0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgYWRkTmV3VGFiVG9Ub2RvQXJyYXksIGVkaXRUYWJOYW1lLCB1cGRhdGVDdXJyZW50VGFiLCBzZXRGaXJzdFRhYlRvQ3VycmVudFRhYixcbiAgICAgICAgYWRkTmV3VGFza1RvVGFiLCBlZGl0VGFza09iamVjdEluZm8sIHRvZ2dsZVRhc2tDb21wbGV0ZSwgYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayxcbiAgICAgICAgZWRpdENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiwgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlLCB0b2dnbGVUYXNrUGluLCB9O1xufSkoKTtcblxuZXhwb3J0IHsgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlckFkZEVkaXQgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYlRvRE9NID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZFRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBuZXdUYWJOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29uc3QgbmV3VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgbmV3VGFiT2JqZWN0VGl0bGUgPSBuZXdUYWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIG5ld1RhYk5vZGUuY2xhc3NMaXN0LmFkZChcInRhYi10aXRsZVwiKTtcbiAgICAgICAgbmV3VGFiTm9kZS5kYXRhc2V0LnRhYkluZGV4ID0gaW5kZXg7XG4gICAgICAgIG5ld1RhYk5vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN3aXRjaC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ0YWItbmFtZVwiPlRBQiBOQU1FIFBMQUNFSE9MREVSPC9oMj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFiXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFiIG5hbWUgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJyZW1vdmUtdGFiXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2xvc2UucG5nXCIgYWx0PVwiUmVtb3ZlIHRhYiBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBgO1xuICAgICAgICBjb25zdCB0YWJOYW1lRE9NID0gbmV3VGFiTm9kZS5xdWVyeVNlbGVjdG9yKFwiLnRhYi1uYW1lXCIpO1xuICAgICAgICB0YWJOYW1lRE9NLnRleHRDb250ZW50ID0gbmV3VGFiT2JqZWN0VGl0bGU7XG4gICAgICAgIHRvRG9UYWJTZWN0aW9uLmluc2VydEJlZm9yZShuZXdUYWJOb2RlLCBhZGRUYWJCdXR0b24pO1xuICAgICAgICByZXR1cm4gbmV3VGFiTm9kZTtcbiAgICB9XG4gICAgY29uc3Qgc2V0VGFiSW5wdXRFbGVtZW50VmFsdWUgPSAoZXZlbnQsIGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHRhYk5hbWU7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYi1uYW1lLWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKGlucHV0RWxlbWVudCwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYk5hbWVFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRhYkVsZW1lbnQuZGF0YXNldC50YWJJbmRleDtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgdGFiTmFtZSA9IHRhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgdGFiQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJzd2l0Y2gtdGFiXCIpO1xuICAgICAgICBjb25zdCB0YWJCdXR0b25OYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICAgICAgICB0YWJCdXR0b25OYW1lLnRleHRDb250ZW50ID0gdGFiTmFtZTtcbiAgICAgICAgdGFiQnV0dG9uLmFwcGVuZENoaWxkKHRhYkJ1dHRvbk5hbWUpO1xuICAgICAgICB0YWJFbGVtZW50Lmluc2VydEJlZm9yZSh0YWJCdXR0b24sIHRhYkVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXREZWZhdWx0Q3VycmVudFRhYkRPTSA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWIgPSB0b0RvVGFiU2VjdGlvbi5xdWVyeVNlbGVjdG9yKGBbZGF0YS10YWItaW5kZXg9JyR7aW5kZXh9J11gKTtcbiAgICAgICAgY3VycmVudFRhYi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImN1cnJlbnQtdGFiXCIpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q3VycmVudFRhYkRPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDdXJyZW50VGFiID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgbmV3Q3VycmVudFRhYi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImN1cnJlbnQtdGFiXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZJUklOeVwiKVxuICAgIH1cbiAgICBjb25zdCBzZXRGaXJzdFRhYlRvQ3VycmVudFRhYiA9IChmaXJzdFRhYkluZGV4KSA9PiB7XG4gICAgICAgIGlmIChmaXJzdFRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGZpcnN0VGFiID0gdG9Eb1RhYlNlY3Rpb24ucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFiLWluZGV4PScke2ZpcnN0VGFiSW5kZXh9J11gKVxuICAgICAgICBmaXJzdFRhYi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImN1cnJlbnQtdGFiXCIpO1xuICAgIH1cbiAgICBjb25zdCBhZGROZXdUYXNrVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgbmV3VGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgdG9Eb0NvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbmV3VGFza05vZGUuY2xhc3NMaXN0LmFkZChcInRvLWRvLXRhc2tcIik7XG4gICAgICAgIG5ld1Rhc2tOb2RlLmRhdGFzZXQudGFza0luZGV4ID0gaW5kZXg7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tUaXRsZSA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tEZXNjcmlwdGlvbiA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tEdWVEYXRlID0gbmV3VGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrTm90ZXMgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICBuZXdUYXNrTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tdGFzay1vdmVydmlld1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby10aXRsZS1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRvLWRvLXRpdGxlXCI+VElUTEUgUExBQ0VIT0xERVI8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tcGluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL3Bpbi11bnBpbm5lZC5wbmdcIiBhbHQ9XCJQaW4gdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stdGl0bGUgZWRpdC10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIHRpdGxlIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvLWRvLXJlbW92ZS10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwidG8tZG8tY29tcGxldGUtY2hlY2tib3hcIiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlLWxhYmVsXCI+Q29tcGxldGVkOjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cIlwiIGNsYXNzPVwidG8tZG8tY29tcGxldGUtY2hlY2tib3hcIiBpZD1cInRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCI+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tdGFzay1jaGFuZ2UtZGlzcGxheVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2hldnJvbi1kb3duLnBuZ1wiIGFsdD1cIkNoYW5nZSB0YXNrIGRpc3BsYXkgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1kdWUtZGF0ZS1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tZHVlLWRhdGVcIj5EVUUgREFURSBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1kdWUtZGF0ZSBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgZHVlIGRhdGUgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tZGVzY3JpcHRpb25cIj5ERVNDUklQVElPTiBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLWRlc2NyaXB0aW9uIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIGRlc2NyaXB0aW9uIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tbm90ZXMtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tbm90ZXNcIj5OT1RFUyBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLW5vdGVzIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIG5vdGVzIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGFjdGlvbj1cIlwiIGNsYXNzPVwiY2hlY2tsaXN0XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrbGlzdC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxlZ2VuZCBjbGFzcz1cImNoZWNrbGlzdC1sYWJlbFwiPkNoZWNrbGlzdDwvbGVnZW5kPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYWRkLWNoZWNrbGlzdC10YXNrXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGx1cy5wbmdcIiBhbHQ9XCJBZGQgY2hlY2tsaXN0IHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHRpdGxlRE9NID0gbmV3VGFza05vZGUucXVlcnlTZWxlY3RvcihcIi50by1kby10aXRsZVwiKTtcbiAgICAgICAgdGl0bGVET00udGV4dENvbnRlbnQgPSBuZXdUYXNrVGl0bGU7XG4gICAgICAgIGNvbnN0IGR1ZURhdGVET00gPSBuZXdUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWR1ZS1kYXRlXCIpO1xuICAgICAgICBkdWVEYXRlRE9NLnRleHRDb250ZW50ID0gbmV3VGFza0R1ZURhdGU7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uRE9NID0gbmV3VGFza05vZGUucXVlcnlTZWxlY3RvcihcIi50by1kby1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgZGVzY3JpcHRpb25ET00udGV4dENvbnRlbnQgPSBuZXdUYXNrRGVzY3JpcHRpb247XG4gICAgICAgIGNvbnN0IG5vdGVzRE9NID0gbmV3VGFza05vZGUucXVlcnlTZWxlY3RvcihcIi50by1kby1ub3Rlc1wiKTtcbiAgICAgICAgbm90ZXNET00udGV4dENvbnRlbnQgPSBuZXdUYXNrTm90ZXM7XG4gICAgICAgIHRvRG9Db250ZW50LmFwcGVuZENoaWxkKG5ld1Rhc2tOb2RlKTtcbiAgICAgICAgcmV0dXJuIG5ld1Rhc2tOb2RlO1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIuaW5zZXJ0QmVmb3JlKGlucHV0RWxlbWVudCwgdGFza1N1YmNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUgPSAoZXZlbnQsIGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCBidXR0b25UeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldEJ1dHRvblR5cGUoZXZlbnQpO1xuICAgICAgICBsZXQgdGFza1N1YmNvbnRlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChidXR0b25UeXBlLmluY2x1ZGVzKFwiZWRpdC10YXNrLXRpdGxlXCIpKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudCA9IHRhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZS5pbmNsdWRlcyhcImVkaXQtdGFzay1kdWUtZGF0ZVwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnQgPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZS5pbmNsdWRlcyhcImVkaXQtdGFzay1kZXNjcmlwdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnQgPSB0YXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUuaW5jbHVkZXMoXCJlZGl0LXRhc2stbm90ZXNcIikpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50ID0gdGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gdGFza1N1YmNvbnRlbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhc2tTdWJjb250ZW50RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RTdWJjb250YWluZXIoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyVHlwZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXRTdWJjb250YWluZXJUeXBlKGV2ZW50KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tdGl0bGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgY29uc3QgdGFza1RpdGxlID0gdGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tdGl0bGVcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrVGl0bGU7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lclR5cGUuaW5jbHVkZXMoXCJ0by1kby1kdWUtZGF0ZS1zZWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrRHVlRGF0ZSA9IHRhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kdWUtZGF0ZVwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2tEdWVEYXRlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gdGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLW5vdGVzLXNlY3Rpb25cIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tOb3RlcyA9IHRhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tbm90ZXNcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrTm90ZXM7XG4gICAgICAgIH07XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhc2tTdWJjb250ZW50RWxlbWVudCwgdGFza1N1YmNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgY29uc3QgdG9nZ2xlVGFza0RPTUNvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlQ2hlY2tib3ggPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrQ29tcGxldGVkU3RhdGVkID0gdGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpO1xuICAgICAgICBpZiAodGFza0NvbXBsZXRlZFN0YXRlZCkge1xuICAgICAgICAgICAgY29tcGxldGVDaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbXBsZXRlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NID0gKGV2ZW50LCBuZXdDaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0RWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0RWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IHRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sobmV3Q2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gbmV3Q2hlY2tsaXN0VGFzay5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0NvbXBsZXRlZCA9IG5ld0NoZWNrbGlzdFRhc2suZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBuZXdDaGVja2xpc3RUYXNrTm9kZS5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2tcIik7XG4gICAgICAgIG5ld0NoZWNrbGlzdFRhc2tOb2RlLmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4ID0gbmV3Q2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICBuZXdDaGVja2xpc3RUYXNrTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJjaGVja2xpc3QtJHt0YXNrSW5kZXh9LSR7bmV3Q2hlY2tsaXN0VGFza0luZGV4fVwiIGNsYXNzPVwiY2hlY2tsaXN0LWNvbXBsZXRlLWNoZWNrYm94XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtuZXdDaGVja2xpc3RUYXNrSW5kZXh9XCIgY2xhc3M9XCJjaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICBERVNDUklQVElPTiBQTEFDRUhPTERFUlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LWNoZWNrbGlzdC10YXNrXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVtb3ZlLWNoZWNrbGlzdC10YXNrXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIkVkaXQgY2hlY2tsaXN0IHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgYFxuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50ID0gbmV3Q2hlY2tsaXN0VGFza05vZGUucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IG5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0NvbXBsZXRlZEVsZW1lbnQgPSBuZXdDaGVja2xpc3RUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKGAjY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke25ld0NoZWNrbGlzdFRhc2tJbmRleH1gKTtcbiAgICAgICAgaWYgKG5ld0NoZWNrbGlzdFRhc2tDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tDb21wbGV0ZWRFbGVtZW50LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tsaXN0VGFza0NvbXBsZXRlZEVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBjaGVja2xpc3RFbGVtZW50LmFwcGVuZENoaWxkKG5ld0NoZWNrbGlzdFRhc2tOb2RlKTtcbiAgICAgICAgcmV0dXJuIG5ld0NoZWNrbGlzdFRhc2tOb2RlO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5hcHBlbmRDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSA9IChldmVudCwgaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBjaGVja2xpc3RUYXNrRWxlbWVudC5kYXRhc2V0LmNoZWNrbGlzdFRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gdGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFyZ2V0Q2hlY2tsaXN0VGFza09iamVjdChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZm9yXCIsIGBjaGVja2xpc3QtJHt0YXNrSW5kZXh9LSR7Y2hlY2tsaXN0VGFza0luZGV4fWApO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtdGFzay1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLmFwcGVuZENoaWxkKGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3ggPSBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFyZ2V0Q2hlY2tsaXN0VGFza09iamVjdChldmVudCk7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgaWYgKGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tsaXN0LXRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2hhbmdlUGluQnV0dG9uSW1hZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgcGluQnV0dG9uID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RCdXR0b25FbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgcGluQnV0dG9uSW1hZ2UgPSBwaW5CdXR0b24ucXVlcnlTZWxlY3RvcihcImltZ1wiKTtcbiAgICAgICAgaWYgKHRhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKSkge1xuICAgICAgICAgICAgcGluQnV0dG9uSW1hZ2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi9hc3NldHMvcGluLXBpbm5lZC5wbmdcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwaW5CdXR0b25JbWFnZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCIuL2Fzc2V0cy9waW4tdW5waW5uZWQucG5nXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFyZ2V0VGFza09iamVjdChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tDb250ZW50U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgaWYgKHRhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY29uc3QgYWxyZWFkeVBpbm5lZFRhc2tzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBpbm5lZC10YXNrXCIpKTtcbiAgICAgICAgICAgIGlmIChhbHJlYWR5UGlubmVkVGFza3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgdGFza0NvbnRlbnRTZWN0aW9uLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlFbmRJbmRleCA9IGFscmVhZHlQaW5uZWRUYXNrcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQaW5uZWRUYXNrID0gYWxyZWFkeVBpbm5lZFRhc2tzW2FycmF5RW5kSW5kZXhdO1xuICAgICAgICAgICAgICAgIGxhc3RQaW5uZWRUYXNrLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIHRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicGlubmVkLXRhc2tcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cyA9IEFycmF5LmZyb20odGFza0NvbnRlbnRTZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tdGFzazpub3QoLnBpbm5lZC10YXNrKVwiKSk7XG4gICAgICAgICAgICBpZiAobGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmFwcGVuZENoaWxkKHRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlFbmRJbmRleCA9IGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFVucGlubmVkVGFza0VsZW1lbnQgPSBsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50c1thcnJheUVuZEluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrRWxlbWVudEluZGV4ID0gdGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1bnBpbm5lZFRhc2tFbGVtZW50IG9mIGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVucGlubmVkVGFza0VsZW1lbnRJbmRleCA9IHVucGlubmVkVGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrRWxlbWVudEluZGV4IDwgdW5waW5uZWRUYXNrRWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCB1bnBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVucGlubmVkVGFza0VsZW1lbnQgPT09IGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uYXBwZW5kQ2hpbGQodGFza0VsZW1lbnQsIGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwaW5uZWQtdGFza1wiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGFkZE5ld1RhYlRvRE9NLCBzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSxcbiAgICAgICAgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LCBpbnNlcnRUYWJOYW1lRWxlbWVudCwgc2V0RGVmYXVsdEN1cnJlbnRUYWJET00sXG4gICAgICAgIHNldEN1cnJlbnRUYWJET00sIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLCBhZGROZXdUYXNrVG9ET00sXG4gICAgICAgIGluc2VydFRhc2tJbnB1dEVsZW1lbnQsIHNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSwgaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50LFxuICAgICAgICB0b2dnbGVUYXNrRE9NQ29tcGxldGUsIGFkZE5ld0NoZWNrbGlzdFRhc2tUb0RPTSwgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgc2V0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudFZhbHVlLCBpbnNlcnRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LFxuICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUsIGNoYW5nZVBpbkJ1dHRvbkltYWdlLCBzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24sIH07XG59KSgpO1xuXG5leHBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9OyIsImltcG9ydCB7IGNoZWNrbGlzdE9iamVjdCB9IGZyb20gXCIuL2NoZWNrbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IERPTVVwZGF0ZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9hZGRfZWRpdFwiO1xuaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfYnVuZGxlcl9vYmplY3RcIjtcblxuY29uc3QgZXZlbnRBc3NpZ25lciA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZFRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhYlwiKTtcbiAgICAgICAgYWRkVGFiQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuYWRkVGFiKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYkVkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYWJJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFkZFRhYklucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFiKVxuICAgIH1cbiAgICBjb25zdCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlbW92ZS10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJSZW1vdmVCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYWIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkU3dpdGNoVGFiTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiU3dpdGNoQnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5zd2l0Y2gtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiU3dpdGNoQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuc3dpdGNoVGFiKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgYWRkTmV3VGFza0xpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdG8tZG8tdGFza1wiKTtcbiAgICAgICAgbmV3VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLm5ld1Rhc2spO1xuICAgIH1cbiAgICBjb25zdCBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1JlbW92ZUJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tcmVtb3ZlLXRhc2tcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlVGFzayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0VGFza0xpc3RlbmVycyA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza0VkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYXNrSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2tJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZVRhc2spO1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlVGFza0NvbXBsZXRlTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlQ2hlY2tib3hlcyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tib3ggb2YgdGFza0NvbXBsZXRlQ2hlY2tib3hlcykge1xuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci50b2dnbGVUYXNrQ29tcGxldGUpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tCdXR0b25zID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5hZGQtY2hlY2tsaXN0LXRhc2tcIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIG5ld0NoZWNrbGlzdFRhc2tCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5hZGROZXdDaGVja2xpc3RUYXNrKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0RWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC1jaGVja2xpc3QtdGFza1wiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGNoZWNrbGlzdEVkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZUNoZWNrbGlzdFRhc2spO1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5jaGVja2xpc3QtY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tib3ggb2YgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzKSB7XG4gICAgICAgICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlbW92ZS1jaGVja2xpc3QtdGFza1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZUNoZWNrbGlzdFRhc2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlVGFza1Bpbkxpc3RlbmVycyA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrUGluQnV0dG9ucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tcGluXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrUGluQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlVGFza1Bpbik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJMaXN0ZW5lciwgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyLCBhZGRUYWJJbnB1dExpc3RlbmVyLCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lcixcbiAgICAgICAgYWRkU3dpdGNoVGFiTGlzdGVuZXIsIGFkZE5ld1Rhc2tMaXN0ZW5lciwgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyLFxuICAgICAgICBhZGRFZGl0VGFza0xpc3RlbmVycywgYWRkVGFza0lucHV0TGlzdGVuZXIsIGFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyLFxuICAgICAgICBhZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIsIGFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXJzLCBhZGRDaGVja2xpc3RUYXNrSW5wdXRMaXN0ZW5lcixcbiAgICAgICAgYWRkVG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlTGlzdGVuZXIsIGFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lciwgYWRkVG9nZ2xlVGFza1Bpbkxpc3RlbmVycywgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHRvRG9MaXN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFza0Zyb21UYWJBcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFiSW5kZXgpO1xuICAgICAgICBjdXJyZW50VGFiT2JqZWN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrRnJvbVRhc2tBcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY3VycmVudFRhc2tPYmplY3QucmVtb3ZlVGFzayhpbmRleCk7XG4gICAgfTtcbiAgICByZXR1cm4geyByZW1vdmVUYWJGcm9tVG9kb0FycmF5LCByZW1vdmVUYXNrRnJvbVRhYkFycmF5LCByZW1vdmVDaGVja2xpc3RUYXNrRnJvbVRhc2tBcnJheSwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlclJlbW92ZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiTmFtZUVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGxldCBzd2l0Y2hUYWIgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKVxuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKHN3aXRjaFRhYik7XG4gICAgICAgIHN3aXRjaFRhYiA9IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24ucmVtb3ZlQ2hpbGQodGFiRWxlbWVudCk7XG4gICAgICAgIHRhYkVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVzZXRDdXJyZW50VGFiU3RhdHVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjdXJyZW50LXRhYlwiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUYWIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdG9Eb1Rhc2tTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0b0RvVGFza1NlY3Rpb24ucmVtb3ZlQ2hpbGQodGFza0VsZW1lbnQpO1xuICAgICAgICB0YXNrRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIucmVtb3ZlQ2hpbGQodGFza1N1YmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gbnVsbFxuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25ET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGJ1dHRvbkVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwibGFiZWxcIik7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24pO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tFbGVtZW50RE9NID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RDaGVja2xpc3RFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY2hlY2tsaXN0RWxlbWVudC5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUFsbFRhc2tFbGVtZW50cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbnRlbnRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24ucmVwbGFjZUNoaWxkcmVuKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyByZW1vdmVUYWJOYW1lRWxlbWVudCwgcmVtb3ZlVGFiSW5wdXRFbGVtZW50LCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVzZXRDdXJyZW50VGFiU3RhdHVzLCByZW1vdmVUYXNrRWxlbWVudEZyb21ET00sIHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00sXG4gICAgICAgIHJlbW92ZVRhc2tJbnB1dEVsZW1lbnQsIHJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSwgcmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCwgcmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00sIHJlbW92ZUFsbFRhc2tFbGVtZW50cywgfVxufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcbmltcG9ydCB7IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfYWRkX2VkaXRfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX3JlbW92ZVwiO1xuXG5jb25zdCBldmVudEJ1bmRsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZFRhYiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYWJUb1RvZG9BcnJheSgpO1xuICAgICAgICBjb25zdCBuZXdUYWJOb2RlID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3VGFiVG9ET00obmV3VGFiSW5kZXgpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lcihuZXdUYWJOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lcihuZXdUYWJOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lcihuZXdUYWJOb2RlKTtcbiAgICAgICAgaWYgKGhlbHBlckZ1bmN0aW9ucy5jaGVja0lmT25seU9uZVRhYigpKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFRhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3Quc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKGZpcnN0VGFiSW5kZXgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvclRhYklucHV0RWxlbWVudChldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYklucHV0RWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYk5hbWVFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhYklucHV0RWxlbWVudFZhbHVlKGV2ZW50LCBpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYWJJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhYk5hbWUoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFiTmFtZUVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWJJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFiRnJvbVRvZG9BcnJheShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiRWxlbWVudEZyb21ET00oZXZlbnQpO1xuICAgICAgICBpZiAoaGVscGVyRnVuY3Rpb25zLmNoZWNrSWZXYXNDdXJyZW50VGFiKGV2ZW50KSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYihmaXJzdFRhYkluZGV4KVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzd2l0Y2hUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZldhc0N1cnJlbnRUYWIoZXZlbnQpKSB7XG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC51cGRhdGVDdXJyZW50VGFiKGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVzZXRDdXJyZW50VGFiU3RhdHVzKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRDdXJyZW50VGFiRE9NKGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQWxsVGFza0VsZW1lbnRzKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IG5ld1Rhc2sgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld1Rhc2tUb1RhYigpO1xuICAgICAgICBjb25zdCBuZXdUYXNrTm9kZSA9IERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZE5ld1Rhc2tUb0RPTShuZXdUYXNrSW5kZXgpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFJlbW92ZVRhc2tCdXR0b25MaXN0ZW5lcihuZXdUYXNrTm9kZSk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkRWRpdFRhc2tMaXN0ZW5lcnMobmV3VGFza05vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyKG5ld1Rhc2tOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3VGFza05vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tQaW5MaXN0ZW5lcnMobmV3VGFza05vZGUpO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFza0Zyb21UYWJBcnJheShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFza0VsZW1lbnRGcm9tRE9NKGV2ZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydFRhc2tJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrU3ViY29udGVudEVsZW1lbnRGcm9tRE9NKGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhc2tJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0VGFza0lucHV0RWxlbWVudFZhbHVlKGV2ZW50LCBpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYXNrSW5wdXRMaXN0ZW5lcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRUYXNrT2JqZWN0SW5mbyhldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrSW5wdXRFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC50b2dnbGVUYXNrQ29tcGxldGUoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVUYXNrRE9NQ29tcGxldGUoZXZlbnQpO1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrKGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza05vZGUgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdDaGVja2xpc3RUYXNrVG9ET00oZXZlbnQsIG5ld0NoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMobmV3Q2hlY2tsaXN0VGFza05vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyKG5ld0NoZWNrbGlzdFRhc2tOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3Q2hlY2tsaXN0VGFza05vZGUpO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvckNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTShldmVudCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZShldmVudCwgaW5wdXRFbGVtZW50KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUNoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbihldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudChldmVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKGV2ZW50KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlKGV2ZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdC5yZW1vdmVDaGVja2xpc3RUYXNrRnJvbVRhc2tBcnJheShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00oZXZlbnQpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlVGFza1BpbiA9IChldmVudCkgPT4ge1xuICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC50b2dnbGVUYXNrUGluKGV2ZW50KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuY2hhbmdlUGluQnV0dG9uSW1hZ2UoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zaGlmdFRhc2tFbGVtZW50UG9zaXRpb24oZXZlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgYWRkVGFiLCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQsIHVwZGF0ZVRhYiwgcmVtb3ZlVGFiLCBzd2l0Y2hUYWIsXG4gICAgICAgIG5ld1Rhc2ssIHJlbW92ZVRhc2ssIGluc2VydFRhc2tJbnB1dEVsZW1lbnQsIHVwZGF0ZVRhc2ssIHRvZ2dsZVRhc2tDb21wbGV0ZSwgYWRkTmV3Q2hlY2tsaXN0VGFzaywgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCwgdXBkYXRlQ2hlY2tsaXN0VGFzaywgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlLCByZW1vdmVDaGVja2xpc3RUYXNrLCB0b2dnbGVUYXNrUGluLCB9O1xufSkoKTtcblxuZXhwb3J0IHsgZXZlbnRCdW5kbGVyIH07IiwiaW1wb3J0IHsgdG9Eb1Rhc2sgfSBmcm9tIFwiLi9vYmplY3RzL3RvZG9fdGFza19vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdE9iamVjdCB9IGZyb20gXCIuL29iamVjdHMvY2hlY2tsaXN0X29iamVjdFwiO1xuaW1wb3J0IHsgY2hlY2tsaXN0VGFza09iamVjdCB9IGZyb20gXCIuL29iamVjdHMvY2hlY2tsaXN0X3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5cbi8vIHRlc3RpbmcgdG9kbyB0YXNrIG9iamVjdFxuaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG4vLyBpbXBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvbm90ZXNfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudFwiO1xuXG4vLyB0ZXN0aW5nIGNoZWNrbGlzdCBvYmplY3Rcbi8vIGltcG9ydCB7IGNoZWNrbGlzdE9iamVjdCB9IGZyb20gXCIuL2NoZWNrbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcblxuLy8gdGVzdGluZyB0YWJzIChhcnJheXMgdGhhdCBjb250YWluIG1hbnkgdG8gZG8gdGFza3MpXG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vb2JqZWN0cy90b2RvX3RhYl9vYmplY3RcIjtcblxuLy8gdGVzdGluZyBsaXN0IHRoYXQgY29udGFpbiBldmVyeXRoaW5nXG5pbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL29iamVjdHMvdG9kb19saXN0X29iamVjdFwiO1xuXG4vLyB0ZXN0aW5nIGZvciBET00gY29udHJvbGxlciBvYmplY3RzXG5pbXBvcnQgeyBldmVudEJ1bmRsZXIgfSBmcm9tIFwiLi9vYmplY3RzL2V2ZW50X2J1bmRsZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vb2JqZWN0cy9ldmVudF9hc3NpZ25lcl9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vb2JqZWN0cy9ET01fY29udHJvbGxlcl9hZGRfZWRpdFwiO1xuXG4vLyBsZXQgdGVzdCA9IGNoZWNrbGlzdFRhc2tPYmplY3QoXCJkZHRlc3RcIik7XG4vLyBjb25zb2xlLmxvZyh0ZXN0KVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGlmICh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpIHtcbi8vICAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIG5vdyB0cnVlXCIpXG4vLyB9IGVsc2Uge1xuLy8gICAgIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSxcInRoaXMgaXMgc3RpbGwgZmFsc2VcIilcbi8vIH1cblxuLy8gY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LnRvZ2dsZUNvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuXG4vLyBpZiAodGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBub3cgdHJ1ZVwiKVxuLy8gfSBlbHNlIHtcbi8vICAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIHN0aWxsIGZhbHNlXCIpXG4vLyB9XG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gY29uc29sZS5sb2codGVzdClcblxuLy8gY29uc29sZS5sb2codGVzdC5nZXRUYXNrRGVzY3JpcHRpb24oKSlcbi8vIHRlc3Quc2V0VGFza0Rlc2NyaXB0aW9uKFwid293d2llXCIpXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldFRhc2tEZXNjcmlwdGlvbigpKVxuXG4vLyBsZXQgaW1wb3J0YW50VGFzayA9IHRvRG9UYXNrKFwiTWFrZSBDZXJlYWxcIiwgXCJwYXJ0IG9mIGJyZWFrZmFzdCBwbGFuXCIsIFwidGhpcyBtb3JuaW5nXCIsIFwibWFrZSBzdXJlIHRvIHB1dCBtaWxrIGJhY2sgaW4gZnJpZGdlXCIpO1xuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzaylcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza1RpdGxlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRHVlRGF0ZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrTm90ZXMoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0UGlubmVkU3RhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gaW1wb3J0YW50VGFzay5zZXRUYXNrVGl0bGUoXCJNYWtlIENoaWNrZW4gQnJvdGhcIilcbi8vIGltcG9ydGFudFRhc2suc2V0VGFza0Rlc2NyaXB0aW9uKFwicmVxdWlyZXMgMSBjaGlja2VuIGFuZCAxIGJyb3RoXCIpXG4vLyBpbXBvcnRhbnRUYXNrLnNldFRhc2tEdWVEYXRlKFwiYmVmb3JlIEkgY2F1Z2h0IHRoaXMgY29sZFwiKVxuLy8gaW1wb3J0YW50VGFzay5zZXRUYXNrTm90ZXMoXCJkb24ndCBzbmVlemUgaW50byBwb3RcIilcbi8vIGltcG9ydGFudFRhc2sudG9nZ2xlUGlubmVkU3RhdGUoKTtcbi8vIGltcG9ydGFudFRhc2sudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcblxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrVGl0bGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tEdWVEYXRlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tOb3RlcygpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRQaW5uZWRTdGF0ZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBpbXBvcnRhbnRUYXNrLmFkZFRhc2sodGVzdClcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkuZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG5cbmxldCB0YWIxID0gdG9Eb1RhYihcIkRlZmF1bHQgdGVzdFwiKVxuLy8gY29uc29sZS5sb2codGFiMSlcbi8vIHRhYjEuYWRkVGFzayhpbXBvcnRhbnRUYXNrKVxuLy8gY29uc29sZS5sb2codGFiMSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApKVxuLy8gY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkuZ2V0VGFza1RpdGxlKCkpXG5cbi8vIGxldCBhbm90aGVySW1wb3J0YW50VGFzayA9IHRvRG9UYXNrKFwiQ2xlYW4gcG90XCIsIFwicGFydCBvZiBjaG9yZXMgcGxhblwiLCBcInRoaXMgYWZ0ZXJub29uXCIsIFwibWFrZSBzdXJlIHRvIHVzZSBzb2FwXCIpO1xuLy8gY29uc29sZS5sb2codGFiMSlcbi8vIHRhYjEuYWRkVGFzayhhbm90aGVySW1wb3J0YW50VGFzaylcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDEpKVxuLy8gY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMSkuZ2V0VGFza1RpdGxlKCkpXG5cbnRvRG9MaXN0LmFkZFRhc2sodGFiMSlcbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkuZ2V0VGFza1RpdGxlKCkpXG5cbi8vIC8vIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiKDApO1xuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcblxuLy8gbGV0IHRhYjIgPSB0b0RvVGFiKFwiaGVlIGhlZVwiKVxuLy8gdG9Eb0xpc3QuYWRkVGFzayh0YWIyKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcblxubGV0IHRhc2sxID0gdG9Eb1Rhc2soXCJNYWtlIE1vbmV5IFRFU1QgMFwiLCBcIlRhc2sgRHVlIERhdGVcIiwgXCJUYXNrIERlc2NyaXB0aW9uXCIsIFwiVGFzayBOb3Rlc1wiKTtcbmNvbnNvbGUubG9nKHRhYjEuYWRkVGFzayh0YXNrMSkpXG5cbmxldCB0YXNrMiA9IHRvRG9UYXNrKFwiTWFrZSBNb25leSBURVNUIEFHQUlOIDFcIiwgXCJUYXNrIER1ZSBEYXRlXCIsIFwiVGFzayBEZXNjcmlwdGlvblwiLCBcIlRhc2sgTm90ZXNcIik7XG50YWIxLmFkZFRhc2sodGFzazIpXG5cbmxldCB0YXNrMyA9IHRvRG9UYXNrKFwiTWFrZSBNb25leSBURVNUIEFHQUlOIEFHQUlOIDJcIiwgXCJUYXNrIER1ZSBEYXRlXCIsIFwiVGFzayBEZXNjcmlwdGlvblwiLCBcIlRhc2sgTm90ZXNcIik7XG50YWIxLmFkZFRhc2sodGFzazMpXG5cbmxldCB0YXNrNCA9IHRvRG9UYXNrKFwiTWFrZSBNb25leSBURVNUIEFHQUlOIEFHQUlOIEFHQUlOIDNcIiwgXCJUYXNrIER1ZSBEYXRlXCIsIFwiVGFzayBEZXNjcmlwdGlvblwiLCBcIlRhc2sgTm90ZXNcIik7XG50YWIxLmFkZFRhc2sodGFzazQpXG5cbmV2ZW50QXNzaWduZXIuYWRkTmV3VGFiTGlzdGVuZXIoKTtcbi8vIGV2ZW50QXNzaWduZXIuYWRkRWRpdFRhYkxpc3RlbmVyKCk7XG5ldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lcigpO1xuZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lcigpO1xuXG5cblxuY29uc29sZS5sb2codG9Eb0xpc3QpXG5jb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCkpXG5jb25zb2xlLmxvZyh0YWIxLmdldENoZWNrbGlzdFRhc2tzKCkpXG5jb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbmNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG5ET01Db250cm9sbGVyQWRkRWRpdC5zZXREZWZhdWx0Q3VycmVudFRhYkRPTSgwKVxuXG5ldmVudEFzc2lnbmVyLmFkZFN3aXRjaFRhYkxpc3RlbmVyKClcblxuZXZlbnRBc3NpZ25lci5hZGROZXdUYXNrTGlzdGVuZXIoKTtcblxuZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIoKTtcblxuZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFza0xpc3RlbmVycygpO1xuXG4vLyBjb25zdCBoZWggPSAoKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coXCJibG9vcFwiKVxuLy8gfVxuXG4vLyBjb25zdCBib2kgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpXG4vLyBib2kuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhlaClcblxuZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lcigpO1xuZXZlbnRBc3NpZ25lci5hZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMoKTtcblxubGV0IGNoZWNrbGlzdFRhc2sxID0gY2hlY2tsaXN0VGFza09iamVjdChcIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uIFRFU1RcIilcbnRhc2sxLmFkZFRhc2soY2hlY2tsaXN0VGFzazEpXG5cbmV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlQ2hlY2tsaXN0VGFza0xpc3RlbmVyKCk7XG5cbmV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlVGFza1Bpbkxpc3RlbmVycygpOyJdLCJuYW1lcyI6WyJ0aXRsZUJlaGF2aW9yQ29tcG9uZW50Iiwib2JqZWN0IiwiaW5pdGlhbFRpdGxlIiwidGl0bGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRUYXNrVGl0bGUiLCJzZXRUYXNrVGl0bGUiLCJuZXdUaXRsZSIsImRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImdldFRhc2tEZXNjcmlwdGlvbiIsInNldFRhc2tEZXNjcmlwdGlvbiIsIm5ld0Rlc2NyaXB0aW9uIiwiY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQiLCJjb21wbGV0ZWQiLCJ0b2dnbGVDb21wbGV0ZWRTdGF0ZSIsImdldENvbXBsZXRlZFN0YXRlIiwiY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQiLCJjaGVja2xpc3QiLCJhZGRUYXNrIiwidGFzayIsInB1c2giLCJsZW5ndGgiLCJyZW1vdmVUYXNrIiwiaW5kZXgiLCJ1bmRlZmluZWQiLCJnZXRDaGVja2xpc3RUYXNrcyIsImdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayIsInRvRG9UYXNrIiwiZHVlRGF0ZSIsIm5vdGVzIiwiaW5pdGlhbER1ZURhdGUiLCJnZXRUYXNrRHVlRGF0ZSIsInNldFRhc2tEdWVEYXRlIiwibmV3RHVlRGF0ZSIsImR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxOb3RlcyIsImdldFRhc2tOb3RlcyIsInNldFRhc2tOb3RlcyIsIm5ld05vdGVzIiwibm90ZXNCZWhhdmlvckNvbXBvbmVudCIsInBpbm5lZCIsInRvZ2dsZVBpbm5lZFN0YXRlIiwiZ2V0UGlubmVkU3RhdGUiLCJwaW5uZWRCZWhhdmlvckNvbXBvbmVudCIsImNoZWNrbGlzdFRhc2tPYmplY3QiLCJ0b0RvVGFiIiwidG9Eb0xpc3QiLCJjdXJyZW50VGFiIiwiZ2V0Q3VycmVudFRhYkluZGV4Iiwic2V0Q3VycmVudFRhYkluZGV4IiwibmV3Q3VycmVudFRhYiIsImhlbHBlckZ1bmN0aW9ucyIsImVuc3VyZUNvcnJlY3RUYWJFbGVtZW50IiwiZXZlbnQiLCJ0YWJFbGVtZW50IiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCIsInRhc2tFbGVtZW50IiwiY2xhc3NMaXN0IiwiQXJyYXkiLCJmcm9tIiwiaW5jbHVkZXMiLCJlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyIiwidGFza1N1YmNvbnRhaW5lciIsImdldFRhcmdldFRhc2tPYmplY3QiLCJkYXRhc2V0IiwidGFza0luZGV4IiwiY3VycmVudFRhYkluZGV4IiwiZW5zdXJlQ29ycmVjdEJ1dHRvbkVsZW1lbnQiLCJidXR0b25FbGVtZW50IiwidGFnTmFtZSIsImVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCIsImNoZWNrbGlzdFRhc2tFbGVtZW50IiwiY2hlY2tGb3JUYWJJbnB1dEVsZW1lbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoZWNrSWZXYXNDdXJyZW50VGFiIiwiY2hlY2tJZk9ubHlPbmVUYWIiLCJ0b0RvVGFiU2VjdGlvbiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGVja0ZvclRhc2tTdWJjb250YWluZXJJbnB1dEVsZW1lbnQiLCJnZXRCdXR0b25UeXBlIiwiZ2V0U3ViY29udGFpbmVyVHlwZSIsImVuc3VyZUNvcnJlY3RDaGVja2xpc3RFbGVtZW50IiwiY2hlY2tsaXN0RWxlbWVudCIsImNoZWNrRm9yQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCIsImdldFRhcmdldENoZWNrbGlzdFRhc2tPYmplY3QiLCJ0YXNrT2JqZWN0IiwiY2hlY2tsaXN0VGFza0luZGV4Iiwib2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QiLCJuZXdUYWIiLCJ0YWJJbmRleCIsInZhbHVlIiwidGFiQXJyYXkiLCJmaXJzdFRhYiIsInRhYiIsIm5ld1Rhc2siLCJuZXdUYXNrVGl0bGVWYWx1ZSIsInRhc2tTdWJjb250YWluZXJUeXBlIiwibmV3Q2hlY2tsaXN0VGFzayIsIm5ld0NoZWNrbGlzdFRhc2tJbmRleCIsIm5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiIsIkRPTUNvbnRyb2xsZXJBZGRFZGl0IiwiYWRkVGFiQnV0dG9uIiwibmV3VGFiTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJuZXdUYWJPYmplY3RUaXRsZSIsImFkZCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiaW5zZXJ0QmVmb3JlIiwiaW5wdXRFbGVtZW50IiwidGFiTmFtZSIsInNldEF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJmb2N1cyIsInRhYkJ1dHRvbiIsInRhYkJ1dHRvbk5hbWUiLCJhcHBlbmRDaGlsZCIsImNvbnNvbGUiLCJsb2ciLCJmaXJzdFRhYkluZGV4IiwibmV3VGFza09iamVjdCIsInRvRG9Db250ZW50IiwibmV3VGFza05vZGUiLCJuZXdUYXNrVGl0bGUiLCJuZXdUYXNrRGVzY3JpcHRpb24iLCJuZXdUYXNrRHVlRGF0ZSIsIm5ld1Rhc2tOb3RlcyIsImJ1dHRvblR5cGUiLCJ0YXNrU3ViY29udGVudCIsInRhc2tTdWJjb250ZW50RWxlbWVudCIsInRhc2tUaXRsZSIsInRhc2tEdWVEYXRlIiwidGFza0Rlc2NyaXB0aW9uIiwidGFza05vdGVzIiwiY29tcGxldGVDaGVja2JveCIsImNoZWNrZWQiLCJyZW1vdmUiLCJuZXdDaGVja2xpc3RUYXNrQ29tcGxldGVkIiwibmV3Q2hlY2tsaXN0VGFza05vZGUiLCJjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24iLCJjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24iLCJjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50IiwiY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveCIsInBpbkJ1dHRvbkltYWdlIiwidGFza0NvbnRlbnRTZWN0aW9uIiwiYWxyZWFkeVBpbm5lZFRhc2tzIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwibGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMiLCJsYXN0VW5waW5uZWRUYXNrRWxlbWVudCIsInRhc2tFbGVtZW50SW5kZXgiLCJ1bnBpbm5lZFRhc2tFbGVtZW50IiwiZXZlbnRBc3NpZ25lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudEJ1bmRsZXIiLCJhZGRUYWIiLCJzY29wZSIsInRhYkVkaXRCdXR0b25zIiwiYnV0dG9uIiwiaW5zZXJ0VGFiSW5wdXRFbGVtZW50IiwidXBkYXRlVGFiIiwidGFiUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhYiIsInRhYlN3aXRjaEJ1dHRvbnMiLCJzd2l0Y2hUYWIiLCJ0YXNrUmVtb3ZlQnV0dG9ucyIsInRhc2tFZGl0QnV0dG9ucyIsImluc2VydFRhc2tJbnB1dEVsZW1lbnQiLCJ1cGRhdGVUYXNrIiwidGFza0NvbXBsZXRlQ2hlY2tib3hlcyIsImNoZWNrYm94IiwidG9nZ2xlVGFza0NvbXBsZXRlIiwibmV3Q2hlY2tsaXN0VGFza0J1dHRvbnMiLCJhZGROZXdDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0RWRpdEJ1dHRvbnMiLCJpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50IiwidXBkYXRlQ2hlY2tsaXN0VGFzayIsImNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3hlcyIsInRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSIsImNoZWNrbGlzdFRhc2tSZW1vdmVCdXR0b25zIiwicmVtb3ZlQ2hlY2tsaXN0VGFzayIsInRhc2tQaW5CdXR0b25zIiwidG9nZ2xlVGFza1BpbiIsIm9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QiLCJET01Db250cm9sbGVyUmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicmVwbGFjZUNoaWxkcmVuIiwibmV3VGFiSW5kZXgiLCJjb2RlIiwibmV3VGFza0luZGV4IiwidGFiMSIsInRhc2sxIiwidGFzazIiLCJ0YXNrMyIsInRhc2s0IiwiY2hlY2tsaXN0VGFzazEiXSwic291cmNlUm9vdCI6IiJ9
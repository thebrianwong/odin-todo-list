(()=>{"use strict";const e=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},t=(()=>{let s=0;const n=()=>s;let a={getCurrentTabIndex:n,setCurrentTabIndex:e=>{s=e},getCurrentTabObject:()=>{const e=n();return t.getSpecificChecklistTask(e)}};return Object.assign(a,e(a)),a})(),s=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},n=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t},a=e=>document.querySelector(`[data-task-index='${e}']`),c=e=>t.getSpecificChecklistTask(e),o=(e,t)=>c(e).getSpecificChecklistTask(t);return{checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},getTaskIndex:e=>{const t=(e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t})(e);return t.dataset.taskIndex},getChecklistTaskIndex:e=>n(e).dataset.checklistTaskIndex,getTabIndex:t=>e(t).dataset.tabIndex,getNewValue:e=>e.target.value,getTaskSubcontainerType:e=>{const t=s(e),n=Array.from(t.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(e,t)=>{const s=a(e);let n;return"Title"===t?n=s.querySelector(".to-do-title-section"):"Due Date"===t?n=s.querySelector(".to-do-due-date-section"):"Description"===t?n=s.querySelector(".to-do-description-section"):"Notes"===t&&(n=s.querySelector(".to-do-notes-section")),n},getTaskElement:a,getChecklistTaskElement:(e,t)=>a(e).querySelector(`[data-checklist-task-index='${t}']`),getTabElement:e=>document.querySelector(`[data-tab-index='${e}']`),checkForExistingInputElement:(t,a)=>{let c;return"Tab"===a?c=e(t).querySelector(".tab-name-input"):"Task"===a?c=s(t).querySelector(".task-input"):"Checklist Task"===a&&(c=n(t).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==c},tryingToDoubleClick:e=>{const t=a(e);return!!Array.from(t.classList).includes("mid-animation")},getTabObject:c,getTaskObject:o,getChecklistTaskObject:(e,t,s)=>o(e,t).getSpecificChecklistTask(s)}})(),a=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},c=(e,t)=>{let s=t;return Object.assign(e,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},o=(n="New Tab")=>{const a=(t=>{let n={};return Object.assign(n,s(n,t),e(n)),n})(n);return t.addTask(a)},i=(e,s)=>{t.getSpecificChecklistTask(e).setTaskTitle(s)},l=e=>{t.setCurrentTabIndex(e)},r=()=>{const e=t.getChecklistTasks();let s;for(const n in e)if(void 0!==e[n])return t.setCurrentTabIndex(n),s=n,s},d=(n="New Task Title",o="Task Due Date",i="Task Description",l="Task Notes",r=!1,d=!1)=>{const k=t.getCurrentTabIndex(),u=t.getSpecificChecklistTask(k),T=((t,n,o,i,l,r)=>{let d={};return Object.assign(d,s(d,t),a(d,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(d,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(d,i),((e,t)=>{let s=t;return Object.assign(e,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,l),c(d,r),e(d)),d})(n,o,i,l,r,d);return u.addTask(T)},k=(e,s,n)=>{const a=t.getCurrentTabObject().getSpecificChecklistTask(e);"Title"===s?a.setTaskTitle(n):"Due Date"===s?a.setTaskDueDate(n):"Description"===s?a.setTaskDescription(n):"Notes"===s&&a.setTaskNotes(n)},u=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).toggleCompletedState()},T=(e,s="Checklist Task Description",n=!1)=>{const o=t.getCurrentTabObject().getSpecificChecklistTask(e),i=((e,t)=>{let s={};return Object.assign(s,a(s,e),c(s,t)),s})(s,n);return o.addTask(i)},g=(e,s,n)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).setTaskDescription(n)},m=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).toggleCompletedState()},p=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).togglePinnedState()},b=()=>{document.querySelector(".add-tab").addEventListener("click",X.addTab)},h=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",X.insertTabInputElement)},C=e=>{e.addEventListener("keydown",X.updateTab)},f=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",X.removeTab)},S=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",X.switchTab)},y=()=>{document.querySelector(".new-to-do-task").addEventListener("click",X.newTask)},E=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",X.removeTask)},v=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",X.insertTaskInputElement)},D=e=>{e.addEventListener("keydown",X.updateTask)},I=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",X.toggleTaskComplete)},L=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",X.addNewChecklistTask)},O=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",X.insertChecklistTaskInputElement)},A=e=>{e.addEventListener("keydown",X.updateChecklistTask)},q=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",X.toggleChecklistTaskComplete)},x=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",X.removeChecklistTask)},N=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",X.toggleTaskPin)},w=(e=document)=>{const t=e.querySelectorAll(".to-do-task-change-display");for(const e of t)e.addEventListener("click",X.toggleDisplayTaskDetails)},j=(()=>{const e=e=>{const s=t.getCurrentTabObject().getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),a=document.createElement("div");a.classList.add("to-do-task"),a.dataset.taskIndex=e;const c=s.getTaskTitle(),o=s.getTaskDescription(),i=s.getTaskDueDate(),l=s.getTaskNotes(),r=`to-do-complete-checkbox-${e}`;return a.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',a.querySelector(".to-do-title").textContent=c,a.querySelector(".to-do-due-date").textContent="Due On: "+i,a.querySelector(".to-do-description").textContent="Description: "+o,a.querySelector(".to-do-notes").textContent="Notes: "+l,n.appendChild(a),a.querySelector("label").setAttribute("for",r),a.querySelector(".to-do-complete-checkbox").setAttribute("id",r),a},s=e=>{const s=n.getTaskElement(e),a=s.querySelector(".to-do-complete-checkbox");t.getCurrentTabObject().getSpecificChecklistTask(e).getCompletedState()?(a.checked=!0,s.classList.add("task-completed")):(a.checked=!1,s.classList.remove("task-completed"))},a=(e,s)=>{const a=n.getTaskElement(e).querySelector(".checklist"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("div");return o.classList.add("checklist-task"),o.dataset.checklistTaskIndex=s,o.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${e}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${e}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,o.querySelector(".checklist-task-description").textContent=c,a.appendChild(o),o},c=(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s);a.checked=c.getCompletedState(),c.getCompletedState()?a.classList.add("checklist-task-completed"):a.classList.remove("checklist-task-completed")},o=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,a=s.getSpecificChecklistTask(n),c=e.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},i=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,a=s.getSpecificChecklistTask(n),c=document.querySelector(".to-do-content");if(a.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)c.insertBefore(e,c.firstElementChild);else{const s=t[t.length-1];for(const a of t){if(n<a.dataset.taskIndex){c.insertBefore(e,a);break}a===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}};return{addNewTabToDOM:e=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),a=document.createElement("div"),c=t.getSpecificChecklistTask(e).getTaskTitle();return a.classList.add("tab-title"),a.dataset.tabIndex=e,a.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',a.querySelector(".tab-name").textContent=c,n.insertBefore(a,s),a},setTabInputElementValue:e=>{const s=n.getTabElement(e).querySelector("input"),a=t.getSpecificChecklistTask(e).getTaskTitle();s.value=a},insertTabInputElement:e=>{const t=n.getTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},insertTabNameElement:e=>{const s=n.getTabElement(e),a=t.getSpecificChecklistTask(e).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const o=document.createElement("h2");return o.classList.add("tab-name"),o.textContent=a,c.appendChild(o),s.insertBefore(c,s.firstChild),s},setDefaultCurrentTabDOM:e=>{const t=n.getTabElement(e);null!==t&&t.setAttribute("id","current-tab")},setCurrentTabDOM:e=>{n.getTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&n.getTabElement(e).setAttribute("id","current-tab")},addNewTaskToDOM:e,insertTaskInputElement:(e,t)=>{const s=n.getTaskSubcontainerElement(e,t),a=document.createElement("input");return a.classList.add("task-input"),a.setAttribute("type","text"),s.insertBefore(a,s.firstChild),a.focus(),a},setTaskInputElementValue:(e,s)=>{const a=n.getTaskSubcontainerElement(e,s).querySelector("input"),c=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;"Title"===s?o=c.getTaskTitle():"Due Date"===s?o=c.getTaskDueDate():"Description"===s?o=c.getTaskDescription():"Notes"===s&&(o=c.getTaskNotes()),a.value=o},insertTaskSubcontentElement:(e,s)=>{const a=n.getTaskSubcontainerElement(e,s),c=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;if("Title"===s){const e=c.getTaskTitle();o=document.createElement("h3"),o.classList.add("to-do-title"),o.textContent=e}else if("Due Date"===s){const e=c.getTaskDueDate();o=document.createElement("p"),o.classList.add("to-do-due-date"),o.textContent="Due On: "+e}else if("Description"===s){const e=c.getTaskDescription();o=document.createElement("p"),o.classList.add("to-do-description"),o.textContent="Description: "+e}else if("Notes"===s){const e=c.getTaskNotes();o=document.createElement("p"),o.classList.add("to-do-notes"),o.textContent="Notes: "+e}a.insertBefore(o,a.firstChild)},toggleTaskDOMComplete:s,addNewChecklistTaskToDOM:a,insertChecklistTaskInputElement:(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section"),a=document.createElement("input");return a.classList.add("checklist-input"),a.setAttribute("type","text"),s.appendChild(a),a.focus(),a},setChecklistTaskInputElementValue:(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-input"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription();a.value=c},insertChecklistTaskDescriptionElement:(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("label");o.setAttribute("for",`checklist-${e}-${s}`),o.classList.add("checklist-task-description"),o.textContent=c,a.appendChild(o)},toggleChecklistTaskDOMComplete:c,changePinButtonImage:e=>{const s=n.getTaskElement(e),a=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:e=>{const s=n.getTaskElement(e),a=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.dataset.taskIndex,o=document.querySelector(".to-do-content");if(a.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)o.insertBefore(s,o.firstElementChild);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){o.insertBefore(s,n);break}n===t&&t.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const e=Array.from(o.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)o.appendChild(s);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){o.insertBefore(s,n);break}n===t&&o.appendChild(s,t)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=t.getCurrentTabObject().getChecklistTasks();for(const t in n){const l=n[t];if(void 0!==l){const n=e(t);o(n),i(n),s(t),X.addTaskListeners(n);const r=l.getChecklistTasks();for(const e in r)if(void 0!==r[e]){const s=a(t,e);c(t,e),X.addChecklistTaskListeners(s)}}}},toggleDisplayTaskDetails:e=>{const t=n.getTaskElement(e);Array.from(t.querySelectorAll(".animation-target")).forEach((e=>{Array.from(e.classList).includes("hide-to-do-details")?(e.classList.remove("hide-to-do-details"),e.classList.add("display-to-do-details"),e.style.display="flex"):(e.classList.add("hide-to-do-details"),e.classList.remove("display-to-do-details"),setTimeout((()=>{e.style.display="none"}),1e3))})),(e=>{e.classList.add("mid-animation"),setTimeout((()=>{e.classList.remove("mid-animation")}),1e3)})(t)},rotateChevronButton:e=>{const t=n.getTaskElement(e).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(t.classList);0===s.length||s.includes("rotate-hide-task-details")?(t.classList.remove("rotate-hide-task-details"),t.classList.add("rotate-display-task-details"),t.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(t.classList.remove("rotate-display-task-details"),t.classList.add("rotate-hide-task-details"),t.classList.remove("rotated-chevron"))},toggleAnimations:(e,t)=>{const s=n.getTaskElement(e),a=s.querySelector(".to-do-task-change-display").querySelector("img"),c=Array.from(s.querySelectorAll(".animation-target"));c.push(a),c.forEach((e=>{"Enable"===t?e.classList.add("no-animations"):"Disable"===t&&e.classList.remove("no-animations")}))}}})(),P=e=>{t.removeTask(e)},$=e=>{t.getCurrentTabObject().removeTask(e)},_=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).removeTask(s)},M=e=>{const t=n.getTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},B=e=>{const t=n.getTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},H=e=>{let t=n.getTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},R=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},J=e=>{let t=n.getTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},F=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let a=s.firstElementChild;s.removeChild(a),a=null},V=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let a=s.querySelector("input");s.removeChild(a),a=null},W=(e,t)=>{const s=n.getChecklistTaskElement(e,t),a=s.querySelector(".checklist-complete-section");let c=s.querySelector(".checklist-task-description");a.removeChild(c),c=null},z=(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-input");s.removeChild(a),a=null},Q=(e,t)=>{const s=n.getTaskElement(e).querySelector(".checklist");let a=n.getChecklistTaskElement(e,t);s.removeChild(a),a=null},U=()=>{document.querySelector(".to-do-content").replaceChildren()},X=(()=>{const e=(e,t="New Tab")=>{const s=o(t),a=j.addNewTabToDOM(s);if(c(a),n.checkIfOnlyOneTab()){const e=r();j.setFirstTabToCurrentTab(e)}},t=(e,t="New Task Title",n="Task Due Date",a="Task Description",c="Task Notes",o=!1,i=!1)=>{const l=d(t,n,a,c,o,i),r=j.addNewTaskToDOM(l);return s(r),l},s=e=>{E(e),v(e),I(e),L(e),N(e),w(e)},a=e=>{O(e),q(e),x(e)},c=e=>{h(e),f(e),S(e)};return{addTab:e,insertTabInputElement:e=>{if(!n.checkForExistingInputElement(e,"Tab")){const t=n.getTabIndex(e),s=j.insertTabInputElement(t);M(t),j.setTabInputElementValue(t),C(s)}},updateTab:e=>{if("Enter"===e.code){const t=n.getTabIndex(e),s=n.getNewValue(e);i(t,s);const a=j.insertTabNameElement(t);B(t),S(a)}},removeTab:e=>{const t=n.getTabIndex(e);if(P(t),H(t),n.checkIfWasCurrentTab(e)){const e=r();j.setFirstTabToCurrentTab(e),U(),j.loadTasksFromNewCurrentTab()}},switchTab:e=>{if(!n.checkIfWasCurrentTab(e)){const t=n.getTabIndex(e);l(t),R(),j.setCurrentTabDOM(t),U(),j.loadTasksFromNewCurrentTab()}},newTask:t,removeTask:e=>{const t=n.getTaskIndex(e);$(t),J(t)},insertTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Task")){const t=n.getTaskIndex(e),s=n.getTaskSubcontainerType(e);F(t,s);const a=j.insertTaskInputElement(t,s);j.setTaskInputElementValue(t,s),D(a)}},updateTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getTaskSubcontainerType(e),a=n.getNewValue(e);k(t,s,a),j.insertTaskSubcontentElement(t,s),V(t,s)}},toggleTaskComplete:e=>{const t=n.getTaskIndex(e);u(t),j.toggleTaskDOMComplete(t)},addNewChecklistTask:e=>{const t=n.getTaskIndex(e),s=T(t),c=j.addNewChecklistTaskToDOM(t,s);a(c)},insertChecklistTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Checklist Task")){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);W(t,s);const a=j.insertChecklistTaskInputElement(t,s);j.setChecklistTaskInputElementValue(t,s),A(a)}},updateChecklistTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e),a=n.getNewValue(e);g(t,s,a),j.insertChecklistTaskDescriptionElement(t,s),z(t,s)}},toggleChecklistTaskComplete:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);m(t,s),j.toggleChecklistTaskDOMComplete(t,s)},removeChecklistTask:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);_(t,s),Q(t,s)},toggleTaskPin:e=>{const t=n.getTaskIndex(e);j.toggleAnimations(t,"Enable"),p(t),j.changePinButtonImage(t),j.shiftTaskElementPosition(t)},addTaskListeners:s,addChecklistTaskListeners:a,toggleDisplayTaskDetails:e=>{const t=n.getTaskIndex(e);n.tryingToDoubleClick(t)||(j.toggleAnimations(t,"Disable"),j.toggleDisplayTaskDetails(t),j.rotateChevronButton(t))},addTabListeners:c,loadInitialPage:()=>{e(event,"Instructions");const s=t(event,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!0,!0);j.toggleTaskDOMComplete(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),(e=>{[["If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!0],["Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!0],["Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!0]].forEach((t=>{const s=T(e,t[0],t[1]),n=j.addNewChecklistTaskToDOM(e,s);j.toggleChecklistTaskDOMComplete(e,s),a(n)}))})(s)}}})(),G=e=>{const s=`{\n            "title": "${t.getSpecificChecklistTask(e).getTaskTitle()}",\n            "tasks": {}\n        }`,n=JSON.parse(s),a=localStorage.getItem("to_do_list"),c=JSON.parse(a);c.tabs[`tab_${e}`]=n;const o=JSON.stringify(c);localStorage.setItem("to_do_list",o)},K=(e,s)=>{const n=t.getSpecificChecklistTask(e).getSpecificChecklistTask(s),a=`{\n            "title": "${n.getTaskTitle()}",\n            "due-date": "${n.getTaskDueDate()}",\n            "description": "${n.getTaskDescription()}",\n            "notes": "${n.getTaskNotes()}",\n            "completed": ${n.getCompletedState()},\n            "pinned": ${n.getPinnedState()},\n            "checklist_tasks": {}\n        }`,c=JSON.parse(a),o=localStorage.getItem("to_do_list"),i=JSON.parse(o);i.tabs[`tab_${e}`].tasks[`task_${s}`]=c;const l=JSON.stringify(i);localStorage.setItem("to_do_list",l)},Y=(e,s,n)=>{const a=t.getSpecificChecklistTask(e).getSpecificChecklistTask(s).getSpecificChecklistTask(n),c=`{\n            "description": "${a.getTaskDescription()}",\n            "completed": ${a.getCompletedState()}\n        }`,o=JSON.parse(c),i=localStorage.getItem("to_do_list"),l=JSON.parse(i);l.tabs[`tab_${e}`].tasks[`task_${s}`].checklist_tasks[`checklist_task_${n}`]=o;const r=JSON.stringify(l);localStorage.setItem("to_do_list",r)};b(),h(),f(),j.setDefaultCurrentTabDOM(0),S(),y(),E(),v(),I(),L(),O(),q(),x(),N(),w(),X.loadInitialPage(),G(0),K(0,0),Y(0,0,0),Y(0,0,1),Y(0,0,2),console.log(JSON.parse(localStorage.getItem("to_do_list")))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
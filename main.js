(()=>{"use strict";const e=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},t=(()=>{let s=0;const n=()=>s;let c={getCurrentTabIndex:n,setCurrentTabIndex:e=>{s=e},getCurrentTabObject:()=>{const e=n();return t.getSpecificChecklistTask(e)}};return Object.assign(c,e(c)),c})(),s=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},n=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},s=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>document.querySelector(`[data-task-index='${e}']`);return{checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},getTaskIndex:e=>{const t=(e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t})(e);return t.dataset.taskIndex},getChecklistTaskIndex:e=>s(e).dataset.checklistTaskIndex,getTabIndex:t=>e(t).dataset.tabIndex,getNewValue:e=>e.target.value,getButtonType:e=>{const s=t(e),n=Array.from(s.classList);let c;return n.includes("to-do-title-section")?c="Title":n.includes("to-do-due-date-section")?c="Due Date":n.includes("to-do-description-section")?c="Description":n.includes("to-do-notes-section")&&(c="Notes"),c},getTaskSubcontainerElement:(e,t)=>{const s=n(e);let c;return"Title"===t?c=s.querySelector(".to-do-title-section"):"Due Date"===t?c=s.querySelector(".to-do-due-date-section"):"Description"===t?c=s.querySelector(".to-do-description-section"):"Notes"===t&&(c=s.querySelector(".to-do-notes-section")),c},getTaskElement:n,getChecklistTaskElement:(e,t)=>n(e).querySelector(`[data-checklist-task-index='${t}']`),getTabElement:e=>document.querySelector(`[data-tab-index='${e}']`),checkForExistingInputElement:(n,c)=>{let a;return"Tab"===c?a=e(n).querySelector(".tab-name-input"):"Task"===c?a=t(n).querySelector(".task-input"):"Checklist Task"===c&&(a=s(n).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==a}}})(),c=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},a=(e,t)=>{let s=t;return Object.assign(e,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},o=(n="New Tab")=>{const c=(t=>{let n={};return Object.assign(n,s(n,t),e(n)),n})(n);return t.addTask(c)},i=(e,s)=>{t.getSpecificChecklistTask(e).setTaskTitle(s)},l=e=>{t.setCurrentTabIndex(e)},r=()=>{const e=t.getChecklistTasks();let s;for(const n in e)if(void 0!==e[n])return t.setCurrentTabIndex(n),s=n,s},d=(n="New Task Title",o="Task Due Date",i="Task Description",l="Task Notes",r=!1,d=!1)=>{const k=t.getCurrentTabIndex(),u=t.getSpecificChecklistTask(k),T=((t,n,o,i,l,r)=>{let d={};return Object.assign(d,s(d,t),c(d,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(d,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(d,i),((e,t)=>{let s=t;return Object.assign(e,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,l),a(d,r),e(d)),d})(n,o,i,l,r,d);return u.addTask(T)},k=(e,s,n)=>{const c=t.getCurrentTabObject().getSpecificChecklistTask(e);"Title"===s?c.setTaskTitle(n):"Due Date"===s?c.setTaskDueDate(n):"Description"===s?c.setTaskDescription(n):"Notes"===s&&c.setTaskNotes(n)},u=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).toggleCompletedState()},T=(e,s="Checklist Task Description",n=!1)=>{const o=t.getCurrentTabObject().getSpecificChecklistTask(e),i=((e,t)=>{let s={};return Object.assign(s,c(s,e),a(s,t)),s})(s,n);return o.addTask(i)},g=(e,s,n)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).setTaskDescription(n)},p=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).toggleCompletedState()},m=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).togglePinnedState()},b=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},h=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",G.insertTabInputElement)},C=e=>{e.addEventListener("keydown",G.updateTab)},f=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",G.removeTab)},E=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",G.switchTab)},y=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.newTask)},S=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",G.removeTask)},v=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",G.insertTaskInputElement)},D=e=>{e.addEventListener("keydown",G.updateTask)},I=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",G.toggleTaskComplete)},L=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",G.addNewChecklistTask)},q=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",G.insertChecklistTaskInputElement)},x=e=>{e.addEventListener("keydown",G.updateChecklistTask)},O=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",G.toggleChecklistTaskComplete)},A=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",G.removeChecklistTask)},w=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",G.toggleTaskPin)},N=(e=document)=>{const t=e.querySelectorAll(".to-do-task-change-display");for(const e of t)e.addEventListener("click",G.toggleDisplayTaskDetails)},j=(()=>{const e=e=>{const s=t.getCurrentTabObject().getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),c=document.createElement("div");c.classList.add("to-do-task"),c.dataset.taskIndex=e;const a=s.getTaskTitle(),o=s.getTaskDescription(),i=s.getTaskDueDate(),l=s.getTaskNotes(),r=`to-do-complete-checkbox-${e}`;return c.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',c.querySelector(".to-do-title").textContent=a,c.querySelector(".to-do-due-date").textContent="Due On: "+i,c.querySelector(".to-do-description").textContent="Description: "+o,c.querySelector(".to-do-notes").textContent="Notes: "+l,n.appendChild(c),c.querySelector("label").setAttribute("for",r),c.querySelector(".to-do-complete-checkbox").setAttribute("id",r),c},s=e=>{const s=n.getTaskElement(e),c=s.querySelector(".to-do-complete-checkbox");t.getCurrentTabObject().getSpecificChecklistTask(e).getCompletedState()?(c.checked=!0,s.classList.add("task-completed")):(c.checked=!1,s.classList.remove("task-completed"))},c=(e,s)=>{const c=n.getTaskElement(e).querySelector(".checklist"),a=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s),o=a.getTaskDescription(),i=(a.getCompletedState(),document.createElement("div"));return i.classList.add("checklist-task"),i.dataset.checklistTaskIndex=s,i.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${e}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${e}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,i.querySelector(".checklist-task-description").textContent=o,c.appendChild(i),i},a=(e,s)=>{const c=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),a=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s);c.checked=a.getCompletedState(),a.getCompletedState()?c.classList.add("checklist-task-completed"):c.classList.remove("checklist-task-completed")},o=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,c=s.getSpecificChecklistTask(n),a=e.querySelector(".to-do-pin").querySelector("img");c.getPinnedState()?a.setAttribute("src","./assets/pin-pinned.png"):a.setAttribute("src","./assets/pin-unpinned.png")},i=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,c=s.getSpecificChecklistTask(n),a=document.querySelector(".to-do-content");if(c.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const c of t){if(n<c.dataset.taskIndex){a.insertBefore(e,c);break}c===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}};return{addNewTabToDOM:e=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),c=document.createElement("div"),a=t.getSpecificChecklistTask(e).getTaskTitle();return c.classList.add("tab-title"),c.dataset.tabIndex=e,c.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',c.querySelector(".tab-name").textContent=a,n.insertBefore(c,s),c},setTabInputElementValue:e=>{const s=n.getTabElement(e).querySelector("input"),c=t.getSpecificChecklistTask(e).getTaskTitle();s.value=c},insertTabInputElement:e=>{const t=n.getTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},insertTabNameElement:e=>{const s=n.getTabElement(e),c=t.getSpecificChecklistTask(e).getTaskTitle(),a=document.createElement("button");a.classList.add("switch-tab");const o=document.createElement("h2");return o.classList.add("tab-name"),o.textContent=c,a.appendChild(o),s.insertBefore(a,s.firstChild),s},setDefaultCurrentTabDOM:e=>{const t=n.getTabElement(e);null!==t&&t.setAttribute("id","current-tab")},setCurrentTabDOM:e=>{n.getTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&n.getTabElement(e).setAttribute("id","current-tab")},addNewTaskToDOM:e,insertTaskInputElement:(e,t)=>{const s=n.getTaskSubcontainerElement(e,t),c=document.createElement("input");return c.classList.add("task-input"),c.setAttribute("type","text"),s.insertBefore(c,s.firstChild),c.focus(),c},setTaskInputElementValue:(e,s)=>{const c=n.getTaskSubcontainerElement(e,s).querySelector("input"),a=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;"Title"===s?o=a.getTaskTitle():"Due Date"===s?o=a.getTaskDueDate():"Description"===s?o=a.getTaskDescription():"Notes"===s&&(o=a.getTaskNotes()),c.value=o},insertTaskSubcontentElement:(e,s)=>{const c=n.getTaskSubcontainerElement(e,s),a=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;if("Title"===s){const e=a.getTaskTitle();o=document.createElement("h3"),o.classList.add("to-do-title"),o.textContent=e}else if("Due Date"===s){const e=a.getTaskDueDate();o=document.createElement("p"),o.classList.add("to-do-due-date"),o.textContent="Due On: "+e}else if("Description"===s){const e=a.getTaskDescription();o=document.createElement("p"),o.classList.add("to-do-description"),o.textContent="Description: "+e}else if("Notes"===s){const e=a.getTaskNotes();o=document.createElement("p"),o.classList.add("to-do-notes"),o.textContent="Notes: "+e}c.insertBefore(o,c.firstChild)},toggleTaskDOMComplete:s,addNewChecklistTaskToDOM:c,insertChecklistTaskInputElement:(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section"),c=document.createElement("input");return c.classList.add("checklist-input"),c.setAttribute("type","text"),s.appendChild(c),c.focus(),c},setChecklistTaskInputElementValue:(e,s)=>{const c=n.getChecklistTaskElement(e,s).querySelector(".checklist-input"),a=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription();c.value=a},insertChecklistTaskDescriptionElement:(e,s)=>{const c=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section"),a=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("label");o.setAttribute("for",`checklist-${e}-${s}`),o.classList.add("checklist-task-description"),o.textContent=a,c.appendChild(o)},toggleChecklistTaskDOMComplete:a,changePinButtonImage:e=>{const s=n.getTaskElement(e),c=t.getCurrentTabObject().getSpecificChecklistTask(e),a=s.querySelector(".to-do-pin").querySelector("img");c.getPinnedState()?a.setAttribute("src","./assets/pin-pinned.png"):a.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:e=>{const s=n.getTaskElement(e),c=t.getCurrentTabObject().getSpecificChecklistTask(e),a=s.dataset.taskIndex,o=document.querySelector(".to-do-content");if(c.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)o.insertBefore(s,o.firstElementChild);else{const t=e[e.length-1];for(const n of e){if(a<n.dataset.taskIndex){o.insertBefore(s,n);break}n===t&&t.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const e=Array.from(o.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)o.appendChild(s);else{const t=e[e.length-1];for(const n of e){if(a<n.dataset.taskIndex){o.insertBefore(s,n);break}n===t&&o.appendChild(s,t)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=t.getCurrentTabObject().getChecklistTasks();for(const t in n){const l=n[t];if(void 0!==l){const n=e(t);o(n),i(n),s(t),G.addTaskListeners(n);const r=l.getChecklistTasks();for(const e in r)if(void 0!==r[e]){const s=c(t,e);a(t,e),G.addChecklistTaskListeners(s)}}}},toggleDisplayTaskDetails:e=>{const t=n.getTaskElement(e);[t.querySelector(".to-do-description-section"),t.querySelector(".to-do-notes-section"),t.querySelector(".checklist")].forEach((e=>{Array.from(e.classList).includes("hide-to-do-details")?(e.classList.remove("hide-to-do-details"),e.classList.add("display-to-do-details")):(e.classList.add("hide-to-do-details"),e.classList.remove("display-to-do-details"))}))},rotateChevronButton:e=>{const t=n.getTaskElement(e).querySelector(".to-do-task-change-display").querySelector("img"),s=t.getAttribute("class");null===s||"rotate-hide-task-details"===s?(t.classList.toggle("rotate-hide-task-details",!1),t.classList.add("rotate-display-task-details")):"rotate-display-task-details"===s&&(t.classList.remove("rotate-display-task-details"),t.classList.add("rotate-hide-task-details"))}}})(),P=e=>{t.removeTask(e)},M=e=>{t.getCurrentTabObject().removeTask(e)},B=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).removeTask(s)},H=e=>{const t=n.getTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},R=e=>{const t=n.getTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},V=e=>{let t=n.getTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},$=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},F=e=>{let t=n.getTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},W=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let c=s.firstElementChild;s.removeChild(c),c=null},z=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let c=s.querySelector("input");s.removeChild(c),c=null},J=(e,t)=>{const s=n.getChecklistTaskElement(e,t),c=s.querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-task-description");c.removeChild(a),a=null},Q=(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section");let c=s.querySelector(".checklist-input");s.removeChild(c),c=null},U=(e,t)=>{const s=n.getTaskElement(e).querySelector(".checklist");let c=n.getChecklistTaskElement(e,t);s.removeChild(c),c=null},X=()=>{document.querySelector(".to-do-content").replaceChildren()},G=(()=>{const e=(e,t="New Tab")=>{const s=o(t),c=j.addNewTabToDOM(s);if(a(c),n.checkIfOnlyOneTab()){const e=r();j.setFirstTabToCurrentTab(e)}},t=(e,t="New Task Title",n="Task Due Date",c="Task Description",a="Task Notes",o=!1,i=!1)=>{const l=d(t,n,c,a,o,i),r=j.addNewTaskToDOM(l);return s(r),l},s=e=>{S(e),v(e),I(e),L(e),w(e),N(e)},c=e=>{q(e),O(e),A(e)},a=e=>{h(e),f(e),E(e)};return{addTab:e,insertTabInputElement:e=>{if(!n.checkForExistingInputElement(e,"Tab")){const t=n.getTabIndex(e),s=j.insertTabInputElement(t);H(t),j.setTabInputElementValue(t),C(s)}},updateTab:e=>{if("Enter"===e.code){const t=n.getTabIndex(e),s=n.getNewValue(e);i(t,s);const c=j.insertTabNameElement(t);R(t),E(c)}},removeTab:e=>{const t=n.getTabIndex(e);if(P(t),V(t),n.checkIfWasCurrentTab(e)){const e=r();j.setFirstTabToCurrentTab(e)}},switchTab:e=>{if(!n.checkIfWasCurrentTab(e)){const t=n.getTabIndex(e);l(t),$(),j.setCurrentTabDOM(t),X(),j.loadTasksFromNewCurrentTab()}},newTask:t,removeTask:e=>{const t=n.getTaskIndex(e);M(t),F(t)},insertTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Task")){const t=n.getTaskIndex(e),s=n.getButtonType(e);W(t,s);const c=j.insertTaskInputElement(t,s);j.setTaskInputElementValue(t,s),D(c)}},updateTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getButtonType(e),c=n.getNewValue(e);k(t,s,c),j.insertTaskSubcontentElement(t,s),z(t,s)}},toggleTaskComplete:e=>{const t=n.getTaskIndex(e);u(t),j.toggleTaskDOMComplete(t)},addNewChecklistTask:e=>{const t=n.getTaskIndex(e),s=T(t),a=j.addNewChecklistTaskToDOM(t,s);c(a)},insertChecklistTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Checklist Task")){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);J(t,s);const c=j.insertChecklistTaskInputElement(t,s);j.setChecklistTaskInputElementValue(t,s),x(c)}},updateChecklistTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e),c=n.getNewValue(e);g(t,s,c),j.insertChecklistTaskDescriptionElement(t,s),Q(t,s)}},toggleChecklistTaskComplete:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);p(t,s),j.toggleChecklistTaskDOMComplete(t,s)},removeChecklistTask:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);B(t,s),U(t,s)},toggleTaskPin:e=>{const t=n.getTaskIndex(e);m(t),j.changePinButtonImage(t),j.shiftTaskElementPosition(t)},addTaskListeners:s,addChecklistTaskListeners:c,toggleDisplayTaskDetails:e=>{const t=n.getTaskIndex(e);j.toggleDisplayTaskDetails(t),j.rotateChevronButton(t)},addTabListeners:a,loadInitialPage:()=>{e(event,"Instructions");const s=t(event,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here!\n            Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!0,!0);j.toggleTaskDOMComplete(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),(e=>{[["If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!0],["Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!0],["Organize the different types of tasks in your life by creating themed tabs. \n            Create a new tab by clicking on the plus sign button at the top of the list.\n            Change tabs by clicking on different tab names.",!0]].forEach((t=>{const s=T(e,t[0],t[1]),n=j.addNewChecklistTaskToDOM(e,s);j.toggleChecklistTaskDOMComplete(e,s),c(n)}))})(s)}}})();b(),h(),f(),j.setDefaultCurrentTabDOM(0),E(),y(),S(),v(),I(),L(),q(),O(),A(),w(),N(),G.loadInitialPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
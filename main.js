(()=>{"use strict";const e=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},t=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},s=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},o=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},l=(l,n,a,c)=>{let i={};return Object.assign(i,e(i,l),t(i,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(i,a),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(i,c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(i),s(i),o(i)),i},n=t=>{let s={};return Object.assign(s,e(s,t),o(s)),s},a=(()=>{let e={};return Object.assign(e,o(e)),e})(),c=e=>a.addTask(e),i=(e,t)=>e.addTask(t),g=(e,t)=>e.addTask(t),r=()=>{const e=n("New Tab");return a.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},k=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},T=e=>{const t=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),o=document.createElement("div"),l=a.getSpecificChecklistTask(e).getTaskTitle();return o.classList.add("tab-title"),o.dataset.tabIndex=e,o.innerHTML=`\n            <button class="switch-tab">\n                <h2>${l}</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n            `,s.insertBefore(o,t),o},u=e=>{const t=k(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},p=(e,t)=>{const s=k(e).dataset.tabIndex,o=a.getSpecificChecklistTask(s).getTaskTitle();t.value=o},b=e=>{const t=k(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s},m=e=>"INPUT"===k(e).firstElementChild.tagName,h=e=>{const t=k(e);let s=t.querySelector("input");t.removeChild(s),s=null},C=e=>{const t=k(e),s=t.dataset.tabIndex,o=a.getSpecificChecklistTask(s).getTaskTitle(),l=document.createElement("button");l.classList.add("switch-tab");const n=document.createElement("h2");n.textContent=o,l.appendChild(n),t.insertBefore(l,t.firstChild)},S=()=>{document.querySelector(".add-tab").addEventListener("click",j.addTab)},f=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",j.insertTabInputElement)},D=e=>{e.addEventListener("keydown",j.updateTab)},v=e=>{e.querySelector(".edit-tab").addEventListener("click",j.insertTabInputElement)},E=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",j.removeTab)},y=e=>{const t=k(e).dataset.tabIndex;a.removeTask(t)},j={addTab:()=>{const e=r(),t=T(e);v(t)},insertTabInputElement:e=>{if(!m(e)){const t=b(e);u(e),p(e,t),D(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),C(e),h(e))},removeTab:e=>{y(e)}};let O=(e=>{let o={};return Object.assign(o,t(o,"ddtest"),s(o)),o})();console.log(O),console.log(O.getCompletedState()),O.getCompletedState()?console.log(O.getCompletedState(),"this is now true"):console.log(O.getCompletedState(),"this is still false"),console.log(O.getCompletedState()),console.log(O.toggleCompletedState()),console.log(O.getCompletedState()),O.getCompletedState()?console.log(O.getCompletedState(),"this is now true"):console.log(O.getCompletedState(),"this is still false"),console.log(O.getCompletedState()),console.log(O),console.log(O.getTaskDescription()),O.setTaskDescription("wowwie"),console.log(O.getTaskDescription());let w=l("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(w),console.log(w.getTaskTitle()),console.log(w.getTaskDescription()),console.log(w.getTaskDueDate()),console.log(w.getTaskNotes()),console.log(w.getPinnedState()),console.log(w.getCompletedState()),w.setTaskTitle("Make Chicken Broth"),w.setTaskDescription("requires 1 chicken and 1 broth"),w.setTaskDueDate("before I caught this cold"),w.setTaskNotes("don't sneeze into pot"),w.togglePinnedState(),w.toggleCompletedState(),console.log(w.getTaskTitle()),console.log(w.getTaskDescription()),console.log(w.getTaskDueDate()),console.log(w.getTaskNotes()),console.log(w.getPinnedState()),console.log(w.getCompletedState()),console.log(g(w,O)),console.log(w.getChecklistTasks()),console.log(w.getSpecificChecklistTask(0)),console.log(w.getSpecificChecklistTask(0).getTaskDescription());let I=n("kitchen stuff");console.log(I),console.log(i(I,w)),console.log(I),console.log(I.getChecklistTasks()),console.log(I.getSpecificChecklistTask(0)),console.log(I.getSpecificChecklistTask(0).getTaskTitle());let q=l("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(I),console.log(i(I,q)),console.log(I.getSpecificChecklistTask(1)),console.log(I.getSpecificChecklistTask(1).getTaskTitle()),console.log(c(I)),console.log(a.getChecklistTasks()),console.log(a.getSpecificChecklistTask(0)),console.log(a.getSpecificChecklistTask(0).getTaskTitle()),console.log(a.getChecklistTasks());let L=n("hee hee");console.log(c(L)),console.log(a.getChecklistTasks()),S(),f(),E()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
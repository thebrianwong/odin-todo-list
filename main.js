(()=>{"use strict";const e=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},t=(()=>{let s=0;const n=()=>s;let c={getCurrentTabIndex:n,setCurrentTabIndex:e=>{s=e},getCurrentTabObject:()=>{const e=n();return t.getSpecificChecklistTask(e)}};return Object.assign(c,e(c)),c})(),s=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},n=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},c=e=>{const n=s(e).dataset.taskIndex,c=t.getCurrentTabIndex();return t.getSpecificChecklistTask(c).getSpecificChecklistTask(n)},a=e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t},o=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:s,ensureCorrectSubcontainer:n,checkForTaskSubcontainerInputElement:e=>"INPUT"===n(e).firstElementChild.tagName,getTargetTaskObject:c,ensureCorrectButtonElement:a,getButtonType:e=>{const t=a(e);return Array.from(t.classList)},getSubcontainerType:e=>{const t=n(e);return Array.from(t.classList)},ensureCorrectChecklistElement:e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist");)t=t.parentElement,s=Array.from(t.classList);return t},ensureCorrectChecklistTaskElement:o,checkForChecklistTaskInputElement:e=>null!==o(e).querySelector(".checklist-complete-section").querySelector(".checklist-input"),getTargetChecklistTaskObject:e=>{const t=c(e),s=o(e).dataset.checklistTaskIndex;return t.getSpecificChecklistTask(s)},getTaskIndex:e=>s(e).dataset.taskIndex,getChecklistTaskIndex:e=>o(e).dataset.checklistTaskIndex}})(),c=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},a=(e,t)=>{let s=t;return Object.assign(e,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},o=(e,t)=>{let s={};return Object.assign(s,c(s,e),a(s,t)),s},r=(n="New Tab")=>{const c=(t=>{let n={};return Object.assign(n,s(n,t),e(n)),n})(n);return t.addTask(c)},i=e=>{const s=e.target.parentElement.dataset.tabIndex;t.getSpecificChecklistTask(s).setTaskTitle(e.target.value)},l=e=>{const s=n.ensureCorrectTabElement(e).dataset.tabIndex;t.setCurrentTabIndex(s)},d=()=>{const e=t.getChecklistTasks();let s;for(const n in e)if(void 0!==e[n])return t.setCurrentTabIndex(n),s=n,s},k=(n="New Task Title",o="Task Due Date",r="Task Description",i="Task Notes",l=!1,d=!1)=>{const k=t.getCurrentTabIndex(),u=t.getSpecificChecklistTask(k),T=((t,n,o,r,i,l)=>{let d={};return Object.assign(d,s(d,t),c(d,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(d,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(d,r),((e,t)=>{let s=t;return Object.assign(e,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,i),a(d,l),e(d)),d})(n,o,r,i,l,d);return u.addTask(T)},u=e=>{const t=n.getTargetTaskObject(e),s=e.target.value,c=n.getSubcontainerType(e);return c.includes("to-do-title-section")?t.setTaskTitle(s):c.includes("to-do-due-date-section")?t.setTaskDueDate(s):c.includes("to-do-description-section")?t.setTaskDescription(s):c.includes("to-do-notes-section")?t.setTaskNotes(s):void 0},T=e=>{n.getTargetTaskObject(e).toggleCompletedState()},m=e=>{const t=n.getTargetTaskObject(e),s=o("Checklist Task Description");return t.addTask(s)},b=e=>{const t=n.getTargetChecklistTaskObject(e),s=e.target.value;t.setTaskDescription(s)},p=e=>{n.getTargetChecklistTaskObject(e).toggleCompletedState()},h=e=>{n.getTargetTaskObject(e).togglePinnedState()},g=(e,s,n)=>{const c=t.getCurrentTabObject().getSpecificChecklistTask(e),a=o(s,n);return c.addTask(a)},C=()=>{document.querySelector(".add-tab").addEventListener("click",Y.addTab)},f=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",Y.insertTabInputElement)},E=e=>{e.addEventListener("keydown",Y.updateTab)},y=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",Y.removeTab)},S=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",Y.switchTab)},v=()=>{document.querySelector(".new-to-do-task").addEventListener("click",Y.newTask)},I=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",Y.removeTask)},L=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",Y.insertTaskInputElement)},D=e=>{e.addEventListener("keydown",Y.updateTask)},x=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",Y.toggleTaskComplete)},O=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",Y.addNewChecklistTask)},q=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",Y.insertChecklistTaskInputElement)},A=e=>{e.addEventListener("keydown",Y.updateChecklistTask)},w=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",Y.toggleChecklistTaskComplete)},j=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",Y.removeChecklistTask)},N=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",Y.toggleTaskPin)},P=(e=document)=>{const t=e.querySelectorAll(".to-do-task-change-display");for(const e of t)e.addEventListener("click",Y.toggleDisplayTaskDetails)},$=(()=>{const e=e=>{const s=t.getCurrentTabObject().getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),c=document.createElement("div");c.classList.add("to-do-task"),c.dataset.taskIndex=e;const a=s.getTaskTitle(),o=s.getTaskDescription(),r=s.getTaskDueDate(),i=s.getTaskNotes(),l=`to-do-complete-checkbox-${e}`;return c.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',c.querySelector(".to-do-title").textContent=a,c.querySelector(".to-do-due-date").textContent="Due On: "+r,c.querySelector(".to-do-description").textContent="Description: "+o,c.querySelector(".to-do-notes").textContent="Notes: "+i,n.appendChild(c),c.querySelector("label").setAttribute("for",l),c.querySelector(".to-do-complete-checkbox").setAttribute("id",l),c},s=e=>{const s=e.querySelector(".checklist"),n=e.dataset.taskIndex,c=t.getCurrentTabObject().getSpecificChecklistTask(n).getChecklistTasks();for(const e in c)if(void 0!==c[e]){const t=c[e],a=t.getTaskDescription(),o=t.getCompletedState(),r=document.createElement("div");r.classList.add("checklist-task"),r.dataset.checklistTaskIndex=e,r.innerHTML=`\n                    <div class="checklist-complete-section">\n                        <input type="checkbox" id="checklist-${n}-${e}" class="checklist-complete-checkbox">\n                        <label for="checklist-${n}-${e}" class="checklist-task-description">\n                            DESCRIPTION PLACEHOLDER\n                        </label>\n                    </div>\n                    <button class="edit-checklist-task" type="button">\n                        <img src="assets/pencil.png" alt="Edit checklist task button">\n                    </button>\n                    <button class="remove-checklist-task" type="button">\n                        <img src="assets/close.png" alt="Edit checklist task button">\n                    </button>\n                `,r.querySelector(".checklist-task-description").textContent=a;r.querySelector(`#checklist-${n}-${e}`).checked=!!o,s.appendChild(r),Y.addChecklistTaskListeners(s)}},c=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,c=s.getSpecificChecklistTask(n),a=e.querySelector(".to-do-pin").querySelector("img");c.getPinnedState()?a.setAttribute("src","./assets/pin-pinned.png"):a.setAttribute("src","./assets/pin-unpinned.png")},a=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,c=s.getSpecificChecklistTask(n),a=document.querySelector(".to-do-content");if(c.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const c of t){if(n<c.dataset.taskIndex){a.insertBefore(e,c);break}c===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}};return{addNewTabToDOM:e=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),c=document.createElement("div"),a=t.getSpecificChecklistTask(e).getTaskTitle();return c.classList.add("tab-title"),c.dataset.tabIndex=e,c.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',c.querySelector(".tab-name").textContent=a,n.insertBefore(c,s),c},setTabInputElementValue:(e,s)=>{const c=n.ensureCorrectTabElement(e).dataset.tabIndex,a=t.getSpecificChecklistTask(c).getTaskTitle();s.value=a},insertTabInputElement:e=>{const t=n.ensureCorrectTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},insertTabNameElement:e=>{const s=n.ensureCorrectTabElement(e),c=s.dataset.tabIndex,a=t.getSpecificChecklistTask(c).getTaskTitle(),o=document.createElement("button");o.classList.add("switch-tab");const r=document.createElement("h2");return r.classList.add("tab-name"),r.textContent=a,o.appendChild(r),s.insertBefore(o,s.firstChild),s},setDefaultCurrentTabDOM:e=>{const t=document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`);null!==t&&t.setAttribute("id","current-tab")},setCurrentTabDOM:e=>{n.ensureCorrectTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},addNewTaskToDOM:e,insertTaskInputElement:e=>{const t=n.ensureCorrectSubcontainer(e),s=document.createElement("input");return s.classList.add("task-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},setTaskInputElementValue:(e,t)=>{const s=n.getTargetTaskObject(e),c=n.getButtonType(e);let a;c.includes("edit-task-title")?a=s.getTaskTitle():c.includes("edit-task-due-date")?a=s.getTaskDueDate():c.includes("edit-task-description")?a=s.getTaskDescription():c.includes("edit-task-notes")&&(a=s.getTaskNotes()),t.value=a},insertTaskSubcontentElement:e=>{const t=n.ensureCorrectSubcontainer(e),s=n.getTargetTaskObject(e),c=n.getSubcontainerType(e);let a;if(c.includes("to-do-title-section")){const e=s.getTaskTitle();a=document.createElement("h3"),a.classList.add("to-do-title"),a.textContent=e}else if(c.includes("to-do-due-date-section")){const e=s.getTaskDueDate();a=document.createElement("p"),a.classList.add("to-do-due-date"),a.textContent="Due On: "+e}else if(c.includes("to-do-description-section")){const e=s.getTaskDescription();a=document.createElement("p"),a.classList.add("to-do-description"),a.textContent="Description: "+e}else if(c.includes("to-do-notes-section")){const e=s.getTaskNotes();a=document.createElement("p"),a.classList.add("to-do-notes"),a.textContent="Notes: "+e}t.insertBefore(a,t.firstChild)},toggleTaskDOMComplete:e=>{const s=document.querySelector(`[data-task-index='${e}']`),n=s.querySelector(".to-do-complete-checkbox");t.getCurrentTabObject().getSpecificChecklistTask(e).getCompletedState()?(n.checked=!0,s.classList.add("task-completed")):(n.checked=!1,s.classList.remove("task-completed"))},addNewChecklistTaskToDOM:(e,t)=>{const s=n.ensureCorrectChecklistElement(e),c=n.ensureCorrectTaskElement(e).dataset.taskIndex,a=n.getTargetTaskObject(e).getSpecificChecklistTask(t),o=a.getTaskDescription(),r=a.getCompletedState(),i=document.createElement("div");i.classList.add("checklist-task"),i.dataset.checklistTaskIndex=t,i.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${c}-${t}" class="checklist-complete-checkbox">\n                <label for="checklist-${c}-${t}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,i.querySelector(".checklist-task-description").textContent=o;return i.querySelector(`#checklist-${c}-${t}`).checked=!!r,s.appendChild(i),i},insertChecklistTaskInputElement:e=>{const t=n.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section"),s=document.createElement("input");return s.classList.add("checklist-input"),s.setAttribute("type","text"),t.appendChild(s),s.focus(),s},setChecklistTaskInputElementValue:(e,t)=>{const s=n.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex,c=n.getTargetTaskObject(e).getSpecificChecklistTask(s).getTaskDescription();t.value=c},insertChecklistTaskDescriptionElement:e=>{const t=n.ensureCorrectChecklistTaskElement(e),s=t.dataset.checklistTaskIndex,c=t.querySelector(".checklist-complete-section"),a=n.ensureCorrectTaskElement(e).dataset.taskIndex,o=n.getTargetChecklistTaskObject(e).getTaskDescription(),r=document.createElement("label");r.setAttribute("for",`checklist-${a}-${s}`),r.classList.add("checklist-task-description"),r.textContent=o,c.appendChild(r)},toggleChecklistTaskDOMComplete:(e,s)=>{const n=document.querySelector(`[data-task-index='${e}']`).querySelector(`[data-checklist-task-index='${s}']`).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s);n.checked=c.getCompletedState(),c.getCompletedState()?n.classList.add("checklist-task-completed"):n.classList.remove("checklist-task-completed")},changePinButtonImage:e=>{const s=document.querySelector(`[data-task-index='${e}']`),n=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.querySelector(".to-do-pin").querySelector("img");n.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:e=>{const s=document.querySelector(`[data-task-index='${e}']`),n=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.dataset.taskIndex,a=document.querySelector(".to-do-content");if(n.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)a.insertBefore(s,a.firstElementChild);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){a.insertBefore(s,n);break}n===t&&t.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const e=Array.from(a.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)a.appendChild(s);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){a.insertBefore(s,n);break}n===t&&a.appendChild(s,t)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=t.getCurrentTabObject().getChecklistTasks();for(const t in n)if(void 0!==n[t]){const n=e(t);Y.addTaskListeners(n),c(n),a(n),s(n)}},toggleDisplayTaskDetails:e=>{const t=n.ensureCorrectTaskElement(e);[t.querySelector(".to-do-description-section"),t.querySelector(".to-do-notes-section"),t.querySelector(".checklist")].forEach((e=>{Array.from(e.classList).includes("hide-to-do-details")?(e.classList.remove("hide-to-do-details"),e.classList.add("display-to-do-details")):(e.classList.add("hide-to-do-details"),e.classList.remove("display-to-do-details"))}))},rotateChevronButton:e=>{const t=n.ensureCorrectButtonElement(e).querySelector("img"),s=t.getAttribute("class");null===s||"rotate-hide-task-details"===s?(t.classList.toggle("rotate-hide-task-details",!1),t.classList.add("rotate-display-task-details")):"rotate-display-task-details"===s&&(t.classList.remove("rotate-display-task-details"),t.classList.add("rotate-hide-task-details"))},loadInstructionsChecklistTaskElement:(e,s)=>{const n=document.querySelector(`[data-task-index='${e}'`).querySelector(".checklist"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s),a=c.getTaskDescription(),o=c.getCompletedState(),r=document.createElement("div");r.classList.add("checklist-task"),r.dataset.checklistTaskIndex=s,r.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${e}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${e}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,r.querySelector(".checklist-task-description").textContent=a;return r.querySelector(`#checklist-${e}-${s}`).checked=!!o,n.appendChild(r),r}}})(),M=e=>{const s=n.ensureCorrectTabElement(e).dataset.tabIndex;t.removeTask(s)},B=e=>{const s=n.ensureCorrectTaskElement(e).dataset.taskIndex;t.getCurrentTabObject().removeTask(s)},H=e=>{const t=n.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex;n.getTargetTaskObject(e).removeTask(t)},R=e=>{const t=n.ensureCorrectTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},F=e=>{const t=n.ensureCorrectTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},V=e=>{let t=n.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},U=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},W=e=>{let t=n.ensureCorrectTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},z=e=>{const t=n.ensureCorrectSubcontainer(e);let s=t.firstElementChild;t.removeChild(s),s=null},J=e=>{const t=n.ensureCorrectSubcontainer(e);let s=t.querySelector("input");t.removeChild(s),s=null},Q=e=>{const t=n.ensureCorrectButtonElement(e).previousElementSibling;let s=t.querySelector("label");t.removeChild(s),s=null},X=e=>{const t=n.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section");let s=t.querySelector(".checklist-input");t.removeChild(s),s=null},G=e=>{let t=n.ensureCorrectChecklistTaskElement(e);n.ensureCorrectChecklistElement(e).removeChild(t),t=null},K=()=>{document.querySelector(".to-do-content").replaceChildren()},Y=(()=>{const e=(e,t="New Tab")=>{const s=r(t),c=$.addNewTabToDOM(s);if(a(c),n.checkIfOnlyOneTab()){const e=d();$.setFirstTabToCurrentTab(e)}},t=(e,t="New Task Title",n="Task Due Date",c="Task Description",a="Task Notes",o=!1,r=!1)=>{const i=k(t,n,c,a,o,r),l=$.addNewTaskToDOM(i);return s(l),i},s=e=>{I(e),L(e),x(e),O(e),N(e),P(e)},c=e=>{q(e),w(e),j(e)},a=e=>{f(e),y(e),S(e)};return{addTab:e,insertTabInputElement:e=>{if(!n.checkForTabInputElement(e)){const t=$.insertTabInputElement(e);R(e),$.setTabInputElementValue(e,t),E(t)}},updateTab:e=>{if("Enter"===e.code){i(e);const t=$.insertTabNameElement(e);F(e),S(t)}},removeTab:e=>{if(M(e),V(e),n.checkIfWasCurrentTab(e)){const e=d();$.setFirstTabToCurrentTab(e)}},switchTab:e=>{n.checkIfWasCurrentTab(e)||(l(e),U(),$.setCurrentTabDOM(e),K(),$.loadTasksFromNewCurrentTab())},newTask:t,removeTask:e=>{B(e),W(e)},insertTaskInputElement:e=>{if(!n.checkForTaskSubcontainerInputElement(e)){z(e);const t=$.insertTaskInputElement(e);$.setTaskInputElementValue(e,t),D(t)}},updateTask:e=>{"Enter"===e.code&&(u(e),$.insertTaskSubcontentElement(e),J(e))},toggleTaskComplete:e=>{const t=n.getTaskIndex(e);T(e),$.toggleTaskDOMComplete(t)},addNewChecklistTask:e=>{const t=m(e),s=$.addNewChecklistTaskToDOM(e,t);c(s)},insertChecklistTaskInputElement:e=>{if(!n.checkForChecklistTaskInputElement(e)){Q(e);const t=$.insertChecklistTaskInputElement(e);$.setChecklistTaskInputElementValue(e,t),A(t)}},updateChecklistTask:e=>{"Enter"===e.code&&(b(e),$.insertChecklistTaskDescriptionElement(e),X(e))},toggleChecklistTaskComplete:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);p(e),$.toggleChecklistTaskDOMComplete(t,s)},removeChecklistTask:e=>{H(e),G(e)},toggleTaskPin:e=>{const t=n.getTaskIndex(e);h(e),$.changePinButtonImage(t),$.shiftTaskElementPosition(t)},addTaskListeners:s,addChecklistTaskListeners:c,toggleDisplayTaskDetails:e=>{$.toggleDisplayTaskDetails(e),$.rotateChevronButton(e)},addTabListeners:a,loadInitialPage:()=>{e(event,"Instructions");const s=t(event,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here!\n            Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!1,!1);$.toggleTaskDOMComplete(s),(e=>{[["If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!1],["Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!1],["Organize the different types of tasks in your life by creating themed tabs. \n            Create a new tab by clicking on the plus sign button at the top of the list.\n            Change tabs by clicking on different tab names.",!1]].forEach((t=>{const s=g(e,t[0],t[1]),n=$.loadInstructionsChecklistTaskElement(e,s);$.toggleChecklistTaskDOMComplete(e,s),c(n)}))})(s)}}})();C(),f(),y(),$.setDefaultCurrentTabDOM(0),S(),v(),I(),L(),x(),O(),q(),w(),j(),N(),P(),Y.loadInitialPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
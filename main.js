(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})},t=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},o=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},s=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},l=(l,n,a,c)=>{let i={};return Object.assign(i,e(i,l),t(i,n),((e,t)=>{let o=t;return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(i,a),((e,t)=>{let o=t;return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(i,c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(i),o(i),s(i)),i},n=t=>{let o={};return Object.assign(o,e(o,t),s(o)),o},a=(()=>{let e={};return Object.assign(e,s(e)),e})(),c=e=>a.addTask(e),i=(e,t)=>e.addTask(t),g=(e,t)=>e.addTask(t),r=()=>{const e=n("New Tab");return a.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},k=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},T=e=>{const t=document.querySelector(".add-tab"),o=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),l=a.getSpecificChecklistTask(e).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=e,s.innerHTML=`\n            <button class="switch-tab">\n                <h2>${l}</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n            `,o.insertBefore(s,t),s},u=e=>{const t=k(e);let o=t.querySelector(".switch-tab");t.removeChild(o),o=null},p=(e,t)=>{const o=k(e).dataset.tabIndex,s=a.getSpecificChecklistTask(o).getTaskTitle();t.value=s},b=e=>{const t=k(e),o=document.createElement("input");return o.classList.add("tab-name-input"),o.setAttribute("type","text"),t.insertBefore(o,t.firstChild),o},m=e=>"INPUT"===k(e).firstElementChild.tagName,h=e=>{const t=k(e);let o=t.querySelector("input");t.removeChild(o),o=null},C=e=>{const t=k(e),o=t.dataset.tabIndex,s=a.getSpecificChecklistTask(o).getTaskTitle(),l=document.createElement("button");l.classList.add("switch-tab");const n=document.createElement("h2");n.textContent=s,l.appendChild(n),t.insertBefore(l,t.firstChild)},S=e=>{let t=k(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},f=()=>{document.querySelector(".add-tab").addEventListener("click",O.addTab)},v=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",O.insertTabInputElement)},D=e=>{e.addEventListener("keydown",O.updateTab)},E=e=>{e.querySelector(".edit-tab").addEventListener("click",O.insertTabInputElement)},y=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",O.removeTab)},j=e=>{e.querySelector(".remove-tab").addEventListener("click",O.removeTab)},q=e=>{const t=k(e).dataset.tabIndex;a.removeTask(t)},O={addTab:()=>{const e=r(),t=T(e);E(t),j(t)},insertTabInputElement:e=>{if(!m(e)){const t=b(e);u(e),p(e,t),D(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),C(e),h(e))},removeTab:e=>{q(e),S(e)}};let w=(e=>{let s={};return Object.assign(s,t(s,"ddtest"),o(s)),s})();console.log(w),console.log(w.getCompletedState()),w.getCompletedState()?console.log(w.getCompletedState(),"this is now true"):console.log(w.getCompletedState(),"this is still false"),console.log(w.getCompletedState()),console.log(w.toggleCompletedState()),console.log(w.getCompletedState()),w.getCompletedState()?console.log(w.getCompletedState(),"this is now true"):console.log(w.getCompletedState(),"this is still false"),console.log(w.getCompletedState()),console.log(w),console.log(w.getTaskDescription()),w.setTaskDescription("wowwie"),console.log(w.getTaskDescription());let I=l("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(I),console.log(I.getTaskTitle()),console.log(I.getTaskDescription()),console.log(I.getTaskDueDate()),console.log(I.getTaskNotes()),console.log(I.getPinnedState()),console.log(I.getCompletedState()),I.setTaskTitle("Make Chicken Broth"),I.setTaskDescription("requires 1 chicken and 1 broth"),I.setTaskDueDate("before I caught this cold"),I.setTaskNotes("don't sneeze into pot"),I.togglePinnedState(),I.toggleCompletedState(),console.log(I.getTaskTitle()),console.log(I.getTaskDescription()),console.log(I.getTaskDueDate()),console.log(I.getTaskNotes()),console.log(I.getPinnedState()),console.log(I.getCompletedState()),console.log(g(I,w)),console.log(I.getChecklistTasks()),console.log(I.getSpecificChecklistTask(0)),console.log(I.getSpecificChecklistTask(0).getTaskDescription());let L=n("kitchen stuff");console.log(L),console.log(i(L,I)),console.log(L),console.log(L.getChecklistTasks()),console.log(L.getSpecificChecklistTask(0)),console.log(L.getSpecificChecklistTask(0).getTaskTitle());let N=l("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(L),console.log(i(L,N)),console.log(L.getSpecificChecklistTask(1)),console.log(L.getSpecificChecklistTask(1).getTaskTitle()),console.log(c(L)),console.log(a.getChecklistTasks()),console.log(a.getSpecificChecklistTask(0)),console.log(a.getSpecificChecklistTask(0).getTaskTitle()),console.log(a.getChecklistTasks());let x=n("hee hee");console.log(c(x)),console.log(a.getChecklistTasks()),f(),v(),y()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
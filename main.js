(()=>{"use strict";const e=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},t=(()=>{let s=0;const n=()=>s;let a={getCurrentTabIndex:n,setCurrentTabIndex:e=>{s=e},getCurrentTabObject:()=>{const e=n();return t.getSpecificChecklistTask(e)}};return Object.assign(a,e(a)),a})(),s=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},n=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},s=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>document.querySelector(`[data-task-index='${e}']`);return{checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},getTaskIndex:e=>{const t=(e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t})(e);return t.dataset.taskIndex},getChecklistTaskIndex:e=>s(e).dataset.checklistTaskIndex,getTabIndex:t=>e(t).dataset.tabIndex,getNewValue:e=>e.target.value,getTaskSubcontainerType:e=>{const s=t(e),n=Array.from(s.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(e,t)=>{const s=n(e);let a;return"Title"===t?a=s.querySelector(".to-do-title-section"):"Due Date"===t?a=s.querySelector(".to-do-due-date-section"):"Description"===t?a=s.querySelector(".to-do-description-section"):"Notes"===t&&(a=s.querySelector(".to-do-notes-section")),a},getTaskElement:n,getChecklistTaskElement:(e,t)=>n(e).querySelector(`[data-checklist-task-index='${t}']`),getTabElement:e=>document.querySelector(`[data-tab-index='${e}']`),checkForExistingInputElement:(n,a)=>{let o;return"Tab"===a?o=e(n).querySelector(".tab-name-input"):"Task"===a?o=t(n).querySelector(".task-input"):"Checklist Task"===a&&(o=s(n).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==o}}})(),a=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},o=(e,t)=>{let s=t;return Object.assign(e,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},c=(n="New Tab")=>{const a=(t=>{let n={};return Object.assign(n,s(n,t),e(n)),n})(n);return t.addTask(a)},i=(e,s)=>{t.getSpecificChecklistTask(e).setTaskTitle(s)},l=e=>{t.setCurrentTabIndex(e)},r=()=>{const e=t.getChecklistTasks();let s;for(const n in e)if(void 0!==e[n])return t.setCurrentTabIndex(n),s=n,s},d=(n="New Task Title",c="Task Due Date",i="Task Description",l="Task Notes",r=!1,d=!1)=>{const k=t.getCurrentTabIndex(),u=t.getSpecificChecklistTask(k),T=((t,n,c,i,l,r)=>{let d={};return Object.assign(d,s(d,t),a(d,c),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(d,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(d,i),((e,t)=>{let s=t;return Object.assign(e,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,l),o(d,r),e(d)),d})(n,c,i,l,r,d);return u.addTask(T)},k=(e,s,n)=>{const a=t.getCurrentTabObject().getSpecificChecklistTask(e);"Title"===s?a.setTaskTitle(n):"Due Date"===s?a.setTaskDueDate(n):"Description"===s?a.setTaskDescription(n):"Notes"===s&&a.setTaskNotes(n)},u=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).toggleCompletedState()},T=(e,s="Checklist Task Description",n=!1)=>{const c=t.getCurrentTabObject().getSpecificChecklistTask(e),i=((e,t)=>{let s={};return Object.assign(s,a(s,e),o(s,t)),s})(s,n);return c.addTask(i)},g=(e,s,n)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).setTaskDescription(n)},m=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).toggleCompletedState()},p=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).togglePinnedState()},b=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},h=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",G.insertTabInputElement)},C=e=>{e.addEventListener("keydown",G.updateTab)},f=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",G.removeTab)},E=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",G.switchTab)},y=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.newTask)},S=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",G.removeTask)},v=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",G.insertTaskInputElement)},D=e=>{e.addEventListener("keydown",G.updateTask)},L=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",G.toggleTaskComplete)},I=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",G.addNewChecklistTask)},q=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",G.insertChecklistTaskInputElement)},A=e=>{e.addEventListener("keydown",G.updateChecklistTask)},x=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",G.toggleChecklistTaskComplete)},O=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",G.removeChecklistTask)},w=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",G.toggleTaskPin)},N=(e=document)=>{const t=e.querySelectorAll(".to-do-task-change-display");for(const e of t)e.addEventListener("click",G.toggleDisplayTaskDetails)},j=(()=>{const e=e=>{const s=t.getCurrentTabObject().getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),a=document.createElement("div");a.classList.add("to-do-task"),a.dataset.taskIndex=e;const o=s.getTaskTitle(),c=s.getTaskDescription(),i=s.getTaskDueDate(),l=s.getTaskNotes(),r=`to-do-complete-checkbox-${e}`;return a.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',a.querySelector(".to-do-title").textContent=o,a.querySelector(".to-do-due-date").textContent="Due On: "+i,a.querySelector(".to-do-description").textContent="Description: "+c,a.querySelector(".to-do-notes").textContent="Notes: "+l,n.appendChild(a),a.querySelector("label").setAttribute("for",r),a.querySelector(".to-do-complete-checkbox").setAttribute("id",r),a},s=e=>{const s=n.getTaskElement(e),a=s.querySelector(".to-do-complete-checkbox");t.getCurrentTabObject().getSpecificChecklistTask(e).getCompletedState()?(a.checked=!0,s.classList.add("task-completed")):(a.checked=!1,s.classList.remove("task-completed"))},a=(e,s)=>{const a=n.getTaskElement(e).querySelector(".checklist"),o=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s),c=o.getTaskDescription(),i=(o.getCompletedState(),document.createElement("div"));return i.classList.add("checklist-task"),i.dataset.checklistTaskIndex=s,i.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${e}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${e}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,i.querySelector(".checklist-task-description").textContent=c,a.appendChild(i),i},o=(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),o=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s);a.checked=o.getCompletedState(),o.getCompletedState()?a.classList.add("checklist-task-completed"):a.classList.remove("checklist-task-completed")},c=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,a=s.getSpecificChecklistTask(n),o=e.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?o.setAttribute("src","./assets/pin-pinned.png"):o.setAttribute("src","./assets/pin-unpinned.png")},i=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,a=s.getSpecificChecklistTask(n),o=document.querySelector(".to-do-content");if(a.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)o.insertBefore(e,o.firstElementChild);else{const s=t[t.length-1];for(const a of t){if(n<a.dataset.taskIndex){o.insertBefore(e,a);break}a===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}};return{addNewTabToDOM:e=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),a=document.createElement("div"),o=t.getSpecificChecklistTask(e).getTaskTitle();return a.classList.add("tab-title"),a.dataset.tabIndex=e,a.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',a.querySelector(".tab-name").textContent=o,n.insertBefore(a,s),a},setTabInputElementValue:e=>{const s=n.getTabElement(e).querySelector("input"),a=t.getSpecificChecklistTask(e).getTaskTitle();s.value=a},insertTabInputElement:e=>{const t=n.getTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},insertTabNameElement:e=>{const s=n.getTabElement(e),a=t.getSpecificChecklistTask(e).getTaskTitle(),o=document.createElement("button");o.classList.add("switch-tab");const c=document.createElement("h2");return c.classList.add("tab-name"),c.textContent=a,o.appendChild(c),s.insertBefore(o,s.firstChild),s},setDefaultCurrentTabDOM:e=>{const t=n.getTabElement(e);null!==t&&t.setAttribute("id","current-tab")},setCurrentTabDOM:e=>{n.getTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&n.getTabElement(e).setAttribute("id","current-tab")},addNewTaskToDOM:e,insertTaskInputElement:(e,t)=>{const s=n.getTaskSubcontainerElement(e,t),a=document.createElement("input");return a.classList.add("task-input"),a.setAttribute("type","text"),s.insertBefore(a,s.firstChild),a.focus(),a},setTaskInputElementValue:(e,s)=>{const a=n.getTaskSubcontainerElement(e,s).querySelector("input"),o=t.getCurrentTabObject().getSpecificChecklistTask(e);let c;"Title"===s?c=o.getTaskTitle():"Due Date"===s?c=o.getTaskDueDate():"Description"===s?c=o.getTaskDescription():"Notes"===s&&(c=o.getTaskNotes()),a.value=c},insertTaskSubcontentElement:(e,s)=>{const a=n.getTaskSubcontainerElement(e,s),o=t.getCurrentTabObject().getSpecificChecklistTask(e);let c;if("Title"===s){const e=o.getTaskTitle();c=document.createElement("h3"),c.classList.add("to-do-title"),c.textContent=e}else if("Due Date"===s){const e=o.getTaskDueDate();c=document.createElement("p"),c.classList.add("to-do-due-date"),c.textContent="Due On: "+e}else if("Description"===s){const e=o.getTaskDescription();c=document.createElement("p"),c.classList.add("to-do-description"),c.textContent="Description: "+e}else if("Notes"===s){const e=o.getTaskNotes();c=document.createElement("p"),c.classList.add("to-do-notes"),c.textContent="Notes: "+e}a.insertBefore(c,a.firstChild)},toggleTaskDOMComplete:s,addNewChecklistTaskToDOM:a,insertChecklistTaskInputElement:(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section"),a=document.createElement("input");return a.classList.add("checklist-input"),a.setAttribute("type","text"),s.appendChild(a),a.focus(),a},setChecklistTaskInputElementValue:(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-input"),o=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription();a.value=o},insertChecklistTaskDescriptionElement:(e,s)=>{const a=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section"),o=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),c=document.createElement("label");c.setAttribute("for",`checklist-${e}-${s}`),c.classList.add("checklist-task-description"),c.textContent=o,a.appendChild(c)},toggleChecklistTaskDOMComplete:o,changePinButtonImage:e=>{const s=n.getTaskElement(e),a=t.getCurrentTabObject().getSpecificChecklistTask(e),o=s.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?o.setAttribute("src","./assets/pin-pinned.png"):o.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:e=>{const s=n.getTaskElement(e),a=t.getCurrentTabObject().getSpecificChecklistTask(e),o=s.dataset.taskIndex,c=document.querySelector(".to-do-content");if(a.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)c.insertBefore(s,c.firstElementChild);else{const t=e[e.length-1];for(const n of e){if(o<n.dataset.taskIndex){c.insertBefore(s,n);break}n===t&&t.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const e=Array.from(c.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)c.appendChild(s);else{const t=e[e.length-1];for(const n of e){if(o<n.dataset.taskIndex){c.insertBefore(s,n);break}n===t&&c.appendChild(s,t)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=t.getCurrentTabObject().getChecklistTasks();for(const t in n){const l=n[t];if(void 0!==l){const n=e(t);c(n),i(n),s(t),G.addTaskListeners(n);const r=l.getChecklistTasks();for(const e in r)if(void 0!==r[e]){const s=a(t,e);o(t,e),G.addChecklistTaskListeners(s)}}}},toggleDisplayTaskDetails:e=>{const t=n.getTaskElement(e);Array.from(t.querySelectorAll(".animation-target")).forEach((e=>{Array.from(e.classList).includes("hide-to-do-details")?(e.classList.remove("hide-to-do-details"),e.classList.add("display-to-do-details"),e.style.display="flex"):(e.classList.add("hide-to-do-details"),e.classList.remove("display-to-do-details"),setTimeout((()=>{e.style.display="none"}),1e3))}))},rotateChevronButton:e=>{const t=n.getTaskElement(e).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(t.classList);0===s.length||s.includes("rotate-hide-task-details")?(t.classList.remove("rotate-hide-task-details"),t.classList.add("rotate-display-task-details"),t.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(t.classList.remove("rotate-display-task-details"),t.classList.add("rotate-hide-task-details"),t.classList.remove("rotated-chevron"))},toggleAnimations:(e,t)=>{const s=n.getTaskElement(e),a=s.querySelector(".to-do-task-change-display").querySelector("img"),o=Array.from(s.querySelectorAll(".animation-target"));o.push(a),o.forEach((e=>{"Enable"===t?e.classList.add("no-animations"):"Disable"===t&&e.classList.remove("no-animations")}))}}})(),P=e=>{t.removeTask(e)},M=e=>{t.getCurrentTabObject().removeTask(e)},B=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).removeTask(s)},H=e=>{const t=n.getTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},R=e=>{const t=n.getTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},F=e=>{let t=n.getTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},V=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},$=e=>{let t=n.getTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},W=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let a=s.firstElementChild;s.removeChild(a),a=null},z=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let a=s.querySelector("input");s.removeChild(a),a=null},J=(e,t)=>{const s=n.getChecklistTaskElement(e,t),a=s.querySelector(".checklist-complete-section");let o=s.querySelector(".checklist-task-description");a.removeChild(o),o=null},Q=(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-input");s.removeChild(a),a=null},U=(e,t)=>{const s=n.getTaskElement(e).querySelector(".checklist");let a=n.getChecklistTaskElement(e,t);s.removeChild(a),a=null},X=()=>{document.querySelector(".to-do-content").replaceChildren()},G=(()=>{const e=(e,t="New Tab")=>{const s=c(t),a=j.addNewTabToDOM(s);if(o(a),n.checkIfOnlyOneTab()){const e=r();j.setFirstTabToCurrentTab(e)}},t=(e,t="New Task Title",n="Task Due Date",a="Task Description",o="Task Notes",c=!1,i=!1)=>{const l=d(t,n,a,o,c,i),r=j.addNewTaskToDOM(l);return s(r),l},s=e=>{S(e),v(e),L(e),I(e),w(e),N(e)},a=e=>{q(e),x(e),O(e)},o=e=>{h(e),f(e),E(e)};return{addTab:e,insertTabInputElement:e=>{if(!n.checkForExistingInputElement(e,"Tab")){const t=n.getTabIndex(e),s=j.insertTabInputElement(t);H(t),j.setTabInputElementValue(t),C(s)}},updateTab:e=>{if("Enter"===e.code){const t=n.getTabIndex(e),s=n.getNewValue(e);i(t,s);const a=j.insertTabNameElement(t);R(t),E(a)}},removeTab:e=>{const t=n.getTabIndex(e);if(P(t),F(t),n.checkIfWasCurrentTab(e)){const e=r();j.setFirstTabToCurrentTab(e),X(),j.loadTasksFromNewCurrentTab()}},switchTab:e=>{if(!n.checkIfWasCurrentTab(e)){const t=n.getTabIndex(e);l(t),V(),j.setCurrentTabDOM(t),X(),j.loadTasksFromNewCurrentTab()}},newTask:t,removeTask:e=>{const t=n.getTaskIndex(e);M(t),$(t)},insertTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Task")){const t=n.getTaskIndex(e),s=n.getTaskSubcontainerType(e);W(t,s);const a=j.insertTaskInputElement(t,s);j.setTaskInputElementValue(t,s),D(a)}},updateTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getTaskSubcontainerType(e),a=n.getNewValue(e);k(t,s,a),j.insertTaskSubcontentElement(t,s),z(t,s)}},toggleTaskComplete:e=>{const t=n.getTaskIndex(e);u(t),j.toggleTaskDOMComplete(t)},addNewChecklistTask:e=>{const t=n.getTaskIndex(e),s=T(t),o=j.addNewChecklistTaskToDOM(t,s);a(o)},insertChecklistTaskInputElement:e=>{if(!n.checkForExistingInputElement(e,"Checklist Task")){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);J(t,s);const a=j.insertChecklistTaskInputElement(t,s);j.setChecklistTaskInputElementValue(t,s),A(a)}},updateChecklistTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e),a=n.getNewValue(e);g(t,s,a),j.insertChecklistTaskDescriptionElement(t,s),Q(t,s)}},toggleChecklistTaskComplete:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);m(t,s),j.toggleChecklistTaskDOMComplete(t,s)},removeChecklistTask:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);B(t,s),U(t,s)},toggleTaskPin:e=>{const t=n.getTaskIndex(e);j.toggleAnimations(t,"Enable"),p(t),j.changePinButtonImage(t),j.shiftTaskElementPosition(t)},addTaskListeners:s,addChecklistTaskListeners:a,toggleDisplayTaskDetails:e=>{const t=n.getTaskIndex(e);j.toggleAnimations(t,"Disable"),j.toggleDisplayTaskDetails(t),j.rotateChevronButton(t)},addTabListeners:o,loadInitialPage:()=>{e(event,"Instructions");const s=t(event,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here!\n            Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!0,!0);j.toggleTaskDOMComplete(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),(e=>{[["If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!0],["Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!0],["Organize the different types of tasks in your life by creating themed tabs. \n            Create a new tab by clicking on the plus sign button at the top of the list.\n            Change tabs by clicking on different tab names.",!0]].forEach((t=>{const s=T(e,t[0],t[1]),n=j.addNewChecklistTaskToDOM(e,s);j.toggleChecklistTaskDOMComplete(e,s),a(n)}))})(s)}}})();b(),h(),f(),j.setDefaultCurrentTabDOM(0),E(),y(),S(),v(),L(),I(),q(),x(),O(),w(),N(),G.loadInitialPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
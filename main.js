(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},t=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})};let o=(o=>{let s={};return Object.assign(s,e(s,"ddtest"),t(s)),s})();console.log(o),console.log(o.getCompletedState()),o.getCompletedState()?console.log(o.getCompletedState(),"this is now true"):console.log(o.getCompletedState(),"this is still false"),console.log(o.getCompletedState()),console.log(o.toggleCompletedState()),console.log(o.getCompletedState()),o.getCompletedState()?console.log(o.getCompletedState(),"this is now true"):console.log(o.getCompletedState(),"this is still false"),console.log(o.getCompletedState()),console.log(o),console.log(o.getTaskDescription()),o.setTaskDescription("wowwie"),console.log(o.getTaskDescription());let s=((o,s,l,g)=>{let c={};return Object.assign(c,((e,t)=>{let o="Make Cereal";return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})})(c),e(c,"part of breakfast plan"),((e,t)=>{let o="this morning";return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(c),((e,t)=>{let o="make sure to put milk back in fridge";return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(c),(e=>{let t;return Object.assign(e,{addChecklist(e){t=e},removeChecklist(){t=void 0},getChecklist:()=>t})})(c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(c),t(c)),c})();console.log(s),console.log(s.getTaskTitle()),console.log(s.getTaskDescription()),console.log(s.getTaskDueDate()),console.log(s.getTaskNotes()),console.log(s.getPinnedState()),console.log(s.getCompletedState()),s.setTaskTitle("Make Chicken Broth"),s.setTaskDescription("requires 1 chicken and 1 broth"),s.setTaskDueDate("before I caught this cold"),s.setTaskNotes("don't sneeze into pot"),s.togglePinnedState(),s.toggleCompletedState(),console.log(s.getTaskTitle()),console.log(s.getTaskDescription()),console.log(s.getTaskDueDate()),console.log(s.getTaskNotes()),console.log(s.getPinnedState()),console.log(s.getCompletedState()),console.log(s.getChecklist()),s.addChecklist(["chicken","broth"]),console.log(s.getChecklist()),s.removeChecklist(),console.log(s.getChecklist());let l=(()=>{let e={};return Object.assign(e,(e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})})(e)),e})();console.log(l),console.log(l.addTask("bend toilet")),console.log(l.addTask("pinch toilet")),console.log(l.getChecklistTasks()),console.log(l.getSpecificChecklistTask(1)),l.removeTask(0),console.log(l.getChecklistTasks()),s.addChecklist(l),console.log(s),console.log(s.getChecklist()),console.log(s.getChecklist().getChecklistTasks()),console.log(s.getChecklist().addTask(o)),console.log(s.getChecklist().getSpecificChecklistTask(2)),console.log(s.getChecklist().getSpecificChecklistTask(2).getTaskDescription()),console.log(s.getChecklist().getSpecificChecklistTask(2).getCompletedState()),console.log(s.getChecklist().getSpecificChecklistTask(2).toggleCompletedState()),console.log(s.getChecklist().getSpecificChecklistTask(2).getCompletedState()),console.log(s.getChecklist().getSpecificChecklistTask(2).setTaskDescription("IT WORKS")),console.log(s.getChecklist().getSpecificChecklistTask(2).getTaskDescription())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
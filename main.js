(()=>{"use strict";let e=(()=>{let e={};return Object.assign(e,(e=>{let t=!1;return Object.assign({},e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})})(e)),e})();console.log(e),console.log(e.getCompletedState()),e.getCompletedState()?console.log(e.getCompletedState(),"this is now true"):console.log(e.getCompletedState(),"this is still false"),console.log(e.getCompletedState()),console.log(e.toggleCompletedState()),console.log(e.getCompletedState()),e.getCompletedState()?console.log(e.getCompletedState(),"this is now true"):console.log(e.getCompletedState(),"this is still false"),console.log(e.getCompletedState()),console.log(e)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBU0EsSUFBSUEsRUNLd0IsTUFDeEIsSUFBSUMsRUFBUyxDQUFDLEVBRWQsT0FEQUMsT0FBT0MsT0FBT0YsRUNBaUIsQ0FBQ0EsSUFDaEMsSUFBSUcsR0FBWSxFQUNoQixPQUFPRixPQUFPQyxPQUFPLENBQUMsRUFBR0YsRUFBUSxDQUM3QkksdUJBRVFELEdBREFBLENBS1IsRUFDQUUsa0JBQWlCLElBQ05GLEdBRWIsRURib0JHLENBQTJCTixJQUMxQ0EsQ0FBTSxFRFJOTyxHQUNYQyxRQUFRQyxJQUFJVixHQUVaUyxRQUFRQyxJQUFJVixFQUFLTSxxQkFFYk4sRUFBS00sb0JBQ0xHLFFBQVFDLElBQUlWLEVBQUtNLG9CQUFvQixvQkFFckNHLFFBQVFDLElBQUlWLEVBQUtNLG9CQUFvQix1QkFHekNHLFFBQVFDLElBQUlWLEVBQUtNLHFCQUVqQkcsUUFBUUMsSUFBSVYsRUFBS0ssd0JBRWpCSSxRQUFRQyxJQUFJVixFQUFLTSxxQkFHYk4sRUFBS00sb0JBQ0xHLFFBQVFDLElBQUlWLEVBQUtNLG9CQUFvQixvQkFFckNHLFFBQVFDLElBQUlWLEVBQUtNLG9CQUFvQix1QkFHekNHLFFBQVFDLElBQUlWLEVBQUtNLHFCQUVqQkcsUUFBUUMsSUFBSVYsRSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NoZWNrbGlzdF90YXNrLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBsZXRlX2NvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b0RvSXRlbSB9IGZyb20gXCIuL3RvZG9faXRlbVwiO1xuaW1wb3J0IHsgY2hlY2tsaXN0T2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0X3Rhc2tcIjtcbmltcG9ydCB7IGNhbkNvbXBsZXRlIH0gZnJvbSBcIi4vY29tcGxldGVfY29tcG9uZW50XCI7XG5cblxuXG5cblxubGV0IHRlc3QgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiZGR0ZXN0XCIpO1xuY29uc29sZS5sb2codGVzdClcblxuY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG5pZiAodGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4gICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBub3cgdHJ1ZVwiKVxufSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIHN0aWxsIGZhbHNlXCIpXG59XG5cbmNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuY29uc29sZS5sb2codGVzdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpKVxuXG5jb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cblxuaWYgKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuICAgIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSxcInRoaXMgaXMgbm93IHRydWVcIilcbn0gZWxzZSB7XG4gICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBzdGlsbCBmYWxzZVwiKVxufVxuXG5jb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbmNvbnNvbGUubG9nKHRlc3QpXG4iLCJpbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBsZXRlX2NvbXBvbmVudFwiO1xuXG4vLyBvcmlnaW5hbCB3aGVyZSBvYmplY3Qgd291bGQgbmVlZCB0byBoYXZlIE9iamVjdC5hc3NpZ24oKSBmb3IgZXZlcnkgaW5zdGFuY2Vcbi8vIGtlZXBpbmcgZm9yIHBvc3Rlcml0eSwgcHJvYmFibHkgd2lsbCBkZWxldGVkIGF0IHRoZSBlbmRcbi8vIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24pID0+IHtcbi8vICAgICBjb25zdCBnZXRUYXNrRGVzY3JpcHRpb24gPSAoKSA9PiB7XG4vLyAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbi8vICAgICB9O1xuLy8gICAgIGNvbnN0IHNldFRhc2tEZXNjcmlwdGlvbiA9IChuZXdEZXNjcmlwdGlvbikgPT4ge1xuLy8gICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuLy8gICAgIH07XG4vLyAgICAgcmV0dXJuIHsgZ2V0VGFza0Rlc2NyaXB0aW9uLCBzZXRUYXNrRGVzY3JpcHRpb24gfTtcbi8vIH07XG5cbmNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LCBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudChvYmplY3QpKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH07IiwiLy8gb3JpZ2luYWwgd2hlcmUgYWxsIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgZ2V0IHJldHVybmVkLCBzbyBubyBwcml2YXRlIGZpZWxkcyAoY29tcGxldGVkIHNob3VsZCBiZSBwcml2YXRlKVxuLy8ga2VlcGluZyBmb3IgcG9zdGVyaXR5LCBwcm9iYWJseSB3aWxsIGRlbGV0ZWQgYXQgdGhlIGVuZFxuLy8gY29uc3QgY2FuQ29tcGxldGUgPSAob2JqZWN0KSA9PiAoe1xuLy8gICAgIGNvbXBsZXRlZDogZmFsc2UsXG4vLyAgICAgdG9nZ2xlOiAoKSA9PiB7XG4vLyAgICAgICAgIGlmIChvYmplY3QuY29tcGxldGVkKSB7XG4vLyAgICAgICAgICAgICBvYmplY3QuY29tcGxldGVkID0gZmFsc2U7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBvYmplY3QuY29tcGxldGVkID0gdHJ1ZTtcbi8vICAgICAgICAgfTtcbi8vICAgICB9LFxuLy8gICAgIGdldENvbXBsZXRlZFN0YXRlOiAoKSA9PiB7XG4vLyAgICAgICAgIHJldHVybiBvYmplY3QuY29tcGxldGVkXG4vLyAgICAgfVxuLy8gfSk7XG5cbmNvbnN0IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZUNvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q29tcGxldGVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9OyJdLCJuYW1lcyI6WyJ0ZXN0Iiwib2JqZWN0IiwiT2JqZWN0IiwiYXNzaWduIiwiY29tcGxldGVkIiwidG9nZ2xlQ29tcGxldGVkU3RhdGUiLCJnZXRDb21wbGV0ZWRTdGF0ZSIsImNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IiwiY2hlY2tsaXN0VGFza09iamVjdCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9
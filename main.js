(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})},t=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},o=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},s=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},n=(n,l,a,c)=>{let r={};return Object.assign(r,e(r,n),t(r,l),((e,t)=>{let o=t;return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(r,a),((e,t)=>{let o=t;return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(r,c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(r),o(r),s(r)),r},l=t=>{let o={};return Object.assign(o,e(o,t),s(o)),o},a=(()=>{let e=0,t={getCurrentTab:()=>e,setCurrentTab:t=>{e=t}};return Object.assign(t,s(t)),t})(),c=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id")}})(),r=()=>{const e=l("New Tab");return a.addTask(e)},i=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},g=e=>{const t=c.ensureCorrectTabElement(e).dataset.tabIndex;a.setCurrentTab(t)},d=()=>{const e=a.getChecklistTasks();let t;console.log(e);for(const o in e)if(void 0!==e[o])return a.setCurrentTab(o),t=o,t},u=e=>{const t=document.querySelector(".add-tab"),o=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),n=a.getSpecificChecklistTask(e).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=e,s.innerHTML=`\n            <button class="switch-tab">\n                <h2>${n}</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n            `,o.insertBefore(s,t),s},T=(e,t)=>{const o=c.ensureCorrectTabElement(e).dataset.tabIndex,s=a.getSpecificChecklistTask(o).getTaskTitle();t.value=s},k=e=>{const t=c.ensureCorrectTabElement(e),o=document.createElement("input");return o.classList.add("tab-name-input"),o.setAttribute("type","text"),t.insertBefore(o,t.firstChild),o.focus(),o},b=e=>{const t=c.ensureCorrectTabElement(e),o=t.dataset.tabIndex,s=a.getSpecificChecklistTask(o).getTaskTitle(),n=document.createElement("button");n.classList.add("switch-tab");const l=document.createElement("h2");l.textContent=s,n.appendChild(l),t.insertBefore(n,t.firstChild)},m=e=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},p=e=>{c.ensureCorrectTabElement(e).setAttribute("id","current-tab")},C=e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},h=()=>{document.querySelector(".add-tab").addEventListener("click",O.addTab)},S=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",O.insertTabInputElement)},f=e=>{e.addEventListener("keydown",O.updateTab)},E=e=>{e.querySelector(".edit-tab").addEventListener("click",O.insertTabInputElement)},v=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",O.removeTab)},y=e=>{e.querySelector(".remove-tab").addEventListener("click",O.removeTab)},D=()=>{const e=Array.from(document.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",O.switchTab)},q=e=>{e.querySelector(".switch-tab").addEventListener("click",O.switchTab)},w=e=>{const t=c.ensureCorrectTabElement(e).dataset.tabIndex;a.removeTask(t)},I=e=>{const t=c.ensureCorrectTabElement(e);let o=t.querySelector(".switch-tab");t.removeChild(o),o=null},A=e=>{const t=c.ensureCorrectTabElement(e);let o=t.querySelector("input");t.removeChild(o),o=null},L=e=>{let t=c.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},j=()=>{document.querySelector("#current-tab").removeAttribute("id")},O={addTab:()=>{const e=r(),t=u(e);E(t),y(t),q(t)},insertTabInputElement:e=>{if(!c.checkForTabInputElement(e)){const t=k(e);I(e),T(e,t),f(t)}},updateTab:e=>{"Enter"===e.code&&(i(e),b(e),A(e))},removeTab:e=>{if(w(e),L(e),c.checkIfWasCurrentTab(e)){const e=d();C(e)}},switchTab:e=>{g(e),j(),p(e)}};let x=(e=>{let s={};return Object.assign(s,t(s,"ddtest"),o(s)),s})();console.log(x),console.log(x.getCompletedState()),x.getCompletedState()?console.log(x.getCompletedState(),"this is now true"):console.log(x.getCompletedState(),"this is still false"),console.log(x.getCompletedState()),console.log(x.toggleCompletedState()),console.log(x.getCompletedState()),x.getCompletedState()?console.log(x.getCompletedState(),"this is now true"):console.log(x.getCompletedState(),"this is still false"),console.log(x.getCompletedState()),console.log(x),console.log(x.getTaskDescription()),x.setTaskDescription("wowwie"),console.log(x.getTaskDescription());let N=n("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(N),console.log(N.getTaskTitle()),console.log(N.getTaskDescription()),console.log(N.getTaskDueDate()),console.log(N.getTaskNotes()),console.log(N.getPinnedState()),console.log(N.getCompletedState()),N.setTaskTitle("Make Chicken Broth"),N.setTaskDescription("requires 1 chicken and 1 broth"),N.setTaskDueDate("before I caught this cold"),N.setTaskNotes("don't sneeze into pot"),N.togglePinnedState(),N.toggleCompletedState(),console.log(N.getTaskTitle()),console.log(N.getTaskDescription()),console.log(N.getTaskDueDate()),console.log(N.getTaskNotes()),console.log(N.getPinnedState()),console.log(N.getCompletedState()),N.addTask(x),console.log(N.getChecklistTasks()),console.log(N.getSpecificChecklistTask(0)),console.log(N.getSpecificChecklistTask(0).getTaskDescription());let P=l("kitchen stuff");console.log(P),P.addTask(N),console.log(P),console.log(P.getChecklistTasks()),console.log(P.getSpecificChecklistTask(0)),console.log(P.getSpecificChecklistTask(0).getTaskTitle());let B=n("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(P),P.addTask(B),console.log(P.getSpecificChecklistTask(1)),console.log(P.getSpecificChecklistTask(1).getTaskTitle()),a.addTask(P),console.log(a.getChecklistTasks()),console.log(a.getSpecificChecklistTask(0)),console.log(a.getSpecificChecklistTask(0).getTaskTitle()),console.log(a.getChecklistTasks());let M=l("hee hee");a.addTask(M),console.log(a.getChecklistTasks()),h(),S(),v(),console.log(a),console.log(a.getCurrentTab()),m(0),D()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dkIsZ0JBRTdDLElBQUltSCxFQUF1QjNGLEVBQVMsWUFBYSxzQkFBdUIsaUJBQWtCLHlCQUMxRnlDLFFBQVFDLElBQUlnRCxHQUNaQSxFQUFLbkcsUUFBUW9HLEdBQ2JsRCxRQUFRQyxJQUFJZ0QsRUFBSzNGLHlCQUF5QixJQUMxQzBDLFFBQVFDLElBQUlnRCxFQUFLM0YseUJBQXlCLEdBQUd2QixnQkFFN0MwQyxFQUFTM0IsUUFBUW1HLEdBQ2pCakQsUUFBUUMsSUFBSXhCLEVBQVNwQixxQkFDckIyQyxRQUFRQyxJQUFJeEIsRUFBU25CLHlCQUF5QixJQUM5QzBDLFFBQVFDLElBQUl4QixFQUFTbkIseUJBQXlCLEdBQUd2QixnQkFHakRpRSxRQUFRQyxJQUFJeEIsRUFBU3BCLHFCQUVyQixJQUFJOEYsRUFBTzNFLEVBQVEsV0FDbkJDLEVBQVMzQixRQUFRcUcsR0FDakJuRCxRQUFRQyxJQUFJeEIsRUFBU3BCLHFCQTJEckJvRSxJQUVBQSxJQUNBQSxJQWdCQXpCLFFBQVFDLElBQUl4QixHQUNadUIsUUFBUUMsSUFBSXhCLEVBQVNFLGlCQUVyQndCLEVBQTZDLEdBRTdDc0IsRyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFza19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9waW5uZWRfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb190YWJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb19saXN0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2hlbHBlcl9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9vYmplY3RfY29udHJvbGxlcl9hZGRfZWRpdF9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ET01fY29udHJvbGxlcl9hZGRfZWRpdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2V2ZW50X2Fzc2lnbmVyX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX3JlbW92ZV9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ET01fY29udHJvbGxlcl9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2NoZWNrbGlzdF90YXNrX29iamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0aXRsZUJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbFRpdGxlKSA9PiB7XG4gICAgbGV0IHRpdGxlID0gaW5pdGlhbFRpdGxlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrVGl0bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tUaXRsZShuZXdUaXRsZSkge1xuICAgICAgICAgICAgdGl0bGUgPSBuZXdUaXRsZTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IiwiY29uc3QgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxEZXNjcmlwdGlvbikgPT4ge1xuICAgIGxldCBkZXNjcmlwdGlvbiA9IGluaXRpYWxEZXNjcmlwdGlvbjtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza0Rlc2NyaXB0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrRGVzY3JpcHRpb24obmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSIsIi8vIG9yaWdpbmFsIHdoZXJlIGFsbCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGdldCByZXR1cm5lZCwgc28gbm8gcHJpdmF0ZSBmaWVsZHMgKGNvbXBsZXRlZCBzaG91bGQgYmUgcHJpdmF0ZSlcbi8vIGtlZXBpbmcgZm9yIHBvc3Rlcml0eSwgcHJvYmFibHkgd2lsbCBkZWxldGVkIGF0IHRoZSBlbmRcbi8vIGNvbnN0IGNhbkNvbXBsZXRlID0gKG9iamVjdCkgPT4gKHtcbi8vICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuLy8gICAgIHRvZ2dsZTogKCkgPT4ge1xuLy8gICAgICAgICBpZiAob2JqZWN0LmNvbXBsZXRlZCkge1xuLy8gICAgICAgICAgICAgb2JqZWN0LmNvbXBsZXRlZCA9IGZhbHNlO1xuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgb2JqZWN0LmNvbXBsZXRlZCA9IHRydWU7XG4vLyAgICAgICAgIH07XG4vLyAgICAgfSxcbi8vICAgICBnZXRDb21wbGV0ZWRTdGF0ZTogKCkgPT4ge1xuLy8gICAgICAgICByZXR1cm4gb2JqZWN0LmNvbXBsZXRlZFxuLy8gICAgIH1cbi8vIH0pO1xuXG5jb25zdCBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgY29tcGxldGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZUNvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q29tcGxldGVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9OyIsImNvbnN0IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBjaGVja2xpc3QgPSBbXTtcbiAgICBjb25zdCBnZXRUYXNrSW5kZXggPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3QubGVuZ3RoIC0gMTtcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBhZGRUYXNrKHRhc2spIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdC5wdXNoKHRhc2spO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGNoZWNrbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgcmV0dXJuIGdldFRhc2tJbmRleCgpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVUYXNrKGluZGV4KSB7XG4gICAgICAgICAgICBjaGVja2xpc3RbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrcygpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja2xpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFtpbmRleF07XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH07IiwiaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZHVlX2RhdGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBub3Rlc0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbm90ZXNfY29tcG9uZW50XCI7XG4vLyBpbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9waW5uZWRfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbXBsZXRlZF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbmNvbnN0IHRvRG9UYXNrID0gKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgbm90ZXMpID0+IHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIHRpdGxlQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCB0aXRsZSksIFxuICAgICAgICBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgZGVzY3JpcHRpb24pLFxuICAgICAgICBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkdWVEYXRlKSxcbiAgICAgICAgbm90ZXNCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIG5vdGVzKSxcbiAgICAgICAgLy8gY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudChvYmplY3QpLFxuICAgICAgICBwaW5uZWRCZWhhdmlvckNvbXBvbmVudChvYmplY3QpLFxuICAgICAgICBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudChvYmplY3QpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1Rhc2sgfTsiLCJjb25zdCBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRHVlRGF0ZSkgPT4ge1xuICAgIGxldCBkdWVEYXRlID0gaW5pdGlhbER1ZURhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEdWVEYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGR1ZURhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tEdWVEYXRlKG5ld0R1ZURhdGUpIHtcbiAgICAgICAgICAgIGR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsTm90ZXMpID0+IHtcbiAgICBsZXQgbm90ZXMgPSBpbml0aWFsTm90ZXM7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tOb3RlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBub3RlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza05vdGVzKG5ld05vdGVzKSB7XG4gICAgICAgICAgICBub3RlcyA9IG5ld05vdGVzO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBub3Rlc0JlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgcGlubmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZVBpbm5lZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKHBpbm5lZCkge1xuICAgICAgICAgICAgICAgIHBpbm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwaW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UGlubmVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlubmVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFiID0gKHRpdGxlKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1RhYiB9OyIsIi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvTGlzdCA9ICgoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRUYWIgPSAwO1xuICAgIGNvbnN0IGdldEN1cnJlbnRUYWIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VGFiO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q3VycmVudFRhYiA9IChuZXdDdXJyZW50VGFiKSA9PiB7XG4gICAgICAgIGN1cnJlbnRUYWIgPSBuZXdDdXJyZW50VGFiO1xuICAgIH07XG4gICAgbGV0IG9iamVjdCA9IHtcbiAgICAgICAgZ2V0Q3VycmVudFRhYixcbiAgICAgICAgc2V0Q3VycmVudFRhYlxuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufSkoKTtcblxuZXhwb3J0IHsgdG9Eb0xpc3QgfTsiLCJjb25zdCBoZWxwZXJGdW5jdGlvbnMgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YWJFbGVtZW50ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlICh0YWJFbGVtZW50LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpICE9PSBcInRhYi10aXRsZVwiKSB7XG4gICAgICAgICAgICB0YWJFbGVtZW50ID0gdGFiRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrRm9yVGFiSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGlmICh0YWJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0lmV2FzQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBpZiAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gXCJjdXJyZW50LXRhYlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50LCBjaGVja0ZvclRhYklucHV0RWxlbWVudCwgY2hlY2tJZldhc0N1cnJlbnRUYWIsICB9O1xufSkoKTtcblxuZXhwb3J0IHsgaGVscGVyRnVuY3Rpb25zIH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuXG5jb25zdCBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiVG9Ub2RvQXJyYXkgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RhYiA9IHRvRG9UYWIoXCJOZXcgVGFiXCIpO1xuICAgICAgICByZXR1cm4gdG9Eb0xpc3QuYWRkVGFzayhuZXdUYWIpO1xuICAgIH1cbiAgICBjb25zdCBlZGl0VGFiTmFtZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhcmdldFRhYiA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIHRhcmdldFRhYi5zZXRUYXNrVGl0bGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDdXJyZW50VGFiID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuZXdDdXJyZW50VGFiLmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHRvRG9MaXN0LnNldEN1cnJlbnRUYWIoaW5kZXgpXG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJBcnJheSA9IHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRhYkFycmF5KVxuICAgICAgICBsZXQgZmlyc3RUYWIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgdGFiIGluIHRhYkFycmF5KSB7XG4gICAgICAgICAgICBpZiAodGFiQXJyYXlbdGFiXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYih0YWIpO1xuICAgICAgICAgICAgICAgIGZpcnN0VGFiID0gdGFiO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdFRhYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHsgYWRkTmV3VGFiVG9Ub2RvQXJyYXksIGVkaXRUYWJOYW1lLCB1cGRhdGVDdXJyZW50VGFiLCBzZXRGaXJzdFRhYlRvQ3VycmVudFRhYiB9O1xufSkoKTtcblxuZXhwb3J0IHsgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlckFkZEVkaXQgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYlRvRE9NID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZFRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBuZXdUYWJOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29uc3QgbmV3VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgbmV3VGFiT2JqZWN0VGl0bGUgPSBuZXdUYWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIG5ld1RhYk5vZGUuY2xhc3NMaXN0LmFkZChcInRhYi10aXRsZVwiKTtcbiAgICAgICAgbmV3VGFiTm9kZS5kYXRhc2V0LnRhYkluZGV4ID0gaW5kZXg7XG4gICAgICAgIG5ld1RhYk5vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN3aXRjaC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aDI+JHtuZXdUYWJPYmplY3RUaXRsZX08L2gyPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YWIgbmFtZSBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFiIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICBgO1xuICAgICAgICB0b0RvVGFiU2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFiTm9kZSwgYWRkVGFiQnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIG5ld1RhYk5vZGU7XG4gICAgfVxuICAgIGNvbnN0IHNldElucHV0RWxlbWVudFZhbHVlID0gKGV2ZW50LCBpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGFiRWxlbWVudC5kYXRhc2V0LnRhYkluZGV4O1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCB0YWJOYW1lID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBpbnB1dEVsZW1lbnQudmFsdWUgPSB0YWJOYW1lO1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWItbmFtZS1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICB0YWJFbGVtZW50Lmluc2VydEJlZm9yZShpbnB1dEVsZW1lbnQsIHRhYkVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJOYW1lRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IHRhYkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwic3dpdGNoLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGFiQnV0dG9uTmFtZS50ZXh0Q29udGVudCA9IHRhYk5hbWU7XG4gICAgICAgIHRhYkJ1dHRvbi5hcHBlbmRDaGlsZCh0YWJCdXR0b25OYW1lKTtcbiAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRCZWZvcmUodGFiQnV0dG9uLCB0YWJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0RGVmYXVsdEN1cnJlbnRUYWJET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gdG9Eb1RhYlNlY3Rpb24ucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFiLWluZGV4PScke2luZGV4fSddYCk7XG4gICAgICAgIGN1cnJlbnRUYWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldEN1cnJlbnRUYWJET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbmV3Q3VycmVudFRhYiA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIG5ld0N1cnJlbnRUYWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9XG4gICAgY29uc3Qgc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIgPSAoZmlyc3RUYWJJbmRleCkgPT4ge1xuICAgICAgICBpZiAoZmlyc3RUYWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBmaXJzdFRhYiA9IHRvRG9UYWJTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHtmaXJzdFRhYkluZGV4fSddYClcbiAgICAgICAgZmlyc3RUYWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgYWRkTmV3VGFiVG9ET00sIHNldElucHV0RWxlbWVudFZhbHVlLFxuICAgICAgICBpbnNlcnRUYWJJbnB1dEVsZW1lbnQsIGluc2VydFRhYk5hbWVFbGVtZW50LCBzZXREZWZhdWx0Q3VycmVudFRhYkRPTSwgc2V0Q3VycmVudFRhYkRPTSwgc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIsIH07XG59KSgpO1xuXG5leHBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9OyIsImltcG9ydCB7IERPTVVwZGF0ZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9hZGRfZWRpdFwiO1xuaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfYnVuZGxlcl9vYmplY3RcIjtcblxuY29uc3QgZXZlbnRBc3NpZ25lciA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZFRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhYlwiKTtcbiAgICAgICAgYWRkVGFiQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuYWRkVGFiKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJFZGl0QnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuaW5zZXJ0VGFiSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhZGRUYWJJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZVRhYilcbiAgICB9XG4gICAgY29uc3QgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyRm9yTmV3VGFicyA9ICh0YWJFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVkaXRCdXR0b24gPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWRpdC10YWJcIik7XG4gICAgICAgIHRhYkVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYWJJbnB1dEVsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiUmVtb3ZlQnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5yZW1vdmUtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlVGFiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyRm9yTmV3VGFicyA9ICh0YWJFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYlJlbW92ZUJ1dHRvbiA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZW1vdmUtdGFiXCIpO1xuICAgICAgICB0YWJSZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYWIpO1xuICAgIH1cbiAgICBjb25zdCBhZGRTd2l0Y2hUYWJMaXN0ZW5lckZvckluaXRpYWxUYWJzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJTd2l0Y2hCdXR0b25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXRjaC10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJTd2l0Y2hCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5zd2l0Y2hUYWIpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBhZGRTd2l0Y2hUYWJMaXN0ZW5lckZvck5ld1RhYnMgPSAodGFiRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJTd2l0Y2hCdXR0b24gPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKTtcbiAgICAgICAgdGFiU3dpdGNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuc3dpdGNoVGFiKVxuICAgIH1cbiAgICByZXR1cm4geyBhZGROZXdUYWJMaXN0ZW5lciwgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyLCBhZGRUYWJJbnB1dExpc3RlbmVyLFxuICAgICAgICBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzLCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvckluaXRpYWxUYWJzLFxuICAgICAgICBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvck5ld1RhYnMsIGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMsIGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9yTmV3VGFicywgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHRvRG9MaXN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlclJlbW92ZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiTmFtZUVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGxldCBzd2l0Y2hUYWIgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKVxuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKHN3aXRjaFRhYik7XG4gICAgICAgIHN3aXRjaFRhYiA9IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24ucmVtb3ZlQ2hpbGQodGFiRWxlbWVudCk7XG4gICAgICAgIHRhYkVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVzZXRDdXJyZW50VGFiU3RhdHVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjdXJyZW50LXRhYlwiKTtcbiAgICAgICAgY3VycmVudFRhYi5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVtb3ZlVGFiTmFtZUVsZW1lbnQsIHJlbW92ZVRhYklucHV0RWxlbWVudCwgcmVtb3ZlVGFiRWxlbWVudEZyb21ET00sIHJlc2V0Q3VycmVudFRhYlN0YXR1c31cbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXJSZW1vdmUgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCB9IGZyb20gXCIuL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdFwiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlckFkZEVkaXQgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9hZGRfZWRpdFwiO1xuaW1wb3J0IHsgZXZlbnRBc3NpZ25lciB9IGZyb20gXCIuL2V2ZW50X2Fzc2lnbmVyX29iamVjdFwiO1xuaW1wb3J0IHsgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCB9IGZyb20gXCIuL29iamVjdF9jb250cm9sbGVyX3JlbW92ZV9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJSZW1vdmUgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9yZW1vdmVcIjtcblxuY29uc3QgZXZlbnRCdW5kbGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGRUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFiVG9Ub2RvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgbmV3VGFiTm9kZSA9IERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZE5ld1RhYlRvRE9NKG5ld1RhYkluZGV4KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzKG5ld1RhYk5vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyRm9yTmV3VGFicyhuZXdUYWJOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lckZvck5ld1RhYnMobmV3VGFiTm9kZSk7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvclRhYklucHV0RWxlbWVudChldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYklucHV0RWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYk5hbWVFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldElucHV0RWxlbWVudFZhbHVlKGV2ZW50LCBpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYWJJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhYk5hbWUoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFiTmFtZUVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWJJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFiRnJvbVRvZG9BcnJheShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiRWxlbWVudEZyb21ET00oZXZlbnQpO1xuICAgICAgICBpZiAoaGVscGVyRnVuY3Rpb25zLmNoZWNrSWZXYXNDdXJyZW50VGFiKGV2ZW50KSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYihmaXJzdFRhYkluZGV4KVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzd2l0Y2hUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudXBkYXRlQ3VycmVudFRhYihldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVzZXRDdXJyZW50VGFiU3RhdHVzKCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldEN1cnJlbnRUYWJET00oZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4geyBhZGRUYWIsIGluc2VydFRhYklucHV0RWxlbWVudCwgdXBkYXRlVGFiLCByZW1vdmVUYWIsIHN3aXRjaFRhYiwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QnVuZGxlciB9OyIsImltcG9ydCB7IHRvRG9UYXNrIH0gZnJvbSBcIi4vb2JqZWN0cy90b2RvX3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzL2NoZWNrbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdFRhc2tPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzL2NoZWNrbGlzdF90YXNrX29iamVjdFwiO1xuaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuXG4vLyB0ZXN0aW5nIHRvZG8gdGFzayBvYmplY3RcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnRcIjtcblxuLy8gdGVzdGluZyBjaGVja2xpc3Qgb2JqZWN0XG4vLyBpbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbi8vIHRlc3RpbmcgdGFicyAoYXJyYXlzIHRoYXQgY29udGFpbiBtYW55IHRvIGRvIHRhc2tzKVxuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL29iamVjdHMvdG9kb190YWJfb2JqZWN0XCI7XG5cbi8vIHRlc3RpbmcgbGlzdCB0aGF0IGNvbnRhaW4gZXZlcnl0aGluZ1xuaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi9vYmplY3RzL3RvZG9fbGlzdF9vYmplY3RcIjtcblxuLy8gdGVzdGluZyBmb3IgRE9NIGNvbnRyb2xsZXIgb2JqZWN0c1xuaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuaW1wb3J0IHsgZXZlbnRBc3NpZ25lciB9IGZyb20gXCIuL29iamVjdHMvZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcblxubGV0IHRlc3QgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiZGR0ZXN0XCIpO1xuY29uc29sZS5sb2codGVzdClcblxuY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG5pZiAodGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4gICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBub3cgdHJ1ZVwiKVxufSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIHN0aWxsIGZhbHNlXCIpXG59XG5cbmNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuY29uc29sZS5sb2codGVzdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpKVxuXG5jb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cblxuaWYgKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuICAgIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSxcInRoaXMgaXMgbm93IHRydWVcIilcbn0gZWxzZSB7XG4gICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBzdGlsbCBmYWxzZVwiKVxufVxuXG5jb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbmNvbnNvbGUubG9nKHRlc3QpXG5cbmNvbnNvbGUubG9nKHRlc3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG50ZXN0LnNldFRhc2tEZXNjcmlwdGlvbihcIndvd3dpZVwiKVxuY29uc29sZS5sb2codGVzdC5nZXRUYXNrRGVzY3JpcHRpb24oKSlcblxubGV0IGltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIk1ha2UgQ2VyZWFsXCIsIFwicGFydCBvZiBicmVha2Zhc3QgcGxhblwiLCBcInRoaXMgbW9ybmluZ1wiLCBcIm1ha2Ugc3VyZSB0byBwdXQgbWlsayBiYWNrIGluIGZyaWRnZVwiKTtcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2spXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tUaXRsZSgpKVxuY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRGVzY3JpcHRpb24oKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza0R1ZURhdGUoKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza05vdGVzKCkpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFBpbm5lZFN0YXRlKCkpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbmltcG9ydGFudFRhc2suc2V0VGFza1RpdGxlKFwiTWFrZSBDaGlja2VuIEJyb3RoXCIpXG5pbXBvcnRhbnRUYXNrLnNldFRhc2tEZXNjcmlwdGlvbihcInJlcXVpcmVzIDEgY2hpY2tlbiBhbmQgMSBicm90aFwiKVxuaW1wb3J0YW50VGFzay5zZXRUYXNrRHVlRGF0ZShcImJlZm9yZSBJIGNhdWdodCB0aGlzIGNvbGRcIilcbmltcG9ydGFudFRhc2suc2V0VGFza05vdGVzKFwiZG9uJ3Qgc25lZXplIGludG8gcG90XCIpXG5pbXBvcnRhbnRUYXNrLnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG5pbXBvcnRhbnRUYXNrLnRvZ2dsZUNvbXBsZXRlZFN0YXRlKCk7XG5cbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza1RpdGxlKCkpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRHVlRGF0ZSgpKVxuY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrTm90ZXMoKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0UGlubmVkU3RhdGUoKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuaW1wb3J0YW50VGFzay5hZGRUYXNrKHRlc3QpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENoZWNrbGlzdFRhc2tzKCkpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuXG5sZXQgdGFiMSA9IHRvRG9UYWIoXCJraXRjaGVuIHN0dWZmXCIpXG5jb25zb2xlLmxvZyh0YWIxKVxudGFiMS5hZGRUYXNrKGltcG9ydGFudFRhc2spXG5jb25zb2xlLmxvZyh0YWIxKVxuY29uc29sZS5sb2codGFiMS5nZXRDaGVja2xpc3RUYXNrcygpKVxuY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG5jb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKS5nZXRUYXNrVGl0bGUoKSlcblxubGV0IGFub3RoZXJJbXBvcnRhbnRUYXNrID0gdG9Eb1Rhc2soXCJDbGVhbiBwb3RcIiwgXCJwYXJ0IG9mIGNob3JlcyBwbGFuXCIsIFwidGhpcyBhZnRlcm5vb25cIiwgXCJtYWtlIHN1cmUgdG8gdXNlIHNvYXBcIik7XG5jb25zb2xlLmxvZyh0YWIxKVxudGFiMS5hZGRUYXNrKGFub3RoZXJJbXBvcnRhbnRUYXNrKVxuY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMSkpXG5jb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygxKS5nZXRUYXNrVGl0bGUoKSlcblxudG9Eb0xpc3QuYWRkVGFzayh0YWIxKVxuY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbmNvbnNvbGUubG9nKHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbmNvbnNvbGUubG9nKHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKS5nZXRUYXNrVGl0bGUoKSlcblxuLy8gRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWIoMCk7XG5jb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuXG5sZXQgdGFiMiA9IHRvRG9UYWIoXCJoZWUgaGVlXCIpXG50b0RvTGlzdC5hZGRUYXNrKHRhYjIpXG5jb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuXG4vKiBcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q2hlY2tsaXN0VGFza3MoKSk7XG5sZXQgaW5kZXgxID0gaW1wb3J0YW50VGFzay5hZGRUYXNrKFtcImNoaWNrZW5cIiwgXCJicm90aFwiXSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q2hlY2tsaXN0VGFza3MoKSk7XG5pbXBvcnRhbnRUYXNrLnJlbW92ZVRhc2soaW5kZXgxKTtcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q2hlY2tsaXN0VGFza3MoKSk7XG5cbmxldCBjaGVja2xpc3QgPSBjaGVja2xpc3RPYmplY3QoKTtcbmNvbnNvbGUubG9nKGNoZWNrbGlzdClcbmNvbnNvbGUubG9nKGNoZWNrbGlzdC5hZGRUYXNrKFwiYmVuZCB0b2lsZXRcIikpXG5jb25zb2xlLmxvZyhjaGVja2xpc3QuYWRkVGFzayhcInBpbmNoIHRvaWxldFwiKSlcbmNvbnNvbGUubG9nKGNoZWNrbGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuY29uc29sZS5sb2coY2hlY2tsaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygxKSlcbmNoZWNrbGlzdC5yZW1vdmVUYXNrKDApXG5jb25zb2xlLmxvZyhjaGVja2xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcblxubGV0IGluZGV4MiA9IGltcG9ydGFudFRhc2suYWRkVGFzayhjaGVja2xpc3QpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrKVxuY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRDaGVja2xpc3RUYXNrcygpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRDaGVja2xpc3QoKS5nZXRDaGVja2xpc3RUYXNrcygpKVxubGV0IGluZGV4MyA9IGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suYWRkVGFzayh0ZXN0KSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4MikpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygyKS5nZXRUYXNrRGVzY3JpcHRpb24oKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDIpLmdldENvbXBsZXRlZFN0YXRlKCkpXG5jb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygyKS50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpKVxuY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMikuZ2V0Q29tcGxldGVkU3RhdGUoKSlcbmNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDIpLnNldFRhc2tEZXNjcmlwdGlvbihcIklUIFdPUktTXCIpKVxuY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMikuZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG5cbmxldCB0YWIgPSB0b0RvVGFiKFwia2l0Y2hlbiBzdHVmZlwiKVxubGV0IGxpc3RPZlN0dWZmID0gY2hlY2tsaXN0T2JqZWN0KClcbi8vIHRhYi5hZGRDaGVja2xpc3QobGlzdE9mU3R1ZmYpXG5jb25zb2xlLmxvZyh0YWIuYWRkVGFzayhpbXBvcnRhbnRUYXNrKSlcbmNvbnNvbGUubG9nKHRhYilcbi8vIGNvbnNvbGUubG9nKHRhYi5nZXRDaGVja2xpc3QoKSlcbmNvbnNvbGUubG9nKHRhYi5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG5jb25zb2xlLmxvZyh0YWIuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG5sZXQgYW5vdGhlckltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIkNsZWFuIHBvdFwiLCBcInBhcnQgb2YgY2hvcmVzIHBsYW5cIiwgXCJ0aGlzIGFmdGVybm9vblwiLCBcIm1ha2Ugc3VyZSB0byB1c2Ugc29hcFwiKTtcbmNvbnNvbGUubG9nKHRhYilcbi8vIGNvbnNvbGUubG9nKHRhYi5nZXRDaGVja2xpc3QoKSlcbmNvbnNvbGUubG9nKHRhYi5hZGRUYXNrKGFub3RoZXJJbXBvcnRhbnRUYXNrKSlcbmNvbnNvbGUubG9nKHRhYi5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMSkpXG5jb25zb2xlLmxvZyh0YWIuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDEpLmdldFRhc2tUaXRsZSgpKVxuXG5jb25zb2xlLmxvZyh0b0RvTGlzdClcbmxldCB0aGVMaXN0ID0gdG9Eb0xpc3Q7XG5jb25zb2xlLmxvZyh0aGVMaXN0KVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0KCkpXG5sZXQgaW5kZXg0ID0gY29uc29sZS5sb2codG9Eb0xpc3QuYWRkVGFzayh0YWIpKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0KCkpXG5jb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0KCkuZ2V0Q2hlY2tsaXN0KCkuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbmNvbnNvbGUubG9nKHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbmNvbnNvbGUubG9nKHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKS5nZXRUYXNrVGl0bGUoKSlcbiAqL1xuXG5ldmVudEFzc2lnbmVyLmFkZE5ld1RhYkxpc3RlbmVyKCk7XG4vLyBldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJMaXN0ZW5lcigpO1xuZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicygpO1xuXG4vLyBidXR0b24gKHRhcmdldCBidXR0b24gd2lsbCBhbHdheXMgd29yaylcblxuLyogY29uc3QgdGVzdDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rlc3QxXCIpXG50ZXN0MS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwidGVzdDFcIilcbn0pICovXG5cbi8vIGltZ1xuXG4vKiBjb25zdCB0ZXN0MiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGVzdDJcIilcbnRlc3QyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJ0ZXN0MlwiKVxufSkgKi9cblxuY29uc29sZS5sb2codG9Eb0xpc3QpXG5jb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDdXJyZW50VGFiKCkpXG5cbkRPTUNvbnRyb2xsZXJBZGRFZGl0LnNldERlZmF1bHRDdXJyZW50VGFiRE9NKDApXG5cbmV2ZW50QXNzaWduZXIuYWRkU3dpdGNoVGFiTGlzdGVuZXJGb3JJbml0aWFsVGFicygpIiwiaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5cbi8vIG9yaWdpbmFsIHdoZXJlIG9iamVjdCB3b3VsZCBuZWVkIHRvIGhhdmUgT2JqZWN0LmFzc2lnbigpIGZvciBldmVyeSBpbnN0YW5jZVxuLy8ga2VlcGluZyBmb3IgcG9zdGVyaXR5LCBwcm9iYWJseSB3aWxsIGRlbGV0ZWQgYXQgdGhlIGVuZFxuLy8gY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IChkZXNjcmlwdGlvbikgPT4ge1xuICAgIC8vIGNvbnN0IGdldFRhc2tEZXNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICAvLyAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICAgIC8vIH07XG4gICAgLy8gY29uc3Qgc2V0VGFza0Rlc2NyaXB0aW9uID0gKG5ld0Rlc2NyaXB0aW9uKSA9PiB7XG4gICAgLy8gICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgLy8gfTtcbi8vICAgICByZXR1cm4geyBnZXRUYXNrRGVzY3JpcHRpb24sIHNldFRhc2tEZXNjcmlwdGlvbiB9O1xuLy8gfTtcblxuY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IChkZXNjcmlwdGlvbikgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IHsgY2hlY2tsaXN0VGFza09iamVjdCB9OyJdLCJuYW1lcyI6WyJ0aXRsZUJlaGF2aW9yQ29tcG9uZW50Iiwib2JqZWN0IiwiaW5pdGlhbFRpdGxlIiwidGl0bGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRUYXNrVGl0bGUiLCJzZXRUYXNrVGl0bGUiLCJuZXdUaXRsZSIsImRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImdldFRhc2tEZXNjcmlwdGlvbiIsInNldFRhc2tEZXNjcmlwdGlvbiIsIm5ld0Rlc2NyaXB0aW9uIiwiY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQiLCJjb21wbGV0ZWQiLCJ0b2dnbGVDb21wbGV0ZWRTdGF0ZSIsImdldENvbXBsZXRlZFN0YXRlIiwiY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQiLCJjaGVja2xpc3QiLCJhZGRUYXNrIiwidGFzayIsInB1c2giLCJsZW5ndGgiLCJyZW1vdmVUYXNrIiwiaW5kZXgiLCJ1bmRlZmluZWQiLCJnZXRDaGVja2xpc3RUYXNrcyIsImdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayIsInRvRG9UYXNrIiwiZHVlRGF0ZSIsIm5vdGVzIiwiaW5pdGlhbER1ZURhdGUiLCJnZXRUYXNrRHVlRGF0ZSIsInNldFRhc2tEdWVEYXRlIiwibmV3RHVlRGF0ZSIsImR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxOb3RlcyIsImdldFRhc2tOb3RlcyIsInNldFRhc2tOb3RlcyIsIm5ld05vdGVzIiwibm90ZXNCZWhhdmlvckNvbXBvbmVudCIsInBpbm5lZCIsInRvZ2dsZVBpbm5lZFN0YXRlIiwiZ2V0UGlubmVkU3RhdGUiLCJwaW5uZWRCZWhhdmlvckNvbXBvbmVudCIsInRvRG9UYWIiLCJ0b0RvTGlzdCIsImN1cnJlbnRUYWIiLCJnZXRDdXJyZW50VGFiIiwic2V0Q3VycmVudFRhYiIsIm5ld0N1cnJlbnRUYWIiLCJoZWxwZXJGdW5jdGlvbnMiLCJlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCIsImV2ZW50IiwidGFiRWxlbWVudCIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJjaGVja0ZvclRhYklucHV0RWxlbWVudCIsImZpcnN0RWxlbWVudENoaWxkIiwidGFnTmFtZSIsImNoZWNrSWZXYXNDdXJyZW50VGFiIiwib2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QiLCJuZXdUYWIiLCJkYXRhc2V0IiwidGFiSW5kZXgiLCJ2YWx1ZSIsInRhYkFycmF5IiwiZmlyc3RUYWIiLCJjb25zb2xlIiwibG9nIiwidGFiIiwiRE9NQ29udHJvbGxlckFkZEVkaXQiLCJhZGRUYWJCdXR0b24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0b0RvVGFiU2VjdGlvbiIsIm5ld1RhYk5vZGUiLCJjcmVhdGVFbGVtZW50IiwibmV3VGFiT2JqZWN0VGl0bGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJpbnNlcnRCZWZvcmUiLCJpbnB1dEVsZW1lbnQiLCJ0YWJOYW1lIiwic2V0QXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsImZvY3VzIiwidGFiQnV0dG9uIiwidGFiQnV0dG9uTmFtZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJmaXJzdFRhYkluZGV4IiwiZXZlbnRBc3NpZ25lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudEJ1bmRsZXIiLCJhZGRUYWIiLCJ0YWJFZGl0QnV0dG9ucyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJpbnNlcnRUYWJJbnB1dEVsZW1lbnQiLCJ1cGRhdGVUYWIiLCJ0YWJSZW1vdmVCdXR0b25zIiwicmVtb3ZlVGFiIiwidGFiU3dpdGNoQnV0dG9ucyIsInN3aXRjaFRhYiIsIm9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QiLCJET01Db250cm9sbGVyUmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJuZXdUYWJJbmRleCIsImNvZGUiLCJ0ZXN0IiwiY2hlY2tsaXN0VGFza09iamVjdCIsImltcG9ydGFudFRhc2siLCJ0YWIxIiwiYW5vdGhlckltcG9ydGFudFRhc2siLCJ0YWIyIl0sInNvdXJjZVJvb3QiOiIifQ==
(()=>{"use strict";const t=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},e=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",G.insertTabInputElement)},s=t=>{t.addEventListener("keydown",G.updateTab)},n=(t=document)=>{const e=Array.from(t.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",G.removeTab)},a=(t=document)=>{const e=Array.from(t.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",G.switchTab)},o=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.addTask)},c=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",G.insertTaskInputElement)},i=t=>{t.addEventListener("keydown",G.updateTask)},l=(t=document)=>{const e=t.querySelectorAll(".to-do-pin");for(const t of e)t.addEventListener("click",G.toggleTaskPin)},r=(t=document)=>{const e=t.querySelectorAll(".to-do-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleTaskComplete)},d=(t=document)=>{const e=Array.from(t.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",G.removeTask)},k=(t=document)=>{const e=t.querySelectorAll(".add-checklist-task");for(const t of e)t.addEventListener("click",G.addNewChecklistTask)},u=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-checklist-task"));for(const t of e)t.addEventListener("click",G.insertChecklistTaskInputElement)},T=t=>{t.addEventListener("keydown",G.updateChecklistTask)},g=(t=document)=>{const e=t.querySelectorAll(".checklist-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleChecklistTaskComplete)},b=(t=document)=>{const e=t.querySelectorAll(".remove-checklist-task");for(const t of e)t.addEventListener("click",G.removeChecklistTask)},m=(t=document)=>{const e=t.querySelectorAll(".to-do-task-change-display");for(const t of e)t.addEventListener("click",G.toggleDisplayTaskDetails)},p=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},h=(()=>{let t=0;const e=()=>t;let s={getCurrentTabIndex:e,setCurrentTabIndex:e=>{t=null===e?null:Number(e)},getCurrentTabObject:()=>{const t=e();return h.getSpecificChecklistTask(t)}};return Object.assign(s,p(s)),s})(),C=(t,e)=>{let s=e;return Object.assign(t,{getTaskTitle:()=>s,setTaskTitle(t){s=t}})},f=(()=>{const t=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e},e=t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task-subcontainer");)e=e.parentElement,s=Array.from(e.classList);return e},s=t=>{let e=t.target,s=Array.from(e.classList);for(;!s.includes("checklist-task");)e=e.parentElement,s=Array.from(e.classList);return e},n=t=>document.querySelector(`[data-task-index='${t}']`),a=t=>h.getSpecificChecklistTask(t),o=(t,e)=>a(t).getSpecificChecklistTask(e);return{checkIfWasCurrentTab:e=>"current-tab"===t(e).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},getTaskIndex:t=>{const e=(t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task");)e=e.parentElement,s=Array.from(e.classList);return e})(t);return e.dataset.taskIndex},getChecklistTaskIndex:t=>s(t).dataset.checklistTaskIndex,getTabIndex:e=>t(e).dataset.tabIndex,getNewValue:t=>t.target.value,getTaskSubcontainerType:t=>{const s=e(t),n=Array.from(s.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(t,e)=>{const s=n(t);let a;return"Title"===e?a=s.querySelector(".to-do-title-section"):"Due Date"===e?a=s.querySelector(".to-do-due-date-section"):"Description"===e?a=s.querySelector(".to-do-description-section"):"Notes"===e&&(a=s.querySelector(".to-do-notes-section")),a},getTaskElement:n,getChecklistTaskElement:(t,e)=>n(t).querySelector(`[data-checklist-task-index='${e}']`),getTabElement:t=>document.querySelector(`[data-tab-index='${t}']`),checkForExistingInputElement:(n,a)=>{let o;return"Tab"===a?o=t(n).querySelector(".tab-name-input"):"Task"===a?o=e(n).querySelector(".task-input"):"Checklist Task"===a&&(o=s(n).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==o},tryingToDoubleClick:t=>{const e=n(t);return!!Array.from(e.classList).includes("mid-animation")},getTabObject:a,getTaskObject:o,getChecklistTaskObject:(t,e,s)=>o(t,e).getSpecificChecklistTask(s),checkIfNoMoreTabs:()=>{const t=document.querySelector(".to-do-tab-section");return 0===Array.from(t.querySelectorAll(".tab-title")).length}}})(),S=(t,e)=>{let s=e;return Object.assign(t,{getTaskDescription:()=>s,setTaskDescription(t){s=t}})},y=(t,e)=>{let s=e;return Object.assign(t,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},E=(t="New Tab")=>{const e=(t=>{let e={};return Object.assign(e,C(e,t),p(e)),e})(t);return h.addTask(e)},I=(t,e)=>{h.getSpecificChecklistTask(t).setTaskTitle(e)},v=t=>{h.setCurrentTabIndex(t)},D=()=>{const t=h.getChecklistTasks();let e;for(const s in t)if(void 0!==t[s])return h.setCurrentTabIndex(s),e=s,e;return h.setCurrentTabIndex(null),null},L=(t,e="New Task Title",s="Task Due Date",n="Task Description",a="Task Notes",o=!1,c=!1)=>{const i=h.getSpecificChecklistTask(t),l=((t,e,s,n,a,o)=>{let c={};return Object.assign(c,C(c,t),S(c,s),((t,e)=>{let s=e;return Object.assign(t,{getTaskDueDate:()=>s,setTaskDueDate(t){s=t}})})(c,e),((t,e)=>{let s=e;return Object.assign(t,{getTaskNotes:()=>s,setTaskNotes(t){s=t}})})(c,n),((t,e)=>{let s=e;return Object.assign(t,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(c,a),y(c,o),p(c)),c})(e,s,n,a,o,c);return i.addTask(l)},x=(t,e,s)=>{const n=h.getCurrentTabObject().getSpecificChecklistTask(t);"Title"===e?n.setTaskTitle(s):"Due Date"===e?n.setTaskDueDate(s):"Description"===e?n.setTaskDescription(s):"Notes"===e&&n.setTaskNotes(s)},O=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).toggleCompletedState()},q=(t,e,s="Checklist Task Description",n=!1)=>{const a=h.getSpecificChecklistTask(t).getSpecificChecklistTask(e),o=((t,e)=>{let s={};return Object.assign(s,S(s,t),y(s,e)),s})(s,n);return a.addTask(o)},A=(t,e,s)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).setTaskDescription(s)},_=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).toggleCompletedState()},N=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).togglePinnedState()},j=(()=>{const t=t=>{const e=h.getCurrentTabObject().getSpecificChecklistTask(t),s=document.querySelector(".to-do-content"),n=document.createElement("div");n.classList.add("to-do-task"),n.dataset.taskIndex=t;const a=e.getTaskTitle(),o=e.getTaskDescription(),c=e.getTaskDueDate(),i=e.getTaskNotes(),l=`to-do-complete-checkbox-${t}`;return n.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',n.querySelector(".to-do-title").textContent=a,n.querySelector(".to-do-due-date").textContent="Due On: "+c,n.querySelector(".to-do-description").textContent="Description: "+o,n.querySelector(".to-do-notes").textContent="Notes: "+i,s.appendChild(n),n.querySelector("label").setAttribute("for",l),n.querySelector(".to-do-complete-checkbox").setAttribute("id",l),n},e=t=>{const e=f.getTaskElement(t),s=e.querySelector(".to-do-complete-checkbox");h.getCurrentTabObject().getSpecificChecklistTask(t).getCompletedState()?(s.checked=!0,e.classList.add("task-completed")):(s.checked=!1,e.classList.remove("task-completed"))},s=(t,e)=>{const s=f.getTaskElement(t).querySelector(".checklist"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("div");return a.classList.add("checklist-task"),a.dataset.checklistTaskIndex=e,a.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${t}-${e}" class="checklist-complete-checkbox">\n                <label for="checklist-${t}-${e}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,a.querySelector(".checklist-task-description").textContent=n,s.appendChild(a),a},n=(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e);s.checked=n.getCompletedState(),n.getCompletedState()?s.classList.add("checklist-task-completed"):s.classList.remove("checklist-task-completed")},a=t=>{const e=f.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.querySelector(".to-do-pin").querySelector("img");s.getPinnedState()?n.setAttribute("src","./assets/pin-pinned.png"):n.setAttribute("src","./assets/pin-unpinned.png")},o=t=>{const e=h.getCurrentTabObject(),s=t.dataset.taskIndex,n=e.getSpecificChecklistTask(s),a=document.querySelector(".to-do-content");if(n.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)a.insertBefore(t,a.firstElementChild);else{const n=e[e.length-1];for(const o of e){if(s<o.dataset.taskIndex){a.insertBefore(t,o);break}o===n&&n.insertAdjacentElement("afterend",t)}}t.classList.add("pinned-task")}};return{addNewTabToDOM:t=>{const e=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),a=h.getSpecificChecklistTask(t).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=t,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=a,s.insertBefore(n,e),n},insertTabInputElement:t=>{const e=f.getTabElement(t),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),e.insertBefore(s,e.firstChild),s.focus(),s},setTabInputElementValue:t=>{const e=f.getTabElement(t).querySelector("input"),s=h.getSpecificChecklistTask(t).getTaskTitle();e.value=s},insertTabNameElement:t=>{const e=f.getTabElement(t),s=h.getSpecificChecklistTask(t).getTaskTitle(),n=document.createElement("button");n.classList.add("switch-tab");const a=document.createElement("h2");return a.classList.add("tab-name"),a.textContent=s,n.appendChild(a),e.insertBefore(n,e.firstChild),e},addCurrentTabIndicator:()=>{const t=h.getCurrentTabIndex();null!==t&&f.getTabElement(t).setAttribute("id","current-tab")},loadTasksFromNewCurrentTab:()=>{const c=h.getCurrentTabObject().getChecklistTasks();for(const i in c){const l=c[i];if(void 0!==l){const c=t(i);a(i),o(c),e(i),G.addTaskListeners(c);const r=l.getChecklistTasks();for(const t in r)if(void 0!==r[t]){const e=s(i,t);n(i,t),G.addChecklistTaskListeners(e)}}}},addNewTaskToDOM:t,insertTaskInputElement:(t,e)=>{const s=f.getTaskSubcontainerElement(t,e),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),s.insertBefore(n,s.firstChild),n.focus(),n},setTaskInputElementValue:(t,e)=>{const s=f.getTaskSubcontainerElement(t,e).querySelector("input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;"Title"===e?a=n.getTaskTitle():"Due Date"===e?a=n.getTaskDueDate():"Description"===e?a=n.getTaskDescription():"Notes"===e&&(a=n.getTaskNotes()),s.value=a},insertTaskSubcontentElement:(t,e)=>{const s=f.getTaskSubcontainerElement(t,e),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;if("Title"===e){const t=n.getTaskTitle();a=document.createElement("h3"),a.classList.add("to-do-title"),a.textContent=t}else if("Due Date"===e){const t=n.getTaskDueDate();a=document.createElement("p"),a.classList.add("to-do-due-date"),a.textContent="Due On: "+t}else if("Description"===e){const t=n.getTaskDescription();a=document.createElement("p"),a.classList.add("to-do-description"),a.textContent="Description: "+t}else if("Notes"===e){const t=n.getTaskNotes();a=document.createElement("p"),a.classList.add("to-do-notes"),a.textContent="Notes: "+t}s.insertBefore(a,s.firstChild)},toggleTaskDOMComplete:e,addNewChecklistTaskToDOM:s,insertChecklistTaskInputElement:(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=document.createElement("input");return n.classList.add("checklist-input"),n.setAttribute("type","text"),s.appendChild(n),n.focus(),n},setChecklistTaskInputElementValue:(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription();s.value=n},insertChecklistTaskDescriptionElement:(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${t}-${e}`),a.classList.add("checklist-task-description"),a.textContent=n,s.appendChild(a)},toggleChecklistTaskDOMComplete:n,changePinButtonImage:a,shiftTaskElementPosition:t=>{const e=f.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.dataset.taskIndex,a=document.querySelector(".to-do-content");if(s.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const o of t){if(n<o.dataset.taskIndex){a.insertBefore(e,o);break}o===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}else{const t=Array.from(a.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===t.length)a.appendChild(e);else{const s=t[t.length-1];for(const o of t){if(n<o.dataset.taskIndex){a.insertBefore(e,o);break}o===s&&a.appendChild(e,s)}}e.classList.remove("pinned-task")}},toggleDisplayTaskDetails:t=>{const e=f.getTaskElement(t);Array.from(e.querySelectorAll(".animation-target")).forEach((t=>{Array.from(t.classList).includes("hide-to-do-details")?(t.classList.remove("hide-to-do-details"),t.classList.add("display-to-do-details"),t.style.display="flex"):(t.classList.add("hide-to-do-details"),t.classList.remove("display-to-do-details"),setTimeout((()=>{t.style.display="none"}),1e3))})),(t=>{t.classList.add("mid-animation"),setTimeout((()=>{t.classList.remove("mid-animation")}),1e3)})(e)},rotateChevronButton:t=>{const e=f.getTaskElement(t).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(e.classList);0===s.length||s.includes("rotate-hide-task-details")?(e.classList.remove("rotate-hide-task-details"),e.classList.add("rotate-display-task-details"),e.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(e.classList.remove("rotate-display-task-details"),e.classList.add("rotate-hide-task-details"),e.classList.remove("rotated-chevron"))},toggleAnimations:(t,e)=>{const s=f.getTaskElement(t),n=s.querySelector(".to-do-task-change-display").querySelector("img"),a=Array.from(s.querySelectorAll(".animation-target"));a.push(n),a.forEach((t=>{"Enable"===e?t.classList.add("no-animations"):"Disable"===e&&t.classList.remove("no-animations")}))}}})(),$=t=>{const e=f.getTabElement(t);let s=e.querySelector(".switch-tab");e.removeChild(s),s=null},w=t=>{const e=f.getTabElement(t);let s=e.querySelector("input");e.removeChild(s),s=null},P=t=>{let e=f.getTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},M=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},V=t=>{let e=f.getTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},B=(t,e)=>{const s=f.getTaskSubcontainerElement(t,e);let n=s.firstElementChild;s.removeChild(n),n=null},H=(t,e)=>{const s=f.getTaskSubcontainerElement(t,e);let n=s.querySelector("input");s.removeChild(n),n=null},R=(t,e)=>{const s=f.getChecklistTaskElement(t,e),n=s.querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-task-description");n.removeChild(a),a=null},F=(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section");let n=s.querySelector(".checklist-input");s.removeChild(n),n=null},J=(t,e)=>{const s=f.getTaskElement(t).querySelector(".checklist");let n=f.getChecklistTaskElement(t,e);s.removeChild(n),n=null},z=()=>{document.querySelector(".to-do-content").replaceChildren()},W=t=>{h.removeTask(t)},Q=t=>{h.getCurrentTabObject().removeTask(t)},U=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).removeTask(e)},X=(()=>{let t=!1;const e=()=>{const t=localStorage.getItem("to_do_list");return JSON.parse(t)},s=t=>{const e=JSON.stringify(t);localStorage.setItem("to_do_list",e)};return{addTab:t=>{const n=f.getTabObject(t),a=e(),o=`{\n            "title": "${n.getTaskTitle()}",\n            "tasks": {}\n        }`,c=JSON.parse(o);a.tabs[`tab_${t}`]=c,s(a)},setCurrentTab:t=>{const n=e();n.current_tab=null===t?null:Number(t),s(n)},setTabName:t=>{const n=f.getTabObject(t),a=e();a.tabs[`tab_${t}`].title=n.getTaskTitle(),s(a)},getCurrentTabIndex:()=>e().current_tab,getTabTitle:t=>e().tabs[t].title,getTabObjects:()=>X.getLocalStorageValue().tabs,removeTab:t=>{const n=e();n.tabs[`tab_${t}`]=null,s(n)},addTask:(t,n)=>{const a=f.getTaskObject(t,n),o=e(),c=`{\n            "title": "${a.getTaskTitle()}",\n            "due_date": "${a.getTaskDueDate()}",\n            "description": "${a.getTaskDescription()}",\n            "notes": "${a.getTaskNotes()}",\n            "pinned": ${a.getPinnedState()},\n            "completed": ${a.getCompletedState()},\n            "checklist_tasks": {}\n        }`,i=JSON.parse(c);o.tabs[`tab_${t}`].tasks[`task_${n}`]=i,s(o)},setTaskSubcontainerValue:(t,n,a)=>{const o=f.getTaskObject(t,n),c=e();"Title"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].title=o.getTaskTitle():"Due Date"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].due_date=o.getTaskDueDate():"Description"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].description=o.getTaskDescription():"Notes"===a&&(c.tabs[`tab_${t}`].tasks[`task_${n}`].notes=o.getTaskNotes()),s(c)},toggleTaskPinned:(t,n)=>{const a=f.getTaskObject(t,n),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].pinned=a.getPinnedState(),s(o)},toggleTaskCompleted:(t,n)=>{const a=f.getTaskObject(t,n),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].completed=a.getCompletedState(),s(o)},getTaskValues:(t,s)=>{const n=e();let a=[];const o=n.tabs[t].tasks[s].title;a.push(o);const c=n.tabs[t].tasks[s].due_date;a.push(c);const i=n.tabs[t].tasks[s].description;a.push(i);const l=n.tabs[t].tasks[s].notes;a.push(l);const r=n.tabs[t].tasks[s].pinned;a.push(r);const d=n.tabs[t].tasks[s].completed;return a.push(d),a},getTaskObjects:t=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks,removeTask:(t,n)=>{const a=e();a.tabs[`tab_${t}`].tasks[`task_${n}`]=null,s(a)},addChecklistTask:(t,n,a)=>{const o=f.getChecklistTaskObject(t,n,a),c=e(),i=`{\n            "description": "${o.getTaskDescription()}",\n            "completed": ${o.getCompletedState()}\n        }`,l=JSON.parse(i);c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=l,s(c)},setChecklistTaskDescription:(t,n,a)=>{const o=f.getChecklistTaskObject(t,n,a),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].description=o.getTaskDescription(),s(c)},toggleChecklistTaskCompleted:(t,n,a)=>{const o=f.getChecklistTaskObject(t,n,a),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].completed=o.getCompletedState(),s(c)},getChecklistTaskValues:(t,s,n)=>{const a=e();let o=[];const c=a.tabs[t].tasks[s].checklist_tasks[n].description;o.push(c);const i=a.tabs[t].tasks[s].checklist_tasks[n].completed;return o.push(i),o},getChecklistTaskObjects:(t,e)=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks,removeChecklistTask:(t,n,a)=>{const o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=null,s(o)},checkForExistingStorage:()=>!!localStorage.getItem("to_do_list"),getLocalStorageValue:e,initializeTodoList:()=>{const t=`{\n            "current_tab": ${h.getCurrentTabIndex()},\n            "tabs": {}\n        }`,e=JSON.parse(t);s(e)},toggleLoading:()=>{t=!t},isLoading:()=>t}})(),G=(()=>{const p=(t,e="New Tab")=>{const s=E(e),n=j.addNewTabToDOM(s);if(C(n),!X.isLoading()&&(X.addTab(s),f.checkIfOnlyOneTab())){const t=D();j.addCurrentTabIndicator(),X.setCurrentTab(t)}return s},C=t=>{e(t),n(t),a(t)},S=(t,e=h.getCurrentTabIndex(),s="New Task Title",n="Task Due Date",a="Task Description",o="Task Notes",c=!1,i=!1)=>{if(null===h.getCurrentTabIndex())return void K();const l=L(e,s,n,a,o,c,i),r=j.addNewTaskToDOM(l);return y(r),X.isLoading()||X.addTask(h.getCurrentTabIndex(),l),l},y=t=>{d(t),c(t),r(t),k(t),l(t),m(t)},G=t=>{u(t),g(t),b(t)},K=()=>{const t=p(event,"Instructions"),e=S(event,t,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!1,!1);j.toggleTaskDOMComplete(e),j.changePinButtonImage(e),j.shiftTaskElementPosition(e),Y(t,e,"If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!1),Y(t,e,"Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!1),Y(t,e,"Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!1)},Y=(t,e,s,n)=>{const a=q(t,e,s,n),o=j.addNewChecklistTaskToDOM(e,a);j.toggleChecklistTaskDOMComplete(e,a),G(o),X.isLoading()||X.addChecklistTask(t,e,a)},Z=()=>{X.toggleLoading(),tt(),et(),X.toggleLoading()},tt=()=>{const t=X.getCurrentTabIndex();h.setCurrentTabIndex(t)},et=()=>{const t=X.getTabObjects();for(const e in t)if(null===t[e])h.addTask(void 0);else{const t=X.getTabTitle(e),s=p(event,t);st(s,e)}j.addCurrentTabIndicator()},st=(t,e)=>{const s=f.getTabObject(t),n=X.getTaskObjects(t);for(const a in n)if(null===n[a])s.addTask(void 0);else{const s=X.getTaskValues(e,a),n=s[0],o=s[1],c=s[2],i=s[3],l=s[4],r=s[5];let d;t===h.getCurrentTabIndex()?(d=S(event,t,n,o,c,i,l,r),j.toggleTaskDOMComplete(d),j.changePinButtonImage(d),j.shiftTaskElementPosition(d)):d=L(t,n,o,c,i,l,r),nt(t,e,d,a)}},nt=(t,e,s,n)=>{const a=f.getTaskObject(t,s),o=X.getChecklistTaskObjects(t,s);for(const c in o)if(null===o[c])a.addTask(void 0);else{const a=X.getChecklistTaskValues(e,n,c),o=a[0],i=a[1];let l;l=t===h.getCurrentTabIndex()?Y(t,s,o,i):q(t,s,o,i)}},at=()=>{t(),o()};return{addTab:p,insertTabInputElement:t=>{if(!f.checkForExistingInputElement(t,"Tab")){const e=f.getTabIndex(t),n=j.insertTabInputElement(e);$(e),j.setTabInputElementValue(e),s(n)}},updateTab:t=>{if("Enter"===t.code){const e=f.getTabIndex(t),s=f.getNewValue(t);I(e,s);const n=j.insertTabNameElement(e);w(e),a(n),X.setTabName(e)}},switchTab:t=>{if(!f.checkIfWasCurrentTab(t)){const e=f.getTabIndex(t);v(e),M(),j.addCurrentTabIndicator(),z(),j.loadTasksFromNewCurrentTab(),X.setCurrentTab(e)}},removeTab:t=>{const e=f.getTabIndex(t);if(W(e),P(e),X.removeTab(e),f.checkIfWasCurrentTab(t)){const t=D();j.addCurrentTabIndicator(),z(),X.setCurrentTab(t),f.checkIfNoMoreTabs()||j.loadTasksFromNewCurrentTab()}},addTabListeners:C,addTask:S,insertTaskInputElement:t=>{if(!f.checkForExistingInputElement(t,"Task")){const e=f.getTaskIndex(t),s=f.getTaskSubcontainerType(t);B(e,s);const n=j.insertTaskInputElement(e,s);j.setTaskInputElementValue(e,s),i(n)}},updateTask:t=>{if("Enter"===t.code){const e=f.getTaskIndex(t),s=f.getTaskSubcontainerType(t),n=f.getNewValue(t);x(e,s,n),j.insertTaskSubcontentElement(e,s),H(e,s),X.setTaskSubcontainerValue(h.getCurrentTabIndex(),e,s)}},toggleTaskPin:t=>{const e=f.getTaskIndex(t);j.toggleAnimations(e,"Enable"),N(e),j.changePinButtonImage(e),j.shiftTaskElementPosition(e),X.toggleTaskPinned(h.getCurrentTabIndex(),e)},toggleTaskComplete:t=>{const e=f.getTaskIndex(t);O(e),j.toggleTaskDOMComplete(e),X.toggleTaskCompleted(h.getCurrentTabIndex(),e)},removeTask:t=>{const e=f.getTaskIndex(t);Q(e),V(e),X.removeTask(h.getCurrentTabIndex(),e)},addTaskListeners:y,addNewChecklistTask:t=>{const e=h.getCurrentTabIndex(),s=f.getTaskIndex(t),n=q(e,s),a=j.addNewChecklistTaskToDOM(s,n);G(a),X.isLoading()||X.addChecklistTask(h.getCurrentTabIndex(),s,n)},insertChecklistTaskInputElement:t=>{if(!f.checkForExistingInputElement(t,"Checklist Task")){const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t);R(e,s);const n=j.insertChecklistTaskInputElement(e,s);j.setChecklistTaskInputElementValue(e,s),T(n)}},updateChecklistTask:t=>{if("Enter"===t.code){const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t),n=f.getNewValue(t);A(e,s,n),j.insertChecklistTaskDescriptionElement(e,s),F(e,s),X.setChecklistTaskDescription(h.getCurrentTabIndex(),e,s)}},toggleChecklistTaskComplete:t=>{const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t);_(e,s),j.toggleChecklistTaskDOMComplete(e,s),X.toggleChecklistTaskCompleted(h.getCurrentTabIndex(),e,s)},removeChecklistTask:t=>{const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t);U(e,s),J(e,s),X.removeChecklistTask(h.getCurrentTabIndex(),e,s)},addChecklistTaskListeners:G,toggleDisplayTaskDetails:t=>{const e=f.getTaskIndex(t);f.tryingToDoubleClick(e)||(j.toggleAnimations(e,"Disable"),j.toggleDisplayTaskDetails(e),j.rotateChevronButton(e))},loadInInstructionsPage:K,loadInLocalStorage:Z,loadInTabObjects:et,loadInInitialListeners:at,loadInPage:()=>{at(),X.checkForExistingStorage()?Z():(X.initializeTodoList(),K())}}})();G.loadInPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MEJBQ2hCVSxLQUVBckQsRUFBZ0I0QyxxQkFDaEJNLElBQ0gsRUE2QlIsRUFwWG9CLEdDUHJCblMsRUFBYWlULFkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2V2ZW50X2Fzc2lnbmVyX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fbGlzdF9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy90aXRsZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9oZWxwZXJfZnVuY3Rpb25zLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFiX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFza19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9waW5uZWRfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvY2hlY2tsaXN0X3Rhc2tfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ET01fY29udHJvbGxlcl9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9vYmplY3RfY29udHJvbGxlcl9yZW1vdmVfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb19saXN0X3N0b3JhZ2Vfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvZXZlbnRfYnVuZGxlcl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfYnVuZGxlcl9vYmplY3RcIjtcblxuY29uc3QgZXZlbnRBc3NpZ25lciA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZFRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhYlwiKTtcbiAgICAgICAgYWRkVGFiQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuYWRkVGFiKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYkVkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYWJJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFkZFRhYklucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFiKVxuICAgIH1cbiAgICBjb25zdCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlbW92ZS10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJSZW1vdmVCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYWIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkU3dpdGNoVGFiTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiU3dpdGNoQnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5zd2l0Y2gtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiU3dpdGNoQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuc3dpdGNoVGFiKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgYWRkTmV3VGFza0xpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdG8tZG8tdGFza1wiKTtcbiAgICAgICAgbmV3VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmFkZFRhc2spO1xuICAgIH1cbiAgICBjb25zdCBhZGRFZGl0VGFza0xpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhc2tcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrRWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVUYXNrUGluTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1BpbkJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXBpblwiKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza1BpbkJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZVRhc2tQaW4pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlVGFza0NvbXBsZXRlTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlQ2hlY2tib3hlcyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tib3ggb2YgdGFza0NvbXBsZXRlQ2hlY2tib3hlcykge1xuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci50b2dnbGVUYXNrQ29tcGxldGUpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXJlbW92ZS10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza1JlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhc2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tCdXR0b25zID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5hZGQtY2hlY2tsaXN0LXRhc2tcIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIG5ld0NoZWNrbGlzdFRhc2tCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5hZGROZXdDaGVja2xpc3RUYXNrKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LWNoZWNrbGlzdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgY2hlY2tsaXN0RWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlQ2hlY2tsaXN0VGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVja2JveCBvZiBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVtb3ZlLWNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlQ2hlY2tsaXN0VGFzayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVEaXNwbGF5VGFza0RldGFpbHNMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrVG9nZ2xlRGlzcGxheUJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tUb2dnbGVEaXNwbGF5QnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkTmV3VGFiTGlzdGVuZXIsXG4gICAgICAgIGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lcixcbiAgICAgICAgYWRkVGFiSW5wdXRMaXN0ZW5lcixcbiAgICAgICAgYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXIsXG4gICAgICAgIGFkZFN3aXRjaFRhYkxpc3RlbmVyLFxuICAgICAgICBhZGROZXdUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZEVkaXRUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZFRhc2tJbnB1dExpc3RlbmVyLFxuICAgICAgICBhZGRUb2dnbGVUYXNrUGluTGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyLFxuICAgICAgICBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIsXG4gICAgICAgIGFkZE5ld0NoZWNrbGlzdFRhc2tMaXN0ZW5lcixcbiAgICAgICAgYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcixcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyLFxuICAgICAgICBhZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZURpc3BsYXlUYXNrRGV0YWlsc0xpc3RlbmVyXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJjb25zdCBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgY2hlY2tsaXN0ID0gW107XG4gICAgY29uc3QgZ2V0VGFza0luZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0Lmxlbmd0aCAtIDE7XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgICAgICBjaGVja2xpc3QucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBjaGVja2xpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHJldHVybiBnZXRUYXNrSW5kZXgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlVGFzayhpbmRleCkge1xuICAgICAgICAgICAgY2hlY2tsaXN0W2luZGV4XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tsaXN0O1xuICAgICAgICB9LFxuICAgICAgICBnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja2xpc3RbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9OyIsIi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvTGlzdCA9ICgoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRUYWIgPSAwO1xuICAgIGNvbnN0IGdldEN1cnJlbnRUYWJJbmRleCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWI7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDdXJyZW50VGFiSW5kZXggPSAobmV3Q3VycmVudFRhYikgPT4ge1xuICAgICAgICBpZiAobmV3Q3VycmVudFRhYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY3VycmVudFRhYiA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50VGFiID0gTnVtYmVyKG5ld0N1cnJlbnRUYWIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYk9iamVjdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWJPYmplY3Q7XG4gICAgfVxuICAgIGxldCBvYmplY3QgPSB7XG4gICAgICAgIGdldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgc2V0Q3VycmVudFRhYkluZGV4LFxuICAgICAgICBnZXRDdXJyZW50VGFiT2JqZWN0XG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59KSgpO1xuXG5leHBvcnQgeyB0b0RvTGlzdCB9OyIsImNvbnN0IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsVGl0bGUpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBpbml0aWFsVGl0bGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tUaXRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza1RpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcblxuY29uc3QgaGVscGVyRnVuY3Rpb25zID0gKCgpID0+IHtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB3aGlsZSAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gXCJ0YWItdGl0bGVcIikge1xuICAgICAgICAgICAgdGFiRWxlbWVudCA9IHRhYkVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50ID0gKGV2ZW50LCBlbGVtZW50VHlwZSkgPT4ge1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFza1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2staW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiQ2hlY2tsaXN0IFRhc2tcIikge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0lmV2FzQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBpZiAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gXCJjdXJyZW50LXRhYlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZPbmx5T25lVGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJzID0gQXJyYXkuZnJvbSh0b0RvVGFiU2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi10aXRsZVwiKSk7XG4gICAgICAgIGlmICh0b0RvVGFicy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2tcIikpIHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50ID0gdGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QpXG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwidG8tZG8tdGFzay1zdWJjb250YWluZXJcIikpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKGNoZWNrbGlzdFRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwiY2hlY2tsaXN0LXRhc2tcIikpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20oY2hlY2tsaXN0VGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBnZXRUYXNrSW5kZXggPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgcmV0dXJuIHRhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldENoZWNrbGlzdFRhc2tJbmRleCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiSW5kZXggPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHJldHVybiB0YWJJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldE5ld1ZhbHVlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrU3ViY29udGFpbmVyVHlwZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50Q2xhc3NlcyA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250YWluZXJUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tdGl0bGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIlRpdGxlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkR1ZSBEYXRlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkRlc2NyaXB0aW9uXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tbm90ZXMtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIk5vdGVzXCI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyVHlwZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRpdGxlLXNlY3Rpb25cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzLXNlY3Rpb25cIik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tFbGVtZW50ID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhc2staW5kZXg9JyR7dGFza0luZGV4fSddYCk7XG4gICAgICAgIHJldHVybiB0YXNrRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBnZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNoZWNrbGlzdC10YXNrLWluZGV4PScke2NoZWNrbGlzdFRhc2tJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGdldFRhYkVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHt0YWJJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHRyeWluZ1RvRG91YmxlQ2xpY2sgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdGFza0NsYXNzZXMgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIGlmICh0YXNrQ2xhc3Nlcy5pbmNsdWRlcyhcIm1pZC1hbmltYXRpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiT2JqZWN0ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIHJldHVybiB0YWJPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrT2JqZWN0ID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gZ2V0VGFiT2JqZWN0KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IHRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDaGVja2xpc3RUYXNrT2JqZWN0ID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrT2JqZWN0O1xuICAgIH1cbiAgICBjb25zdCBjaGVja0lmTm9Nb3JlVGFicyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFicyA9IEFycmF5LmZyb20odG9Eb1RhYlNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbChcIi50YWItdGl0bGVcIikpO1xuICAgICAgICBpZiAodG9Eb1RhYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGNoZWNrSWZXYXNDdXJyZW50VGFiLCBjaGVja0lmT25seU9uZVRhYiwgZ2V0VGFza0luZGV4LFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrSW5kZXgsIGdldFRhYkluZGV4LCBnZXROZXdWYWx1ZSwgZ2V0VGFza1N1YmNvbnRhaW5lclR5cGUsXG4gICAgICAgIGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50LCBnZXRUYXNrRWxlbWVudCwgZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQsXG4gICAgICAgIGdldFRhYkVsZW1lbnQsIGNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQsIHRyeWluZ1RvRG91YmxlQ2xpY2ssIGdldFRhYk9iamVjdCwgZ2V0VGFza09iamVjdCwgZ2V0Q2hlY2tsaXN0VGFza09iamVjdCwgY2hlY2tJZk5vTW9yZVRhYnMgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9OyIsImNvbnN0IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRGVzY3JpcHRpb24pID0+IHtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBpbml0aWFsRGVzY3JpcHRpb247XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza0Rlc2NyaXB0aW9uKG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0iLCIvLyBvcmlnaW5hbCB3aGVyZSBhbGwgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBnZXQgcmV0dXJuZWQsIHNvIG5vIHByaXZhdGUgZmllbGRzIChjb21wbGV0ZWQgc2hvdWxkIGJlIHByaXZhdGUpXG4vLyBrZWVwaW5nIGZvciBwb3N0ZXJpdHksIHByb2JhYmx5IHdpbGwgZGVsZXRlZCBhdCB0aGUgZW5kXG4vLyBjb25zdCBjYW5Db21wbGV0ZSA9IChvYmplY3QpID0+ICh7XG4vLyAgICAgY29tcGxldGVkOiBmYWxzZSxcbi8vICAgICB0b2dnbGU6ICgpID0+IHtcbi8vICAgICAgICAgaWYgKG9iamVjdC5jb21wbGV0ZWQpIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSBmYWxzZTtcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSB0cnVlO1xuLy8gICAgICAgICB9O1xuLy8gICAgIH0sXG4vLyAgICAgZ2V0Q29tcGxldGVkU3RhdGU6ICgpID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG9iamVjdC5jb21wbGV0ZWRcbi8vICAgICB9XG4vLyB9KTtcblxuY29uc3QgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsQ29tcGxldGVkU3RhdGUpID0+IHtcbiAgICBsZXQgY29tcGxldGVkID0gaW5pdGlhbENvbXBsZXRlZFN0YXRlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICB0b2dnbGVDb21wbGV0ZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldENvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyB0b0RvVGFzayB9IGZyb20gXCIuL3RvZG9fdGFza19vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdFRhc2tPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3RfdGFza19vYmplY3RcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYlRvVG9kb0FycmF5ID0gKHRhYk5hbWU9XCJOZXcgVGFiXCIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiID0gdG9Eb1RhYih0YWJOYW1lKTtcbiAgICAgICAgcmV0dXJuIHRvRG9MaXN0LmFkZFRhc2sobmV3VGFiKTtcbiAgICB9XG4gICAgY29uc3QgZWRpdFRhYk5hbWUgPSAodGFiSW5kZXgsIG5ld1RhYk5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgdGFiT2JqZWN0LnNldFRhc2tUaXRsZShuZXdUYWJOYW1lKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlQ3VycmVudFRhYiA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiSW5kZXgpXG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJBcnJheSA9IHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgIGxldCBmaXJzdFRhYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCB0YWIgaW4gdGFiQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0YWJBcnJheVt0YWJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRhYiA9IHRhYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RUYWI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KG51bGwpXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdUYXNrVG9UYWIgPSAodGFiSW5kZXgsIHRpdGxlPVwiTmV3IFRhc2sgVGl0bGVcIiwgZHVlRGF0ZT1cIlRhc2sgRHVlIERhdGVcIiwgZGVzY3JpcHRpb249XCJUYXNrIERlc2NyaXB0aW9uXCIsIG5vdGVzPVwiVGFzayBOb3Rlc1wiLCBwaW5uZWQ9ZmFsc2UsIGNvbXBsZXRlZD1mYWxzZSkgPT4ge1xuICAgICAgICAvLyBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFiSW5kZXgpXG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB0b0RvVGFzayh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzLCBwaW5uZWQsIGNvbXBsZXRlZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld1Rhc2spXG4gICAgICAgIGNvbnN0IG5ld1Rhc2tJbmRleCA9IHRhYk9iamVjdC5hZGRUYXNrKG5ld1Rhc2spO1xuICAgICAgICByZXR1cm4gbmV3VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZWRpdFRhc2tPYmplY3RJbmZvID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSwgbmV3VGFza1N1YmNvbnRlbnRWYWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrVGl0bGUobmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0LnNldFRhc2tEdWVEYXRlKG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrRGVzY3JpcHRpb24obmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0LnNldFRhc2tOb3RlcyhuZXdUYXNrU3ViY29udGVudFZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tDb21wbGV0ZSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIHRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCwgZGVzY3JpcHRpb249XCJDaGVja2xpc3QgVGFzayBEZXNjcmlwdGlvblwiLCBjb21wbGV0ZWQ9ZmFsc2UpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFza0luZGV4KVxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSlcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IHRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFzayA9IGNoZWNrbGlzdFRhc2tPYmplY3QoZGVzY3JpcHRpb24sIGNvbXBsZXRlZCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tJbmRleCA9IHRhc2tPYmplY3QuYWRkVGFzayhuZXdDaGVja2xpc3RUYXNrKTtcbiAgICAgICAgcmV0dXJuIG5ld0NoZWNrbGlzdFRhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgsIG5ld0Rlc2NyaXB0aW9uVmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjaGVja2xpc3RUYXNrT2JqZWN0LnNldFRhc2tEZXNjcmlwdGlvbihuZXdEZXNjcmlwdGlvblZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW4gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICB0YXNrT2JqZWN0LnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJUb1RvZG9BcnJheSwgZWRpdFRhYk5hbWUsIHVwZGF0ZUN1cnJlbnRUYWIsIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLFxuICAgICAgICBhZGROZXdUYXNrVG9UYWIsIGVkaXRUYXNrT2JqZWN0SW5mbywgdG9nZ2xlVGFza0NvbXBsZXRlLCBhZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrLFxuICAgICAgICBlZGl0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uLCB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGUsIHRvZ2dsZVRhc2tQaW4sIH07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFiID0gKHRpdGxlKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1RhYiB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFzayA9ICh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzLCBwaW5uZWQsIGNvbXBsZXRlZCkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgdGl0bGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIHRpdGxlKSwgXG4gICAgICAgIGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkZXNjcmlwdGlvbiksXG4gICAgICAgIGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGR1ZURhdGUpLFxuICAgICAgICBub3Rlc0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgbm90ZXMpLFxuICAgICAgICAvLyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgICAgIHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgcGlubmVkKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBjb21wbGV0ZWQpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1Rhc2sgfTsiLCJjb25zdCBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRHVlRGF0ZSkgPT4ge1xuICAgIGxldCBkdWVEYXRlID0gaW5pdGlhbER1ZURhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEdWVEYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGR1ZURhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tEdWVEYXRlKG5ld0R1ZURhdGUpIHtcbiAgICAgICAgICAgIGR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsTm90ZXMpID0+IHtcbiAgICBsZXQgbm90ZXMgPSBpbml0aWFsTm90ZXM7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tOb3RlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBub3RlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza05vdGVzKG5ld05vdGVzKSB7XG4gICAgICAgICAgICBub3RlcyA9IG5ld05vdGVzO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBub3Rlc0JlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxQaW5uZWRTdGF0ZSkgPT4ge1xuICAgIGxldCBwaW5uZWQgPSBpbml0aWFsUGlubmVkU3RhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZVBpbm5lZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKHBpbm5lZCkge1xuICAgICAgICAgICAgICAgIHBpbm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwaW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UGlubmVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlubmVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuXG4vLyBvcmlnaW5hbCB3aGVyZSBvYmplY3Qgd291bGQgbmVlZCB0byBoYXZlIE9iamVjdC5hc3NpZ24oKSBmb3IgZXZlcnkgaW5zdGFuY2Vcbi8vIGtlZXBpbmcgZm9yIHBvc3Rlcml0eSwgcHJvYmFibHkgd2lsbCBkZWxldGVkIGF0IHRoZSBlbmRcbi8vIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24pID0+IHtcbiAgICAvLyBjb25zdCBnZXRUYXNrRGVzY3JpcHRpb24gPSAoKSA9PiB7XG4gICAgLy8gICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAvLyB9O1xuICAgIC8vIGNvbnN0IHNldFRhc2tEZXNjcmlwdGlvbiA9IChuZXdEZXNjcmlwdGlvbikgPT4ge1xuICAgIC8vICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIC8vIH07XG4vLyAgICAgcmV0dXJuIHsgZ2V0VGFza0Rlc2NyaXB0aW9uLCBzZXRUYXNrRGVzY3JpcHRpb24gfTtcbi8vIH07XG5cbmNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24sIGNvbXBsZXRlZCkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBjb21wbGV0ZWQpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBldmVudEJ1bmRsZXIgfSBmcm9tIFwiLi9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuXG5jb25zdCBET01Db250cm9sbGVyQWRkRWRpdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgYWRkVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFiXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IG5ld1RhYkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3RUaXRsZSA9IG5ld1RhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgbmV3VGFiRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiLXRpdGxlXCIpO1xuICAgICAgICBuZXdUYWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXggPSBpbmRleDtcbiAgICAgICAgbmV3VGFiRWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3dpdGNoLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInRhYi1uYW1lXCI+VEFCIE5BTUUgUExBQ0VIT0xERVI8L2gyPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YWIgbmFtZSBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFiIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHRhYk5hbWVFbGVtZW50ID0gbmV3VGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYi1uYW1lXCIpO1xuICAgICAgICB0YWJOYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5ld1RhYk9iamVjdFRpdGxlO1xuICAgICAgICB0b0RvVGFiU2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFiRWxlbWVudCwgYWRkVGFiQnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIG5ld1RhYkVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IHNldFRhYklucHV0RWxlbWVudFZhbHVlID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0YWJOYW1lID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBpbnB1dEVsZW1lbnQudmFsdWUgPSB0YWJOYW1lO1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYi1uYW1lLWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKGlucHV0RWxlbWVudCwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYk5hbWVFbGVtZW50ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IHRhYkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwic3dpdGNoLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGFiQnV0dG9uTmFtZS5jbGFzc0xpc3QuYWRkKFwidGFiLW5hbWVcIik7XG4gICAgICAgIHRhYkJ1dHRvbk5hbWUudGV4dENvbnRlbnQgPSB0YWJOYW1lO1xuICAgICAgICB0YWJCdXR0b24uYXBwZW5kQ2hpbGQodGFiQnV0dG9uTmFtZSk7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRhYkJ1dHRvbiwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBhZGRDdXJyZW50VGFiSW5kaWNhdG9yID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWJJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQoY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgdGFiRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImN1cnJlbnQtdGFiXCIpO1xuICAgIH1cbiAgICBjb25zdCBhZGROZXdUYXNrVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgdG9Eb0NvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbmV3VGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLXRhc2tcIik7XG4gICAgICAgIG5ld1Rhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4ID0gaW5kZXg7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tUaXRsZSA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tEZXNjcmlwdGlvbiA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tEdWVEYXRlID0gbmV3VGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrTm90ZXMgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICBjb25zdCBuZXdUYXNrQ29tcGxldGVJRCA9IGB0by1kby1jb21wbGV0ZS1jaGVja2JveC0ke2luZGV4fWA7XG4gICAgICAgIG5ld1Rhc2tFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby10YXNrLW92ZXJ2aWV3XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLXRpdGxlLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG8tZG8tdGl0bGVcIj5USVRMRSBQTEFDRUhPTERFUjwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby1waW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvcGluLXVucGlubmVkLnBuZ1wiIGFsdD1cIlBpbiB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay10aXRsZSBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgdGl0bGUgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tcmVtb3ZlLXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIlJlbW92ZSB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tY29tcGxldGUtc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tY29tcGxldGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJJRCBQTEFDRUhPTERFUlwiIGNsYXNzPVwidG8tZG8tY29tcGxldGUtbGFiZWxcIj5Db21wbGV0ZWQ6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiXCIgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1jaGVja2JveFwiIGlkPVwiSUQgUExBQ0VIT0xERVJcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby10YXNrLWNoYW5nZS1kaXNwbGF5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jaGV2cm9uLWRvd24ucG5nXCIgYWx0PVwiQ2hhbmdlIHRhc2sgZGlzcGxheSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWR1ZS1kYXRlLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0by1kby1kdWUtZGF0ZVwiPkRVRSBEQVRFIFBMQUNFSE9MREVSPC9wPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLWR1ZS1kYXRlIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBkdWUgZGF0ZSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyIGFuaW1hdGlvbi10YXJnZXRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uXCI+REVTQ1JJUFRJT04gUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1kZXNjcmlwdGlvbiBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBkZXNjcmlwdGlvbiBidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLW5vdGVzLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXIgYW5pbWF0aW9uLXRhcmdldFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tbm90ZXNcIj5OT1RFUyBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLW5vdGVzIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIG5vdGVzIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGFjdGlvbj1cIlwiIGNsYXNzPVwiY2hlY2tsaXN0IGFuaW1hdGlvbi10YXJnZXRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2tsaXN0LWhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8bGVnZW5kIGNsYXNzPVwiY2hlY2tsaXN0LWxhYmVsXCI+Q2hlY2tsaXN0PC9sZWdlbmQ+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJhZGQtY2hlY2tsaXN0LXRhc2tcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wbHVzLnBuZ1wiIGFsdD1cIkFkZCBjaGVja2xpc3QgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgdGl0bGVFbGVtZW50ID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10aXRsZVwiKTtcbiAgICAgICAgdGl0bGVFbGVtZW50LnRleHRDb250ZW50ID0gbmV3VGFza1RpdGxlO1xuICAgICAgICBjb25zdCBkdWVEYXRlRWxlbWVudCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGVcIik7XG4gICAgICAgIGR1ZURhdGVFbGVtZW50LnRleHRDb250ZW50ID0gXCJEdWUgT246IFwiICsgbmV3VGFza0R1ZURhdGU7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uRWxlbWVudCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGRlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IFwiRGVzY3JpcHRpb246IFwiICsgbmV3VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCBub3Rlc0VsZW1lbnQgPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzXCIpO1xuICAgICAgICBub3Rlc0VsZW1lbnQudGV4dENvbnRlbnQgPSBcIk5vdGVzOiBcIiArIG5ld1Rhc2tOb3RlcztcbiAgICAgICAgdG9Eb0NvbnRlbnQuYXBwZW5kQ2hpbGQobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUxhYmVsID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcImxhYmVsXCIpO1xuICAgICAgICBjb21wbGV0ZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBuZXdUYXNrQ29tcGxldGVJRCk7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlQ2hlY2tib3ggPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb21wbGV0ZUNoZWNrYm94LnNldEF0dHJpYnV0ZShcImlkXCIsIG5ld1Rhc2tDb21wbGV0ZUlEKTtcbiAgICAgICAgcmV0dXJuIG5ld1Rhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIuaW5zZXJ0QmVmb3JlKGlucHV0RWxlbWVudCwgdGFza1N1YmNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUgPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrT2JqZWN0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChidXR0b25UeXBlID09PSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3RWYWx1ZSA9IHRhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0VmFsdWUgPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0VmFsdWUgPSB0YXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza09iamVjdFZhbHVlID0gdGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gdGFza09iamVjdFZhbHVlO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgY29uc3QgdGFza1RpdGxlID0gdGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tdGl0bGVcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrVGl0bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrRHVlRGF0ZSA9IHRhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kdWUtZGF0ZVwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiRHVlIE9uOiBcIiArIHRhc2tEdWVEYXRlO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gdGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiRGVzY3JpcHRpb246IFwiICsgdGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgY29uc3QgdGFza05vdGVzID0gdGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1ub3Rlc1wiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiTm90ZXM6IFwiICsgdGFza05vdGVzO1xuICAgICAgICB9O1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5pbnNlcnRCZWZvcmUodGFza1N1YmNvbnRlbnRFbGVtZW50LCB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgY29uc3QgdG9nZ2xlVGFza0RPTUNvbXBsZXRlID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUNoZWNrYm94ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9ICB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrQ29tcGxldGVkU3RhdGVkID0gdGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpO1xuICAgICAgICBpZiAodGFza0NvbXBsZXRlZFN0YXRlZCkge1xuICAgICAgICAgICAgY29tcGxldGVDaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbXBsZXRlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NID0gKHRhc2tJbmRleCwgbmV3Q2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdEVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhuZXdDaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtdGFza1wiKTtcbiAgICAgICAgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQuZGF0YXNldC5jaGVja2xpc3RUYXNrSW5kZXggPSBuZXdDaGVja2xpc3RUYXNrSW5kZXg7XG4gICAgICAgIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImNoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtuZXdDaGVja2xpc3RUYXNrSW5kZXh9XCIgY2xhc3M9XCJjaGVja2xpc3QtY29tcGxldGUtY2hlY2tib3hcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke25ld0NoZWNrbGlzdFRhc2tJbmRleH1cIiBjbGFzcz1cImNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIERFU0NSSVBUSU9OIFBMQUNFSE9MREVSXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtY2hlY2tsaXN0LXRhc2tcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgY2hlY2tsaXN0IHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJyZW1vdmUtY2hlY2tsaXN0LXRhc2tcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2xvc2UucG5nXCIgYWx0PVwiRWRpdCBjaGVja2xpc3QgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBgXG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQgPSBuZXdDaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gbmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjaGVja2xpc3RFbGVtZW50LmFwcGVuZENoaWxkKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLmFwcGVuZENoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudFZhbHVlID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtaW5wdXRcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgYGNoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtjaGVja2xpc3RUYXNrSW5kZXh9YCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24uYXBwZW5kQ2hpbGQoY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgaWYgKGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tsaXN0LXRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2hhbmdlUGluQnV0dG9uSW1hZ2UgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBwaW5CdXR0b24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXBpblwiKVxuICAgICAgICBjb25zdCBwaW5CdXR0b25JbWFnZSA9IHBpbkJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgICAgICB0YXNrT2JqZWN0LmdldFBpbm5lZFN0YXRlKClcbiAgICAgICAgICAgID8gcGluQnV0dG9uSW1hZ2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi9hc3NldHMvcGluLXBpbm5lZC5wbmdcIilcbiAgICAgICAgICAgIDogcGluQnV0dG9uSW1hZ2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi9hc3NldHMvcGluLXVucGlubmVkLnBuZ1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IHNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbiA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50SW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgdGFza0NvbnRlbnRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICBpZiAodGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGlubmVkLXRhc2tcIikpO1xuICAgICAgICAgICAgaWYgKGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCB0YXNrQ29udGVudFNlY3Rpb24uZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUVuZEluZGV4ID0gbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFBpbm5lZFRhc2tFbGVtZW50ID0gbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzW2FycmF5RW5kSW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGlubmVkVGFza0VsZW1lbnQgb2YgbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpbm5lZFRhc2tFbGVtZW50SW5kZXggPSBwaW5uZWRUYXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tFbGVtZW50SW5kZXggPCBwaW5uZWRUYXNrRWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCBwaW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaW5uZWRUYXNrRWxlbWVudCA9PT0gbGFzdFBpbm5lZFRhc2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGlubmVkVGFza0VsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgdGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBpbm5lZC10YXNrXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMgPSBBcnJheS5mcm9tKHRhc2tDb250ZW50U2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXRhc2s6bm90KC5waW5uZWQtdGFzaylcIikpO1xuICAgICAgICAgICAgaWYgKGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRhc2tDb250ZW50U2VjdGlvbi5hcHBlbmRDaGlsZCh0YXNrRWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5RW5kSW5kZXggPSBsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50ID0gbGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHNbYXJyYXlFbmRJbmRleF07XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1bnBpbm5lZFRhc2tFbGVtZW50IG9mIGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVucGlubmVkVGFza0VsZW1lbnRJbmRleCA9IHVucGlubmVkVGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrRWxlbWVudEluZGV4IDwgdW5waW5uZWRUYXNrRWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uaW5zZXJ0QmVmb3JlKHRhc2tFbGVtZW50LCB1bnBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVucGlubmVkVGFza0VsZW1lbnQgPT09IGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uYXBwZW5kQ2hpbGQodGFza0VsZW1lbnQsIGxhc3RVbnBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwaW5uZWQtdGFza1wiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUFuaW1hdGlvbnMgPSAodGFza0luZGV4LCBhY3Rpb24pID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9nZ2xlRGlzcGxheUJ1dHRvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFzay1jaGFuZ2UtZGlzcGxheVwiKTtcbiAgICAgICAgY29uc3QgYnV0dG9uSW1hZ2UgPSB0b2dnbGVEaXNwbGF5QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzVG9Ub2dnbGUgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYW5pbWF0aW9uLXRhcmdldFwiKSk7XG4gICAgICAgIGVsZW1lbnRzVG9Ub2dnbGUucHVzaChidXR0b25JbWFnZSlcbiAgICAgICAgZWxlbWVudHNUb1RvZ2dsZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcIkVuYWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm8tYW5pbWF0aW9uc1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcIkRpc2FibGVcIil7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibm8tYW5pbWF0aW9uc1wiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgbG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IGxpc3RPZlRhc2tzID0gY3VycmVudFRhYk9iamVjdC5nZXRDaGVja2xpc3RUYXNrcygpO1xuICAgICAgICBmb3IgKGNvbnN0IHRhc2tJbmRleCBpbiBsaXN0T2ZUYXNrcykge1xuICAgICAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGxpc3RPZlRhc2tzW3Rhc2tJbmRleF1cbiAgICAgICAgICAgIGlmICh0YXNrT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUYXNrRWxlbWVudCA9IGFkZE5ld1Rhc2tUb0RPTSh0YXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgIGNoYW5nZVBpbkJ1dHRvbkltYWdlKHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgcmVhcnJhbmdlUGlubmVkVGFza3NQb3NpdGlvbihuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgZXZlbnRCdW5kbGVyLmFkZFRhc2tMaXN0ZW5lcnMobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RPZkNoZWNrbGlzdFRhc2tzID0gdGFza09iamVjdC5nZXRDaGVja2xpc3RUYXNrcygpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hlY2tsaXN0VGFza0luZGV4IGluIGxpc3RPZkNoZWNrbGlzdFRhc2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBsaXN0T2ZDaGVja2xpc3RUYXNrc1tjaGVja2xpc3RUYXNrSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tsaXN0VGFza09iamVjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrRWxlbWVudCA9IGFkZE5ld0NoZWNrbGlzdFRhc2tUb0RPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRCdW5kbGVyLmFkZENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVhcnJhbmdlUGlubmVkVGFza3NQb3NpdGlvbiA9IChuZXdUYXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza0luZGV4ID0gbmV3VGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tDb250ZW50U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYXNrT2JqZWN0LmdldFBpbm5lZFN0YXRlKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5waW5uZWQtdGFza1wiKSk7XG4gICAgICAgICAgICBpZiAobGlzdE9mUGlubmVkVGFza0VsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRhc2tDb250ZW50U2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFza0VsZW1lbnQsIHRhc2tDb250ZW50U2VjdGlvbi5maXJzdEVsZW1lbnRDaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5RW5kSW5kZXggPSBsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0UGlubmVkVGFza0VsZW1lbnQgPSBsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHNbYXJyYXlFbmRJbmRleF07XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwaW5uZWRUYXNrRWxlbWVudCBvZiBsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGlubmVkVGFza0VsZW1lbnRJbmRleCA9IHBpbm5lZFRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRhc2tJbmRleCA8IHBpbm5lZFRhc2tFbGVtZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tDb250ZW50U2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFza0VsZW1lbnQsIHBpbm5lZFRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBpbm5lZFRhc2tFbGVtZW50ID09PSBsYXN0UGlubmVkVGFza0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQaW5uZWRUYXNrRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmVuZFwiLCBuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBuZXdUYXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicGlubmVkLXRhc2tcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzVG9Ub2dnbGUgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYW5pbWF0aW9uLXRhcmdldFwiKSk7XG4gICAgICAgIGVsZW1lbnRzVG9Ub2dnbGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudENsYXNzZXMgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Q2xhc3Nlcy5pbmNsdWRlcyhcImhpZGUtdG8tZG8tZGV0YWlsc1wiKSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtdG8tZG8tZGV0YWlsc1wiKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNwbGF5LXRvLWRvLWRldGFpbHNcIik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGUtdG8tZG8tZGV0YWlsc1wiKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNwbGF5LXRvLWRvLWRldGFpbHNcIik7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnREb3VibGVDbGljayh0YXNrRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCBwcmV2ZW50RG91YmxlQ2xpY2sgPSAodGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1pZC1hbmltYXRpb25cIik7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1pZC1hbmltYXRpb25cIik7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH07XG4gICAgY29uc3Qgcm90YXRlQ2hldnJvbkJ1dHRvbiA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hldnJvbkJ1dHRvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFzay1jaGFuZ2UtZGlzcGxheVwiKTtcbiAgICAgICAgY29uc3QgYnV0dG9uSW1hZ2UgPSBjaGV2cm9uQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkltYWdlQ2xhc3NlcyA9IEFycmF5LmZyb20oYnV0dG9uSW1hZ2UuY2xhc3NMaXN0KTtcbiAgICAgICAgaWYgKGJ1dHRvbkltYWdlQ2xhc3Nlcy5sZW5ndGggPT09IDAgfHwgYnV0dG9uSW1hZ2VDbGFzc2VzLmluY2x1ZGVzKFwicm90YXRlLWhpZGUtdGFzay1kZXRhaWxzXCIpKSB7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwicm90YXRlLWhpZGUtdGFzay1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LmFkZChcInJvdGF0ZS1kaXNwbGF5LXRhc2stZGV0YWlsc1wiKTtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5hZGQoXCJyb3RhdGVkLWNoZXZyb25cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uSW1hZ2VDbGFzc2VzLmluY2x1ZGVzKFwicm90YXRlLWRpc3BsYXktdGFzay1kZXRhaWxzXCIpKSB7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwicm90YXRlLWRpc3BsYXktdGFzay1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LmFkZChcInJvdGF0ZS1oaWRlLXRhc2stZGV0YWlsc1wiKTtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJyb3RhdGVkLWNoZXZyb25cIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGROZXdUYWJUb0RPTSxcbiAgICAgICAgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LFxuICAgICAgICBzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSxcbiAgICAgICAgaW5zZXJ0VGFiTmFtZUVsZW1lbnQsXG4gICAgICAgIGFkZEN1cnJlbnRUYWJJbmRpY2F0b3IsXG4gICAgICAgIGxvYWRUYXNrc0Zyb21OZXdDdXJyZW50VGFiLFxuXG4gICAgICAgIGFkZE5ld1Rhc2tUb0RPTSxcbiAgICAgICAgaW5zZXJ0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgc2V0VGFza0lucHV0RWxlbWVudFZhbHVlLFxuICAgICAgICBpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQsXG4gICAgICAgIHRvZ2dsZVRhc2tET01Db21wbGV0ZSxcblxuICAgICAgICBhZGROZXdDaGVja2xpc3RUYXNrVG9ET00sXG4gICAgICAgIGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQsXG4gICAgICAgIHNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSxcbiAgICAgICAgaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCxcbiAgICAgICAgdG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlLFxuXG4gICAgICAgIGNoYW5nZVBpbkJ1dHRvbkltYWdlLFxuICAgICAgICBzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24sXG4gICAgICAgIFxuICAgICAgICB0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMsXG4gICAgICAgIHJvdGF0ZUNoZXZyb25CdXR0b24sXG4gICAgICAgIHRvZ2dsZUFuaW1hdGlvbnNcbiAgICB9O1xufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlckFkZEVkaXQgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlclJlbW92ZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiTmFtZUVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgbGV0IHN3aXRjaFRhYiA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zd2l0Y2gtdGFiXCIpXG4gICAgICAgIHRhYkVsZW1lbnQucmVtb3ZlQ2hpbGQoc3dpdGNoVGFiKTtcbiAgICAgICAgc3dpdGNoVGFiID0gbnVsbFxuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiSW5wdXRFbGVtZW50ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgdGFiRWxlbWVudC5yZW1vdmVDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiRWxlbWVudEZyb21ET00gPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24ucmVtb3ZlQ2hpbGQodGFiRWxlbWVudCk7XG4gICAgICAgIHRhYkVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVzZXRDdXJyZW50VGFiU3RhdHVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjdXJyZW50LXRhYlwiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUYWIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYXNrU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgdG9Eb1Rhc2tTZWN0aW9uLnJlbW92ZUNoaWxkKHRhc2tFbGVtZW50KTtcbiAgICAgICAgdGFza0VsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrU3ViY29udGVudEVsZW1lbnRGcm9tRE9NID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpO1xuICAgICAgICBsZXQgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50LnJlbW92ZUNoaWxkKHRhc2tTdWJjb250ZW50RWxlbWVudCk7XG4gICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IG51bGxcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlVGFza0lucHV0RWxlbWVudCA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQodGFza0luZGV4LCBidXR0b25UeXBlKTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRE9NID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24pO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtaW5wdXRcIik7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5yZW1vdmVDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00gPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0RWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0XCIpO1xuICAgICAgICBsZXQgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjaGVja2xpc3RFbGVtZW50LnJlbW92ZUNoaWxkKGNoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQWxsVGFza0VsZW1lbnRzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrQ29udGVudFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIHRhc2tDb250ZW50U2VjdGlvbi5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICB9O1xuICAgIHJldHVybiB7IHJlbW92ZVRhYk5hbWVFbGVtZW50LCByZW1vdmVUYWJJbnB1dEVsZW1lbnQsIHJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NLFxuICAgICAgICByZXNldEN1cnJlbnRUYWJTdGF0dXMsIHJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSwgcmVtb3ZlVGFza1N1YmNvbnRlbnRFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVtb3ZlVGFza0lucHV0RWxlbWVudCwgcmVtb3ZlQ2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRE9NLCByZW1vdmVDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LFxuICAgICAgICByZW1vdmVDaGVja2xpc3RUYXNrRWxlbWVudERPTSwgcmVtb3ZlQWxsVGFza0VsZW1lbnRzLCB9XG59KSgpO1xuXG5leHBvcnQgeyBET01Db250cm9sbGVyUmVtb3ZlIH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZVRhYkZyb21Ub2RvQXJyYXkgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgdG9Eb0xpc3QucmVtb3ZlVGFzayh0YWJJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYXNrRnJvbVRhYkFycmF5ID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjdXJyZW50VGFiT2JqZWN0LnJlbW92ZVRhc2sodGFza0luZGV4KTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0Zyb21UYXNrQXJyYXkgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIHRhc2tPYmplY3QucmVtb3ZlVGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSwgcmVtb3ZlVGFza0Zyb21UYWJBcnJheSwgcmVtb3ZlQ2hlY2tsaXN0VGFza0Zyb21UYXNrQXJyYXksIH07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IHRvZG9MaXN0U3RvcmFnZSA9ICgoKSA9PiB7XG4gICAgbGV0IGxvYWRpbmdJbkNvbnRlbnQgPSBmYWxzZTtcbiAgICBjb25zdCBhZGRUYWIgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYk9iamVjdCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFiSlNPTlN0cmluZyA9IGB7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiJHt0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCl9XCIsXG4gICAgICAgICAgICBcInRhc2tzXCI6IHt9XG4gICAgICAgIH1gO1xuICAgICAgICBjb25zdCB0YWJQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRhYkpTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdID0gdGFiUGFyc2VkT2JqZWN0O1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDdXJyZW50VGFiID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdGFiSW5kZXggPT09IG51bGxcbiAgICAgICAgICAgID8gKHRvZG9MaXN0UGFyc2VkT2JqZWN0W1wiY3VycmVudF90YWJcIl0gPSBudWxsKVxuICAgICAgICAgICAgOiAodG9kb0xpc3RQYXJzZWRPYmplY3RbXCJjdXJyZW50X3RhYlwiXSA9IE51bWJlcih0YWJJbmRleCkpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdClcbiAgICB9O1xuICAgIGNvbnN0IHNldFRhYk5hbWUgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYk9iamVjdCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRpdGxlXCJdID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDdXJyZW50VGFiSW5kZXggPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJjdXJyZW50X3RhYlwiXTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWJJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhYlRpdGxlID0gKHRhYktleSkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHRhYlRpdGxlID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0aXRsZVwiXTtcbiAgICAgICAgcmV0dXJuIHRhYlRpdGxlO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiT2JqZWN0cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0cyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXTtcbiAgICAgICAgcmV0dXJuIHRhYk9iamVjdHM7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWIgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdID0gbnVsbDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCB0YXNrSlNPTlN0cmluZyA9IGB7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiJHt0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpfVwiLFxuICAgICAgICAgICAgXCJkdWVfZGF0ZVwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpfVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKX1cIixcbiAgICAgICAgICAgIFwibm90ZXNcIjogXCIke3Rhc2tPYmplY3QuZ2V0VGFza05vdGVzKCl9XCIsXG4gICAgICAgICAgICBcInBpbm5lZFwiOiAke3Rhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKX0sXG4gICAgICAgICAgICBcImNvbXBsZXRlZFwiOiAke3Rhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKX0sXG4gICAgICAgICAgICBcImNoZWNrbGlzdF90YXNrc1wiOiB7fVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgdGFza1BhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UodGFza0pTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF0gPSB0YXNrUGFyc2VkT2JqZWN0O1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRUYXNrU3ViY29udGFpbmVyVmFsdWUgPSAodGFiSW5kZXgsIHRhc2tJbmRleCwgc3ViY29udGFpbmVyVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgaWYgKHN1YmNvbnRhaW5lclR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1widGl0bGVcIl0gPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmNvbnRhaW5lclR5cGUgPT09IFwiRHVlIERhdGVcIikge1xuICAgICAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiZHVlX2RhdGVcIl0gPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViY29udGFpbmVyVHlwZSA9PT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJkZXNjcmlwdGlvblwiXSA9IHRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViY29udGFpbmVyVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJub3Rlc1wiXSA9IHRhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW5uZWQgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wicGlubmVkXCJdID0gdGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrQ29tcGxldGVkID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcImNvbXBsZXRlZFwiXSA9IHRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFza1ZhbHVlcyA9ICh0YWJLZXksIHRhc2tLZXkpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBsZXQgdGFza1ZhbHVlcyA9IFtdO1xuICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1widGl0bGVcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrVGl0bGUpO1xuICAgICAgICBjb25zdCB0YXNrRHVlRGF0ZSA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJkdWVfZGF0ZVwiXTtcbiAgICAgICAgdGFza1ZhbHVlcy5wdXNoKHRhc2tEdWVEYXRlKTtcbiAgICAgICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0YXNrc1wiXVt0YXNrS2V5XVtcImRlc2NyaXB0aW9uXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgY29uc3QgdGFza05vdGVzID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0YXNrc1wiXVt0YXNrS2V5XVtcIm5vdGVzXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza05vdGVzKTtcbiAgICAgICAgY29uc3QgdGFza1Bpbm5lZCA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJwaW5uZWRcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrUGlubmVkKTtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlZCA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJjb21wbGV0ZWRcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrQ29tcGxldGVkKTtcbiAgICAgICAgcmV0dXJuIHRhc2tWYWx1ZXM7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrT2JqZWN0cyA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IHRvZG9MaXN0U3RvcmFnZS5nZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0cyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3RzO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdID0gbnVsbDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0pTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIiR7Y2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKX1cIixcbiAgICAgICAgICAgIFwiY29tcGxldGVkXCI6ICR7Y2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpfVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza1BhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UoY2hlY2tsaXN0VGFza0pTT05TdHJpbmcpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdID0gY2hlY2tsaXN0VGFza1BhcnNlZE9iamVjdDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3Qgc2V0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdW1wiZGVzY3JpcHRpb25cIl0gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVkID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdW1wiY29tcGxldGVkXCJdID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDaGVja2xpc3RUYXNrVmFsdWVzID0gKHRhYktleSwgdGFza0tleSwgY2hlY2tsaXN0VGFza0tleSkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrVmFsdWVzID0gW107XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJjaGVja2xpc3RfdGFza3NcIl1bY2hlY2tsaXN0VGFza0tleV1bXCJkZXNjcmlwdGlvblwiXTtcbiAgICAgICAgY2hlY2tsaXN0VGFza1ZhbHVlcy5wdXNoKGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbik7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2NoZWNrbGlzdFRhc2tLZXldW1wiY29tcGxldGVkXCJdO1xuICAgICAgICBjaGVja2xpc3RUYXNrVmFsdWVzLnB1c2goY2hlY2tsaXN0VGFza0NvbXBsZXRlZCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrVmFsdWVzO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza09iamVjdHMgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IHRvZG9MaXN0U3RvcmFnZS5nZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0cyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcImNoZWNrbGlzdF90YXNrc1wiXTtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFRhc2tPYmplY3RzO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl1bYGNoZWNrbGlzdF90YXNrXyR7Y2hlY2tsaXN0VGFza0luZGV4fWBdID0gbnVsbDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tGb3JFeGlzdGluZ1N0b3JhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvX2RvX2xpc3RcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RKU09OU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b19kb19saXN0XCIpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IEpTT04ucGFyc2UodG9kb0xpc3RKU09OU3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRvZG9MaXN0UGFyc2VkT2JqZWN0O1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUgPSAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEpTT05TdHJpbmdWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b19kb19saXN0XCIsIHVwZGF0ZWRKU09OU3RyaW5nVmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgaW5pdGlhbGl6ZVRvZG9MaXN0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdEpTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJjdXJyZW50X3RhYlwiOiAke3RvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpfSxcbiAgICAgICAgICAgIFwidGFic1wiOiB7fVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRvZG9MaXN0SlNPTlN0cmluZyk7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUxvYWRpbmcgPSAoKSA9PiB7XG4gICAgICAgIGxvYWRpbmdJbkNvbnRlbnQgPyBsb2FkaW5nSW5Db250ZW50ID0gZmFsc2UgOiBsb2FkaW5nSW5Db250ZW50ID0gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGlzTG9hZGluZyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGxvYWRpbmdJbkNvbnRlbnQ7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRUYWIsXG4gICAgICAgIHNldEN1cnJlbnRUYWIsXG4gICAgICAgIHNldFRhYk5hbWUsXG4gICAgICAgIGdldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgZ2V0VGFiVGl0bGUsXG4gICAgICAgIGdldFRhYk9iamVjdHMsXG4gICAgICAgIHJlbW92ZVRhYixcbiAgICAgICAgYWRkVGFzayxcbiAgICAgICAgc2V0VGFza1N1YmNvbnRhaW5lclZhbHVlLFxuICAgICAgICB0b2dnbGVUYXNrUGlubmVkLFxuICAgICAgICB0b2dnbGVUYXNrQ29tcGxldGVkLFxuICAgICAgICBnZXRUYXNrVmFsdWVzLFxuICAgICAgICBnZXRUYXNrT2JqZWN0cyxcbiAgICAgICAgcmVtb3ZlVGFzayxcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFzayxcbiAgICAgICAgc2V0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uLFxuICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVkLFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrVmFsdWVzLFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrT2JqZWN0cyxcbiAgICAgICAgcmVtb3ZlQ2hlY2tsaXN0VGFzayxcbiAgICAgICAgY2hlY2tGb3JFeGlzdGluZ1N0b3JhZ2UsXG4gICAgICAgIGdldExvY2FsU3RvcmFnZVZhbHVlLFxuICAgICAgICBpbml0aWFsaXplVG9kb0xpc3QsXG4gICAgICAgIHRvZ2dsZUxvYWRpbmcsXG4gICAgICAgIGlzTG9hZGluZ1xuICAgIH1cbn0pKCk7XG5cbmV4cG9ydCB7IHRvZG9MaXN0U3RvcmFnZSB9OyIsImltcG9ydCB7IGV2ZW50QXNzaWduZXIgfSBmcm9tIFwiLi9ldmVudF9hc3NpZ25lcl9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RfY29udHJvbGxlcl9hZGRfZWRpdF9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJSZW1vdmUgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9yZW1vdmVcIjtcbmltcG9ydCB7IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RfY29udHJvbGxlcl9yZW1vdmVfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyB0b2RvTGlzdFN0b3JhZ2UgfSBmcm9tIFwiLi90b2RvX2xpc3Rfc3RvcmFnZV9vYmplY3RcIjtcblxuY29uc3QgZXZlbnRCdW5kbGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGRUYWIgPSAoZXZlbnQsIHRhYk5hbWU9XCJOZXcgVGFiXCIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYWJUb1RvZG9BcnJheSh0YWJOYW1lKTtcbiAgICAgICAgY29uc3QgbmV3VGFiRWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZE5ld1RhYlRvRE9NKG5ld1RhYkluZGV4KTtcbiAgICAgICAgYWRkVGFiTGlzdGVuZXJzKG5ld1RhYkVsZW1lbnQpO1xuICAgICAgICBpZiAoIXRvZG9MaXN0U3RvcmFnZS5pc0xvYWRpbmcoKSkge1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLmFkZFRhYihuZXdUYWJJbmRleCk7XG4gICAgICAgICAgICBpZiAoaGVscGVyRnVuY3Rpb25zLmNoZWNrSWZPbmx5T25lVGFiKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFRhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3Quc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5hZGRDdXJyZW50VGFiSW5kaWNhdG9yKClcbiAgICAgICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2Uuc2V0Q3VycmVudFRhYihmaXJzdFRhYkluZGV4KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1RhYkluZGV4XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50KGV2ZW50LCBcIlRhYlwiKSkge1xuICAgICAgICAgICAgY29uc3QgdGFiSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFiSW5wdXRFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiTmFtZUVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0VGFiSW5wdXRFbGVtZW50VmFsdWUodGFiSW5kZXgpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYWJJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgY29uc3QgdGFiSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgbmV3VGFiTmFtZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXROZXdWYWx1ZShldmVudCk7XG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5lZGl0VGFiTmFtZSh0YWJJbmRleCwgbmV3VGFiTmFtZSk7XG4gICAgICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFiTmFtZUVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWJJbnB1dEVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lcih0YWJFbGVtZW50KTtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRUYWJOYW1lKHRhYkluZGV4KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJJbmRleChldmVudCk7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFiRnJvbVRvZG9BcnJheSh0YWJJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiRWxlbWVudEZyb21ET00odGFiSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UucmVtb3ZlVGFiKHRhYkluZGV4KTtcbiAgICAgICAgaWYgKGhlbHBlckZ1bmN0aW9ucy5jaGVja0lmV2FzQ3VycmVudFRhYihldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYigpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkQ3VycmVudFRhYkluZGljYXRvcigpXG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUFsbFRhc2tFbGVtZW50cygpO1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldEN1cnJlbnRUYWIoZmlyc3RUYWJJbmRleCk7XG4gICAgICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0lmTm9Nb3JlVGFicygpKSB7XG4gICAgICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQubG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3dpdGNoVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrSWZXYXNDdXJyZW50VGFiKGV2ZW50KSkge1xuICAgICAgICAgICAgY29uc3QgdGFiSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudXBkYXRlQ3VycmVudFRhYih0YWJJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlc2V0Q3VycmVudFRhYlN0YXR1cygpO1xuICAgICAgICAgICAgLy8gRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0Q3VycmVudFRhYkRPTSh0YWJJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5hZGRDdXJyZW50VGFiSW5kaWNhdG9yKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUFsbFRhc2tFbGVtZW50cygpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQubG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRDdXJyZW50VGFiKHRhYkluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgYWRkVGFiTGlzdGVuZXJzID0gKG5ld1RhYkVsZW1lbnQpID0+IHtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXIobmV3VGFiRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXIobmV3VGFiRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkU3dpdGNoVGFiTGlzdGVuZXIobmV3VGFiRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUYXNrID0gKFxuICAgICAgICBldmVudCxcbiAgICAgICAgdGFiSW5kZXg9dG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksXG4gICAgICAgIHRpdGxlPVwiTmV3IFRhc2sgVGl0bGVcIixcbiAgICAgICAgZHVlRGF0ZT1cIlRhc2sgRHVlIERhdGVcIixcbiAgICAgICAgZGVzY3JpcHRpb249XCJUYXNrIERlc2NyaXB0aW9uXCIsXG4gICAgICAgIG5vdGVzPVwiVGFzayBOb3Rlc1wiLFxuICAgICAgICBwaW5uZWQ9ZmFsc2UsXG4gICAgICAgIGNvbXBsZXRlZD1mYWxzZVxuICAgICkgPT4ge1xuICAgICAgICBpZiAodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxvYWRJbkluc3RydWN0aW9uc1BhZ2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbmV3VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFza1RvVGFiKFxuICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGR1ZURhdGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIG5vdGVzLFxuICAgICAgICAgICAgcGlubmVkLFxuICAgICAgICAgICAgY29tcGxldGVkXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3VGFza1RvRE9NKG5ld1Rhc2tJbmRleCk7XG4gICAgICAgIGFkZFRhc2tMaXN0ZW5lcnMobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBpZiAoIXRvZG9MaXN0U3RvcmFnZS5pc0xvYWRpbmcoKSkge1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLmFkZFRhc2sodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIG5ld1Rhc2tJbmRleCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXdUYXNrSW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhc2tJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JFeGlzdGluZ0lucHV0RWxlbWVudChldmVudCwgXCJUYXNrXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJUeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJUeXBlKGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFza1N1YmNvbnRlbnRFbGVtZW50RnJvbURPTSh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhc2tJbnB1dEVsZW1lbnQodGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUodGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRhc2tJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyVHlwZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyVHlwZShldmVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdUYXNrU3ViY29udGVudFZhbHVlID0gaGVscGVyRnVuY3Rpb25zLmdldE5ld1ZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRUYXNrT2JqZWN0SW5mbyh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlLCBuZXdUYXNrU3ViY29udGVudFZhbHVlKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhc2tTdWJjb250ZW50RWxlbWVudCh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFza0lucHV0RWxlbWVudCh0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRUYXNrU3ViY29udGFpbmVyVmFsdWUodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlVGFza1BpbiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQW5pbWF0aW9ucyh0YXNrSW5kZXgsIFwiRW5hYmxlXCIpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC50b2dnbGVUYXNrUGluKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmNoYW5nZVBpbkJ1dHRvbkltYWdlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbih0YXNrSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UudG9nZ2xlVGFza1Bpbm5lZCh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlVGFza0NvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZVRhc2tET01Db21wbGV0ZSh0YXNrSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UudG9nZ2xlVGFza0NvbXBsZXRlZCh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFza0Zyb21UYWJBcnJheSh0YXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSh0YXNrSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UucmVtb3ZlVGFzayh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2tMaXN0ZW5lcnMgPSAobmV3VGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYXNrTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tQaW5MaXN0ZW5lcihuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJJbmRleCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdDaGVja2xpc3RUYXNrVG9ET00odGFza0luZGV4LCBuZXdDaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgaWYgKCF0b2RvTGlzdFN0b3JhZ2UuaXNMb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5hZGRDaGVja2xpc3RUYXNrKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgsIG5ld0NoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQoZXZlbnQsIFwiQ2hlY2tsaXN0IFRhc2tcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdEZXNjcmlwdGlvblZhbHVlID0gaGVscGVyRnVuY3Rpb25zLmdldE5ld1ZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgsIG5ld0Rlc2NyaXB0aW9uVmFsdWUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbih0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZWQodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZUNoZWNrbGlzdFRhc2tGcm9tVGFza0FycmF5KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVDaGVja2xpc3RUYXNrRWxlbWVudERPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHRvZG9MaXN0U3RvcmFnZS5yZW1vdmVDaGVja2xpc3RUYXNrKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzID0gKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KSA9PiB7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcihuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlTGlzdGVuZXIobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lcihuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLnRyeWluZ1RvRG91YmxlQ2xpY2sodGFza0luZGV4KSkge1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQW5pbWF0aW9ucyh0YXNrSW5kZXgsIFwiRGlzYWJsZVwiKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscyh0YXNrSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQucm90YXRlQ2hldnJvbkJ1dHRvbih0YXNrSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluSW5zdHJ1Y3Rpb25zUGFnZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSBhZGRUYWIoZXZlbnQsIFwiSW5zdHJ1Y3Rpb25zXCIpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBhZGRUYXNrKFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICB0YWJJbmRleCxcbiAgICAgICAgICAgIFwiUXVpY2sgVGlwcyEgQ2xpY2sgdGhlIHBpbiBidXR0b24gdG8gcGluIGEgdGFzayB0byB0aGUgdG9wIG9mIHRoZSBsaXN0LlwiLFxuICAgICAgICAgICAgXCJUb21vcnJvdywgbmV4dCB3ZWVrLCBvciB3aGVuZXZlciB5b3VyIHRhc2sgaXMgZHVlLCB5b3UgY2FuIGFkZCBpdCBoZXJlISBDbGljayB0aGUgYXJyb3cgYnV0dG9uIHRvIHRvZ2dsZSBiZXR3ZWVuIHNob3dpbmcgYW5kIGhpZGluZyB0YXNrIGRldGFpbHMuXCIsXG4gICAgICAgICAgICBcIkFkZCBhIGRlc2NyaXB0aW9uIG9mIHlvdXIgdGFzayBoZXJlISBDbGljayB0aGUgcGVuY2lsIGJ1dHRvbnMgdG8gZWRpdCB0aGUgdmFyaW91cyBwYXJ0cyBvZiB5b3VyIHRhc2suXCIsXG4gICAgICAgICAgICBcIkpvdCBkb3duIHNvbWUgbm90ZXMgaGVyZSEgTWFyayB5b3VyIHRhc2sgYXMgY29tcGxldGUgd2hlbiB5b3UncmUgZG9uZSwgb3IgcmVtb3ZlIGl0IGZyb20gdGhlIGxpc3QgYnkgY2xpY2tpbmcgdGhlIFggYnV0dG9uLlwiLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVUYXNrRE9NQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuY2hhbmdlUGluQnV0dG9uSW1hZ2UodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uKHRhc2tJbmRleCk7XG4gICAgICAgIGFkZExvYWRlZEluQ2hlY2tsaXN0VGFzayhcbiAgICAgICAgICAgIHRhYkluZGV4LFxuICAgICAgICAgICAgdGFza0luZGV4LFxuICAgICAgICAgICAgXCJJZiB5b3VyIHRhc2sgaGFzIG11bHRpcGxlIHN0ZXBzLCB0cnkgYnJlYWtpbmcgdGhlbSBkb3duIGludG8gYSBjaGVja2xpc3QhIENsaWNrIHRoZSBwbHVzIHNpZ24gYnV0dG9uIHRvIGFkZCBzdGVwcyBhcyBuZWVkZWQuXCIsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICBhZGRMb2FkZWRJbkNoZWNrbGlzdFRhc2soXG4gICAgICAgICAgICB0YWJJbmRleCxcbiAgICAgICAgICAgIHRhc2tJbmRleCxcbiAgICAgICAgICAgIFwiSGF2ZSBhIG5ldyB0YXNrIHlvdSB3YW50IHRvIGtlZXAgdHJhY2sgb2Y/IEFkZCBpdCB0byB0aGUgbGlzdCBieSBjbGlja2luZyBvbiB0aGUgJ05ldyBUYXNrJyBidXR0b24gYmVsb3chXCIsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICBhZGRMb2FkZWRJbkNoZWNrbGlzdFRhc2sodGFiSW5kZXgsXG4gICAgICAgICAgICB0YXNrSW5kZXgsXG4gICAgICAgICAgICBcIk9yZ2FuaXplIHRoZSBkaWZmZXJlbnQgdHlwZXMgb2YgdGFza3MgaW4geW91ciBsaWZlIGJ5IGNyZWF0aW5nIHRoZW1lZCB0YWJzLiBDcmVhdGUgYSBuZXcgdGFiIGJ5IGNsaWNraW5nIG9uIHRoZSBwbHVzIHNpZ24gYnV0dG9uIGF0IHRoZSB0b3Agb2YgdGhlIGxpc3QuIENoYW5nZSB0YWJzIGJ5IGNsaWNraW5nIG9uIGRpZmZlcmVudCB0YWIgbmFtZXMuXCIsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgIH07XG4gICAgY29uc3QgYWRkTG9hZGVkSW5DaGVja2xpc3RUYXNrID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGRlc2NyaXB0aW9uLCBjb21wbGV0ZWQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBkZXNjcmlwdGlvbiwgY29tcGxldGVkKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdDaGVja2xpc3RUYXNrVG9ET00odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKGNoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgaWYgKCF0b2RvTGlzdFN0b3JhZ2UuaXNMb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5hZGRDaGVja2xpc3RUYXNrKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleClcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJbkxvY2FsU3RvcmFnZSA9ICgpID0+IHtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZUxvYWRpbmcoKTtcbiAgICAgICAgbG9hZEluQ3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGxvYWRJblRhYk9iamVjdHMoKVxuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UudG9nZ2xlTG9hZGluZygpO1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluQ3VycmVudFRhYkluZGV4ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIHRvRG9MaXN0LnNldEN1cnJlbnRUYWJJbmRleChjdXJyZW50VGFiSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluVGFiT2JqZWN0cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0cyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYWJPYmplY3RzKCk7XG4gICAgICAgIGZvciAoY29uc3QgdGFiS2V5IGluIHRhYk9iamVjdHMpIHtcbiAgICAgICAgICAgIGlmICh0YWJPYmplY3RzW3RhYktleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0b0RvTGlzdC5hZGRUYXNrKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYlRpdGxlID0gdG9kb0xpc3RTdG9yYWdlLmdldFRhYlRpdGxlKHRhYktleSlcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJJbmRleCA9IGFkZFRhYihldmVudCwgdGFiVGl0bGUpXG4gICAgICAgICAgICAgICAgbG9hZEluVGFza09iamVjdHModGFiSW5kZXgsIHRhYktleSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5hZGRDdXJyZW50VGFiSW5kaWNhdG9yKClcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJblRhc2tPYmplY3RzID0gKHRhYkluZGV4LCB0YWJLZXkpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYk9iamVjdCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3RzID0gdG9kb0xpc3RTdG9yYWdlLmdldFRhc2tPYmplY3RzKHRhYkluZGV4KTtcbiAgICAgICAgZm9yIChjb25zdCB0YXNrS2V5IGluIHRhc2tPYmplY3RzKSB7XG4gICAgICAgICAgICBpZiAodGFza09iamVjdHNbdGFza0tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YWJPYmplY3QuYWRkVGFzayh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVmFsdWVzID0gdG9kb0xpc3RTdG9yYWdlLmdldFRhc2tWYWx1ZXModGFiS2V5LCB0YXNrS2V5KVxuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tUaXRsZSA9IHRhc2tWYWx1ZXNbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza0R1ZURhdGUgPSB0YXNrVmFsdWVzWzFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IHRhc2tWYWx1ZXNbMl07XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza05vdGVzID0gdGFza1ZhbHVlc1szXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrUGlubmVkID0gdGFza1ZhbHVlc1s0XTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrQ29tcGxldGVkID0gdGFza1ZhbHVlc1s1XTtcbiAgICAgICAgICAgICAgICBsZXQgdGFza0luZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmICh0YWJJbmRleCA9PT0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza0luZGV4ID0gYWRkVGFzayhcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrRHVlRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tOb3RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tQaW5uZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29tcGxldGVkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZVRhc2tET01Db21wbGV0ZSh0YXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5jaGFuZ2VQaW5CdXR0b25JbWFnZSh0YXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zaGlmdFRhc2tFbGVtZW50UG9zaXRpb24odGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXNrSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYXNrVG9UYWIoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tUaXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEdWVEYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0Rlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza05vdGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Bpbm5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tDb21wbGV0ZWRcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9hZEluQ2hlY2tsaXN0VGFza09iamVjdHModGFiSW5kZXgsIHRhYktleSwgdGFza0luZGV4LCB0YXNrS2V5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5DaGVja2xpc3RUYXNrT2JqZWN0cyA9ICh0YWJJbmRleCwgdGFiS2V5LCB0YXNrSW5kZXgsIHRhc2tLZXkpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0cyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRDaGVja2xpc3RUYXNrT2JqZWN0cyh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVja2xpc3RUYXNrS2V5IGluIGNoZWNrbGlzdFRhc2tPYmplY3RzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tsaXN0VGFza09iamVjdHNbY2hlY2tsaXN0VGFza0tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YXNrT2JqZWN0LmFkZFRhc2sodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza1ZhbHVlcyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRDaGVja2xpc3RUYXNrVmFsdWVzKHRhYktleSwgdGFza0tleSwgY2hlY2tsaXN0VGFza0tleSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza1ZhbHVlc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrQ29tcGxldGVkID0gY2hlY2tsaXN0VGFza1ZhbHVlc1sxXTtcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tsaXN0VGFza0luZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmICh0YWJJbmRleCA9PT0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tsaXN0VGFza0luZGV4ID0gYWRkTG9hZGVkSW5DaGVja2xpc3RUYXNrKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiwgY2hlY2tsaXN0VGFza0NvbXBsZXRlZClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2xpc3RUYXNrSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiwgY2hlY2tsaXN0VGFza0NvbXBsZXRlZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5Jbml0aWFsTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZE5ld1RhYkxpc3RlbmVyKCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkTmV3VGFza0xpc3RlbmVyKCk7XG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5QYWdlID0gKCkgPT4ge1xuICAgICAgICBsb2FkSW5Jbml0aWFsTGlzdGVuZXJzKCk7XG4gICAgICAgIGlmICh0b2RvTGlzdFN0b3JhZ2UuY2hlY2tGb3JFeGlzdGluZ1N0b3JhZ2UoKSkge1xuICAgICAgICAgICAgbG9hZEluTG9jYWxTdG9yYWdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2UuaW5pdGlhbGl6ZVRvZG9MaXN0KCk7O1xuICAgICAgICAgICAgbG9hZEluSW5zdHJ1Y3Rpb25zUGFnZSgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkVGFiLFxuICAgICAgICBpbnNlcnRUYWJJbnB1dEVsZW1lbnQsXG4gICAgICAgIHVwZGF0ZVRhYixcbiAgICAgICAgc3dpdGNoVGFiLFxuICAgICAgICByZW1vdmVUYWIsXG4gICAgICAgIGFkZFRhYkxpc3RlbmVycyxcbiAgICAgICAgYWRkVGFzayxcbiAgICAgICAgaW5zZXJ0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgdXBkYXRlVGFzayxcbiAgICAgICAgdG9nZ2xlVGFza1BpbixcbiAgICAgICAgdG9nZ2xlVGFza0NvbXBsZXRlLFxuICAgICAgICByZW1vdmVUYXNrLFxuICAgICAgICBhZGRUYXNrTGlzdGVuZXJzLFxuICAgICAgICBhZGROZXdDaGVja2xpc3RUYXNrLFxuICAgICAgICBpbnNlcnRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LFxuICAgICAgICB1cGRhdGVDaGVja2xpc3RUYXNrLFxuICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGUsXG4gICAgICAgIHJlbW92ZUNoZWNrbGlzdFRhc2ssXG4gICAgICAgIGFkZENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMsXG4gICAgICAgIHRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscyxcbiAgICAgICAgbG9hZEluSW5zdHJ1Y3Rpb25zUGFnZSxcbiAgICAgICAgbG9hZEluTG9jYWxTdG9yYWdlLFxuICAgICAgICBsb2FkSW5UYWJPYmplY3RzLFxuICAgICAgICBsb2FkSW5Jbml0aWFsTGlzdGVuZXJzLFxuICAgICAgICBsb2FkSW5QYWdlLFxuICAgIH07XG59KSgpO1xuXG5leHBvcnQgeyBldmVudEJ1bmRsZXIgfTsiLCJpbXBvcnQgeyBldmVudEJ1bmRsZXIgfSBmcm9tIFwiLi9vYmplY3RzL2V2ZW50X2J1bmRsZXJfb2JqZWN0XCI7XG5cbmV2ZW50QnVuZGxlci5sb2FkSW5QYWdlKCk7Il0sIm5hbWVzIjpbImV2ZW50QXNzaWduZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnRCdW5kbGVyIiwiYWRkVGFiIiwic2NvcGUiLCJ0YWJFZGl0QnV0dG9ucyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJpbnNlcnRUYWJJbnB1dEVsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJ1cGRhdGVUYWIiLCJ0YWJSZW1vdmVCdXR0b25zIiwicmVtb3ZlVGFiIiwidGFiU3dpdGNoQnV0dG9ucyIsInN3aXRjaFRhYiIsImFkZFRhc2siLCJ0YXNrRWRpdEJ1dHRvbnMiLCJpbnNlcnRUYXNrSW5wdXRFbGVtZW50IiwidXBkYXRlVGFzayIsInRhc2tQaW5CdXR0b25zIiwidG9nZ2xlVGFza1BpbiIsInRhc2tDb21wbGV0ZUNoZWNrYm94ZXMiLCJjaGVja2JveCIsInRvZ2dsZVRhc2tDb21wbGV0ZSIsInRhc2tSZW1vdmVCdXR0b25zIiwicmVtb3ZlVGFzayIsIm5ld0NoZWNrbGlzdFRhc2tCdXR0b25zIiwiYWRkTmV3Q2hlY2tsaXN0VGFzayIsImNoZWNrbGlzdEVkaXRCdXR0b25zIiwiaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCIsInVwZGF0ZUNoZWNrbGlzdFRhc2siLCJjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMiLCJ0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGUiLCJjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucyIsInJlbW92ZUNoZWNrbGlzdFRhc2siLCJ0YXNrVG9nZ2xlRGlzcGxheUJ1dHRvbnMiLCJ0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMiLCJjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCIsIm9iamVjdCIsImNoZWNrbGlzdCIsIk9iamVjdCIsImFzc2lnbiIsInRhc2siLCJwdXNoIiwibGVuZ3RoIiwiaW5kZXgiLCJ1bmRlZmluZWQiLCJnZXRDaGVja2xpc3RUYXNrcyIsImdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayIsInRvRG9MaXN0IiwiY3VycmVudFRhYiIsImdldEN1cnJlbnRUYWJJbmRleCIsInNldEN1cnJlbnRUYWJJbmRleCIsIm5ld0N1cnJlbnRUYWIiLCJOdW1iZXIiLCJnZXRDdXJyZW50VGFiT2JqZWN0IiwiY3VycmVudFRhYkluZGV4IiwidGl0bGVCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxUaXRsZSIsInRpdGxlIiwiZ2V0VGFza1RpdGxlIiwic2V0VGFza1RpdGxlIiwibmV3VGl0bGUiLCJoZWxwZXJGdW5jdGlvbnMiLCJlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCIsImV2ZW50IiwidGFiRWxlbWVudCIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJlbnN1cmVDb3JyZWN0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQiLCJ0YXNrU3ViY29udGFpbmVyRWxlbWVudCIsImNsYXNzTGlzdCIsImluY2x1ZGVzIiwiZW5zdXJlQ29ycmVjdENoZWNrbGlzdFRhc2tFbGVtZW50IiwiY2hlY2tsaXN0VGFza0VsZW1lbnQiLCJnZXRUYXNrRWxlbWVudCIsInRhc2tJbmRleCIsImdldFRhYk9iamVjdCIsInRhYkluZGV4IiwiZ2V0VGFza09iamVjdCIsImNoZWNrSWZXYXNDdXJyZW50VGFiIiwiY2hlY2tJZk9ubHlPbmVUYWIiLCJ0b0RvVGFiU2VjdGlvbiIsImdldFRhc2tJbmRleCIsInRhc2tFbGVtZW50IiwiZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50IiwiZGF0YXNldCIsImdldENoZWNrbGlzdFRhc2tJbmRleCIsImNoZWNrbGlzdFRhc2tJbmRleCIsImdldFRhYkluZGV4IiwiZ2V0TmV3VmFsdWUiLCJ2YWx1ZSIsImdldFRhc2tTdWJjb250YWluZXJUeXBlIiwidGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzIiwidGFza1N1YmNvbnRhaW5lclR5cGUiLCJnZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCIsImJ1dHRvblR5cGUiLCJnZXRDaGVja2xpc3RUYXNrRWxlbWVudCIsImdldFRhYkVsZW1lbnQiLCJjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJ0cnlpbmdUb0RvdWJsZUNsaWNrIiwiZ2V0Q2hlY2tsaXN0VGFza09iamVjdCIsImNoZWNrSWZOb01vcmVUYWJzIiwiZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiZ2V0VGFza0Rlc2NyaXB0aW9uIiwic2V0VGFza0Rlc2NyaXB0aW9uIiwibmV3RGVzY3JpcHRpb24iLCJjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxDb21wbGV0ZWRTdGF0ZSIsImNvbXBsZXRlZCIsInRvZ2dsZUNvbXBsZXRlZFN0YXRlIiwiZ2V0Q29tcGxldGVkU3RhdGUiLCJvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCIsInRhYk5hbWUiLCJuZXdUYWIiLCJ0b0RvVGFiIiwibmV3VGFiTmFtZSIsInRhYkFycmF5IiwiZmlyc3RUYWIiLCJ0YWIiLCJkdWVEYXRlIiwibm90ZXMiLCJwaW5uZWQiLCJ0YWJPYmplY3QiLCJuZXdUYXNrIiwiaW5pdGlhbER1ZURhdGUiLCJnZXRUYXNrRHVlRGF0ZSIsInNldFRhc2tEdWVEYXRlIiwibmV3RHVlRGF0ZSIsImR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxOb3RlcyIsImdldFRhc2tOb3RlcyIsInNldFRhc2tOb3RlcyIsIm5ld05vdGVzIiwibm90ZXNCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxQaW5uZWRTdGF0ZSIsInRvZ2dsZVBpbm5lZFN0YXRlIiwiZ2V0UGlubmVkU3RhdGUiLCJwaW5uZWRCZWhhdmlvckNvbXBvbmVudCIsInRvRG9UYXNrIiwibmV3VGFza1N1YmNvbnRlbnRWYWx1ZSIsInRhc2tPYmplY3QiLCJuZXdDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0VGFza09iamVjdCIsIm5ld0Rlc2NyaXB0aW9uVmFsdWUiLCJET01Db250cm9sbGVyQWRkRWRpdCIsImFkZE5ld1Rhc2tUb0RPTSIsIm5ld1Rhc2tPYmplY3QiLCJ0b0RvQ29udGVudCIsIm5ld1Rhc2tFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImFkZCIsIm5ld1Rhc2tUaXRsZSIsIm5ld1Rhc2tEZXNjcmlwdGlvbiIsIm5ld1Rhc2tEdWVEYXRlIiwibmV3VGFza05vdGVzIiwibmV3VGFza0NvbXBsZXRlSUQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwidG9nZ2xlVGFza0RPTUNvbXBsZXRlIiwiY29tcGxldGVDaGVja2JveCIsImNoZWNrZWQiLCJyZW1vdmUiLCJhZGROZXdDaGVja2xpc3RUYXNrVG9ET00iLCJuZXdDaGVja2xpc3RUYXNrSW5kZXgiLCJjaGVja2xpc3RFbGVtZW50IiwibmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uIiwibmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQiLCJ0b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUiLCJjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94IiwiY2hhbmdlUGluQnV0dG9uSW1hZ2UiLCJwaW5CdXR0b25JbWFnZSIsInJlYXJyYW5nZVBpbm5lZFRhc2tzUG9zaXRpb24iLCJjdXJyZW50VGFiT2JqZWN0IiwiY3VycmVudFRhc2tJbmRleCIsImN1cnJlbnRUYXNrT2JqZWN0IiwidGFza0NvbnRlbnRTZWN0aW9uIiwibGlzdE9mUGlubmVkVGFza0VsZW1lbnRzIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJsYXN0UGlubmVkVGFza0VsZW1lbnQiLCJwaW5uZWRUYXNrRWxlbWVudCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImFkZE5ld1RhYlRvRE9NIiwiYWRkVGFiQnV0dG9uIiwibmV3VGFiRWxlbWVudCIsIm5ld1RhYk9iamVjdFRpdGxlIiwiZmlyc3RDaGlsZCIsImZvY3VzIiwic2V0VGFiSW5wdXRFbGVtZW50VmFsdWUiLCJpbnNlcnRUYWJOYW1lRWxlbWVudCIsInRhYkJ1dHRvbiIsInRhYkJ1dHRvbk5hbWUiLCJhZGRDdXJyZW50VGFiSW5kaWNhdG9yIiwibG9hZFRhc2tzRnJvbU5ld0N1cnJlbnRUYWIiLCJsaXN0T2ZUYXNrcyIsImFkZFRhc2tMaXN0ZW5lcnMiLCJsaXN0T2ZDaGVja2xpc3RUYXNrcyIsImFkZENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMiLCJ0YXNrU3ViY29udGFpbmVyIiwic2V0VGFza0lucHV0RWxlbWVudFZhbHVlIiwidGFza09iamVjdFZhbHVlIiwiaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50IiwidGFza1N1YmNvbnRlbnRFbGVtZW50IiwidGFza1RpdGxlIiwidGFza0R1ZURhdGUiLCJ0YXNrRGVzY3JpcHRpb24iLCJ0YXNrTm90ZXMiLCJjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24iLCJzZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUiLCJjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24iLCJpbnNlcnRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50IiwiY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCIsInNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbiIsInRhc2tFbGVtZW50SW5kZXgiLCJsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cyIsImxhc3RVbnBpbm5lZFRhc2tFbGVtZW50IiwidW5waW5uZWRUYXNrRWxlbWVudCIsImZvckVhY2giLCJlbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5Iiwic2V0VGltZW91dCIsInByZXZlbnREb3VibGVDbGljayIsInJvdGF0ZUNoZXZyb25CdXR0b24iLCJidXR0b25JbWFnZSIsImJ1dHRvbkltYWdlQ2xhc3NlcyIsInRvZ2dsZUFuaW1hdGlvbnMiLCJhY3Rpb24iLCJlbGVtZW50c1RvVG9nZ2xlIiwiRE9NQ29udHJvbGxlclJlbW92ZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQXR0cmlidXRlIiwicmVwbGFjZUNoaWxkcmVuIiwib2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCIsInRvZG9MaXN0U3RvcmFnZSIsImxvYWRpbmdJbkNvbnRlbnQiLCJnZXRMb2NhbFN0b3JhZ2VWYWx1ZSIsInRvZG9MaXN0SlNPTlN0cmluZyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJ1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSIsIm5ld1ZhbHVlIiwidXBkYXRlZEpTT05TdHJpbmdWYWx1ZSIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJ0b2RvTGlzdFBhcnNlZE9iamVjdCIsInRhYkpTT05TdHJpbmciLCJ0YWJQYXJzZWRPYmplY3QiLCJzZXRDdXJyZW50VGFiIiwic2V0VGFiTmFtZSIsImdldFRhYlRpdGxlIiwidGFiS2V5IiwiZ2V0VGFiT2JqZWN0cyIsInRhc2tKU09OU3RyaW5nIiwidGFza1BhcnNlZE9iamVjdCIsInNldFRhc2tTdWJjb250YWluZXJWYWx1ZSIsInN1YmNvbnRhaW5lclR5cGUiLCJ0b2dnbGVUYXNrUGlubmVkIiwidG9nZ2xlVGFza0NvbXBsZXRlZCIsImdldFRhc2tWYWx1ZXMiLCJ0YXNrS2V5IiwidGFza1ZhbHVlcyIsInRhc2tQaW5uZWQiLCJ0YXNrQ29tcGxldGVkIiwiZ2V0VGFza09iamVjdHMiLCJhZGRDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0VGFza0pTT05TdHJpbmciLCJjaGVja2xpc3RUYXNrUGFyc2VkT2JqZWN0Iiwic2V0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uIiwidG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlZCIsImdldENoZWNrbGlzdFRhc2tWYWx1ZXMiLCJjaGVja2xpc3RUYXNrS2V5IiwiY2hlY2tsaXN0VGFza1ZhbHVlcyIsImNoZWNrbGlzdFRhc2tDb21wbGV0ZWQiLCJnZXRDaGVja2xpc3RUYXNrT2JqZWN0cyIsImNoZWNrRm9yRXhpc3RpbmdTdG9yYWdlIiwiaW5pdGlhbGl6ZVRvZG9MaXN0IiwidG9nZ2xlTG9hZGluZyIsImlzTG9hZGluZyIsIm5ld1RhYkluZGV4IiwiYWRkVGFiTGlzdGVuZXJzIiwiZmlyc3RUYWJJbmRleCIsImxvYWRJbkluc3RydWN0aW9uc1BhZ2UiLCJuZXdUYXNrSW5kZXgiLCJhZGRMb2FkZWRJbkNoZWNrbGlzdFRhc2siLCJsb2FkSW5Mb2NhbFN0b3JhZ2UiLCJsb2FkSW5DdXJyZW50VGFiSW5kZXgiLCJsb2FkSW5UYWJPYmplY3RzIiwidGFiT2JqZWN0cyIsInRhYlRpdGxlIiwibG9hZEluVGFza09iamVjdHMiLCJ0YXNrT2JqZWN0cyIsImxvYWRJbkNoZWNrbGlzdFRhc2tPYmplY3RzIiwiY2hlY2tsaXN0VGFza09iamVjdHMiLCJsb2FkSW5Jbml0aWFsTGlzdGVuZXJzIiwiY29kZSIsImxvYWRJblBhZ2UiXSwic291cmNlUm9vdCI6IiJ9
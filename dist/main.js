(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},t=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})};let o=(o=>{let s={};return Object.assign(s,e(s,"ddtest")),Object.assign(s,t(s)),s})();console.log(o),console.log(o.getCompletedState()),o.getCompletedState()?console.log(o.getCompletedState(),"this is now true"):console.log(o.getCompletedState(),"this is still false"),console.log(o.getCompletedState()),console.log(o.toggleCompletedState()),console.log(o.getCompletedState()),o.getCompletedState()?console.log(o.getCompletedState(),"this is now true"):console.log(o.getCompletedState(),"this is still false"),console.log(o.getCompletedState()),console.log(o),console.log(o.getTaskDescription()),o.setTaskDescription("wowwie"),console.log(o.getTaskDescription());let s=((o,s,l,g)=>{let n={};return Object.assign(n,((e,t)=>{let o="Make Cereal";return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})})(n)),Object.assign(n,e(n,"part of breakfast plan")),Object.assign(n,((e,t)=>{let o="this morning";return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(n)),Object.assign(n,((e,t)=>{let o="make sure to put milk back in fridge";return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(n)),Object.assign(n,(e=>{let t;return Object.assign(e,{addChecklist(e){t=e},removeChecklist(){t=void 0},getChecklist:()=>t})})(n)),Object.assign(n,(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(n)),Object.assign(n,t(n)),n})();console.log(s),console.log(s.getTaskTitle()),console.log(s.getTaskDescription()),console.log(s.getTaskDueDate()),console.log(s.getTaskNotes()),console.log(s.getPinnedState()),console.log(s.getCompletedState()),s.setTaskTitle("Make Chicken Broth"),s.setTaskDescription("requires 1 chicken and 1 broth"),s.setTaskDueDate("before I caught this cold"),s.setTaskNotes("don't sneeze into pot"),s.togglePinnedState(),s.toggleCompletedState(),console.log(s.getTaskTitle()),console.log(s.getTaskDescription()),console.log(s.getTaskDueDate()),console.log(s.getTaskNotes()),console.log(s.getPinnedState()),console.log(s.getCompletedState()),console.log(s.getChecklist()),s.addChecklist(["chicken","broth"]),console.log(s.getChecklist()),s.removeChecklist(),console.log(s.getChecklist())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},t=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},s=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},n=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},c=(c,o,a,r)=>{let l={};return Object.assign(l,e(l,c),t(l,a),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(l,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(l,r),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(l),s(l),n(l)),l},o=e=>{let n={};return Object.assign(n,t(n,e),s(n)),n},a=t=>{let s={};return Object.assign(s,e(s,t),n(s)),s},r=(()=>{let e=0,t={getCurrentTabIndex:()=>e,setCurrentTabIndex:t=>{e=t}};return Object.assign(t,n(t)),t})(),l=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{const s=t(e).dataset.taskIndex,n=r.getCurrentTabIndex();return r.getSpecificChecklistTask(n).getSpecificChecklistTask(s)},c=e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t},o=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:t,ensureCorrectSubcontainer:s,checkForTaskSubcontainerInputElement:e=>"INPUT"===s(e).firstElementChild.tagName,getTargetTaskObject:n,ensureCorrectButtonElement:c,getButtonType:e=>{const t=c(e);return Array.from(t.classList)},getSubcontainerType:e=>{const t=s(e);return Array.from(t.classList)},ensureCorrectChecklistElement:e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist");)t=t.parentElement,s=Array.from(t.classList);return t},ensureCorrectChecklistTaskElement:o,checkForChecklistTaskInputElement:e=>null!==o(e).querySelector(".checklist-complete-section").querySelector(".checklist-input"),getTargetChecklistTaskObject:e=>{const t=n(e),s=o(e).dataset.checklistTaskIndex;return t.getSpecificChecklistTask(s)}}})(),i=()=>{const e=a("New Tab");return r.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;r.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},k=e=>{const t=l.ensureCorrectTabElement(e).dataset.tabIndex;r.setCurrentTabIndex(t)},u=()=>{const e=r.getChecklistTasks();let t;for(const s in e)if(void 0!==e[s])return r.setCurrentTabIndex(s),t=s,t},T=()=>{const e=r.getCurrentTabIndex(),t=r.getSpecificChecklistTask(e),s=c("New Task","Task Due Date","Task Description","Task Notes");return t.addTask(s)},m=e=>{const t=l.getTargetTaskObject(e),s=e.target.value,n=l.getSubcontainerType(e);return n.includes("to-do-title-section")?t.setTaskTitle(s):n.includes("to-do-due-date-section")?t.setTaskDueDate(s):n.includes("to-do-description-section")?t.setTaskDescription(s):n.includes("to-do-notes-section")?t.setTaskNotes(s):void 0},p=e=>{l.getTargetTaskObject(e).toggleCompletedState()},g=e=>{const t=l.getTargetTaskObject(e),s=o("Checklist Task Description");return t.addTask(s)},b=e=>{const t=l.getTargetChecklistTaskObject(e),s=e.target.value;t.setTaskDescription(s)},h=e=>{l.getTargetChecklistTaskObject(e).toggleCompletedState()},C=e=>{l.getTargetTaskObject(e).togglePinnedState()},E=e=>{const t=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),c=r.getSpecificChecklistTask(e).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=e,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=c,s.insertBefore(n,t),n},f=(e,t)=>{const s=l.ensureCorrectTabElement(e).dataset.tabIndex,n=r.getSpecificChecklistTask(s).getTaskTitle();t.value=n},S=e=>{const t=l.ensureCorrectTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},y=e=>{const t=l.ensureCorrectTabElement(e),s=t.dataset.tabIndex,n=r.getSpecificChecklistTask(s).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const o=document.createElement("h2");o.textContent=n,c.appendChild(o),t.insertBefore(c,t.firstChild)},v=e=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},A=e=>{l.ensureCorrectTabElement(e).setAttribute("id","current-tab")},L=e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},I=e=>{const t=r.getCurrentTabIndex(),s=r.getSpecificChecklistTask(t).getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),c=document.createElement("div");c.classList.add("to-do-task"),c.dataset.taskIndex=e;const o=s.getTaskTitle(),a=s.getTaskDescription(),l=s.getTaskDueDate(),i=s.getTaskNotes();return c.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',c.querySelector(".to-do-title").textContent=o,c.querySelector(".to-do-due-date").textContent=l,c.querySelector(".to-do-description").textContent=a,c.querySelector(".to-do-notes").textContent=i,n.appendChild(c),c},x=e=>{const t=l.ensureCorrectSubcontainer(e),s=document.createElement("input");return s.classList.add("task-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},D=(e,t)=>{const s=l.getTargetTaskObject(e),n=l.getButtonType(e);let c;n.includes("edit-task-title")?c=s.getTaskTitle():n.includes("edit-task-due-date")?c=s.getTaskDueDate():n.includes("edit-task-description")?c=s.getTaskDescription():n.includes("edit-task-notes")&&(c=s.getTaskNotes()),t.value=c},q=e=>{const t=l.ensureCorrectSubcontainer(e),s=l.getTargetTaskObject(e),n=l.getSubcontainerType(e);let c;if(n.includes("to-do-title-section")){const e=s.getTaskTitle();c=document.createElement("h3"),c.classList.add("to-do-title"),c.textContent=e}else if(n.includes("to-do-due-date-section")){const e=s.getTaskDueDate();c=document.createElement("p"),c.classList.add("to-do-due-date"),c.textContent=e}else if(n.includes("to-do-description-section")){const e=s.getTaskDescription();c=document.createElement("p"),c.classList.add("to-do-description"),c.textContent=e}else if(n.includes("to-do-notes-section")){const e=s.getTaskNotes();c=document.createElement("p"),c.classList.add("to-do-notes"),c.textContent=e}t.insertBefore(c,t.firstChild)},O=e=>{const t=l.ensureCorrectTaskElement(e),s=t.querySelector(".to-do-complete-checkbox");l.getTargetTaskObject(e).getCompletedState()?(s.checked=!0,t.classList.add("task-completed")):(s.checked=!1,t.classList.remove("task-completed"))},N=(e,t)=>{const s=l.ensureCorrectChecklistElement(e),n=l.ensureCorrectTaskElement(e).dataset.taskIndex,c=l.getTargetTaskObject(e).getSpecificChecklistTask(t),o=c.getTaskDescription(),a=c.getCompletedState(),r=document.createElement("div");r.classList.add("checklist-task"),r.dataset.checklistTaskIndex=t,r.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${n}-${t}" class="checklist-complete-checkbox">\n                <label for="checklist-${n}-${t}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,r.querySelector(".checklist-task-description").textContent=o;return r.querySelector(`#checklist-${n}-${t}`).checked=!!a,s.appendChild(r),r},j=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section"),s=document.createElement("input");return s.classList.add("checklist-input"),s.setAttribute("type","text"),t.appendChild(s),s.focus(),s},w=(e,t)=>{const s=l.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex,n=l.getTargetTaskObject(e).getSpecificChecklistTask(s).getTaskDescription();t.value=n},P=e=>{const t=l.ensureCorrectChecklistTaskElement(e),s=t.dataset.checklistTaskIndex,n=t.querySelector(".checklist-complete-section"),c=l.ensureCorrectTaskElement(e).dataset.taskIndex,o=l.getTargetChecklistTaskObject(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${c}-${s}`),a.classList.add("checklist-task-description"),a.textContent=o,n.appendChild(a)},B=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),s=l.getTargetChecklistTaskObject(e);t.checked=s.getCompletedState(),s.getCompletedState()?t.classList.add("checklist-task-completed"):t.classList.remove("checklist-task-completed")},M=e=>{const t=l.getTargetTaskObject(e),s=l.ensureCorrectButtonElement(e).querySelector("img");t.getPinnedState()?s.setAttribute("src","./assets/pin-pinned.png"):s.setAttribute("src","./assets/pin-unpinned.png")},R=e=>{const t=l.getTargetTaskObject(e),s=l.ensureCorrectTaskElement(e),n=document.querySelector(".to-do-content");if(t.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));0===e.length?n.insertBefore(s,n.firstElementChild):e[e.length-1].insertAdjacentElement("afterend",s),s.classList.add("pinned-task")}else{const e=Array.from(n.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)n.appendChild(s);else{const t=e[e.length-1],c=s.dataset.taskIndex;for(const o of e){if(c<o.dataset.taskIndex){n.insertBefore(s,o);break}o===t&&n.appendChild(s,t)}}s.classList.remove("pinned-task")}},$=()=>{document.querySelector(".add-tab").addEventListener("click",me.addTab)},H=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",me.insertTabInputElement)},F=e=>{e.addEventListener("keydown",me.updateTab)},G=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",me.removeTab)},U=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",me.switchTab)},W=()=>{document.querySelector(".new-to-do-task").addEventListener("click",me.newTask)},z=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",me.removeTask)},J=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",me.insertTaskInputElement)},K=e=>{e.addEventListener("keydown",me.updateTask)},Q=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",me.toggleTaskComplete)},V=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",me.addNewChecklistTask)},X=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",me.insertChecklistTaskInputElement)},Y=e=>{e.addEventListener("keydown",me.updateChecklistTask)},Z=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",me.toggleChecklistTaskComplete)},_=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",me.removeChecklistTask)},ee=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",me.toggleTaskPin)},te=e=>{const t=l.ensureCorrectTabElement(e).dataset.tabIndex;r.removeTask(t)},se=e=>{const t=l.ensureCorrectTaskElement(e).dataset.taskIndex,s=r.getCurrentTabIndex();r.getSpecificChecklistTask(s).removeTask(t)},ne=e=>{const t=l.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex;l.getTargetTaskObject(e).removeTask(t)},ce=e=>{const t=l.ensureCorrectTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},oe=e=>{const t=l.ensureCorrectTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},ae=e=>{let t=l.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},re=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},le=e=>{let t=l.ensureCorrectTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},ie=e=>{const t=l.ensureCorrectSubcontainer(e);let s=t.firstElementChild;t.removeChild(s),s=null},de=e=>{const t=l.ensureCorrectSubcontainer(e);let s=t.querySelector("input");t.removeChild(s),s=null},ke=e=>{const t=l.ensureCorrectButtonElement(e).previousElementSibling;let s=t.querySelector("label");t.removeChild(s),s=null},ue=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section");let s=t.querySelector(".checklist-input");t.removeChild(s),s=null},Te=e=>{let t=l.ensureCorrectChecklistTaskElement(e);l.ensureCorrectChecklistElement(e).removeChild(t),t=null},me={addTab:()=>{const e=i(),t=E(e);if(H(t),G(t),U(t),l.checkIfOnlyOneTab()){const e=u();L(e)}},insertTabInputElement:e=>{if(!l.checkForTabInputElement(e)){const t=S(e);ce(e),f(e,t),F(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),y(e),oe(e))},removeTab:e=>{if(te(e),ae(e),l.checkIfWasCurrentTab(e)){const e=u();L(e)}},switchTab:e=>{k(e),re(),A(e)},newTask:()=>{const e=T(),t=I(e);z(t),J(t),Q(t),V(t),ee(t)},removeTask:e=>{se(e),le(e)},insertTaskInputElement:e=>{if(!l.checkForTaskSubcontainerInputElement(e)){ie(e);const t=x(e);D(e,t),K(t)}},updateTask:e=>{"Enter"===e.code&&(m(e),q(e),de(e))},toggleTaskComplete:e=>{p(e),O(e)},addNewChecklistTask:e=>{const t=g(e),s=N(e,t);X(s),Z(s),_(s)},insertChecklistTaskInputElement:e=>{if(!l.checkForChecklistTaskInputElement(e)){ke(e);const t=j(e);w(e,t),Y(t)}},updateChecklistTask:e=>{"Enter"===e.code&&(b(e),P(e),ue(e))},toggleChecklistTaskComplete:e=>{h(e),B(e)},removeChecklistTask:e=>{ne(e),Te(e)},toggleTaskPin:e=>{C(e),M(e),R(e)}};let pe=a("Default test");r.addTask(pe);let ge=c("Make Money TEST 0","Task Due Date","Task Description","Task Notes");console.log(pe.addTask(ge));let be=c("Make Money TEST AGAIN 1","Task Due Date","Task Description","Task Notes");pe.addTask(be);let he=c("Make Money TEST AGAIN AGAIN 2","Task Due Date","Task Description","Task Notes");pe.addTask(he);let Ce=c("Make Money TEST AGAIN AGAIN AGAIN 3","Task Due Date","Task Description","Task Notes");pe.addTask(Ce),$(),H(),G(),console.log(r),console.log(r.getChecklistTasks()),console.log(r.getCurrentTabIndex()),console.log(pe.getChecklistTasks()),console.log(pe.getSpecificChecklistTask(0)),console.log(pe.getSpecificChecklistTask(0).getTaskTitle()),v(0),U(),W(),z(),J(),Q(),V(),X();let Ee=o("Checklist Task Description TEST");ge.addTask(Ee),Z(),_(),ee()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
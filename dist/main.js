(()=>{"use strict";const t=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},e=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",G.insertTabInputElement)},s=t=>{t.addEventListener("keydown",G.updateTab)},n=(t=document)=>{const e=Array.from(t.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",G.removeTab)},a=(t=document)=>{const e=Array.from(t.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",G.switchTab)},o=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.addTask)},c=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",G.insertTaskInputElement)},i=t=>{t.addEventListener("keydown",G.updateTask)},l=(t=document)=>{const e=t.querySelectorAll(".to-do-pin");for(const t of e)t.addEventListener("click",G.toggleTaskPin)},r=(t=document)=>{const e=t.querySelectorAll(".to-do-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleTaskComplete)},d=(t=document)=>{const e=Array.from(t.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",G.removeTask)},k=(t=document)=>{const e=t.querySelectorAll(".add-checklist-task");for(const t of e)t.addEventListener("click",G.addNewChecklistTask)},u=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-checklist-task"));for(const t of e)t.addEventListener("click",G.insertChecklistTaskInputElement)},T=t=>{t.addEventListener("keydown",G.updateChecklistTask)},g=(t=document)=>{const e=t.querySelectorAll(".checklist-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleChecklistTaskComplete)},b=(t=document)=>{const e=t.querySelectorAll(".remove-checklist-task");for(const t of e)t.addEventListener("click",G.removeChecklistTask)},m=(t=document)=>{const e=t.querySelectorAll(".to-do-task-change-display");for(const t of e)t.addEventListener("click",G.toggleDisplayTaskDetails)},p=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},h=(()=>{let t=0;const e=()=>t;let s={getCurrentTabIndex:e,setCurrentTabIndex:e=>{t=null===e?null:Number(e)},getCurrentTabObject:()=>{const t=e();return h.getSpecificChecklistTask(t)}};return Object.assign(s,p(s)),s})(),C=(t,e)=>{let s=e;return Object.assign(t,{getTaskTitle:()=>s,setTaskTitle(t){s=t}})},f=(t,e)=>{let s=e;return Object.assign(t,{getTaskDescription:()=>s,setTaskDescription(t){s=t}})},S=(t,e)=>{let s=e;return Object.assign(t,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},y=(t="New Tab")=>{const e=(t=>{let e={};return Object.assign(e,C(e,t),p(e)),e})(t);return h.addTask(e)},E=(t,e)=>{h.getSpecificChecklistTask(t).setTaskTitle(e)},I=t=>{h.setCurrentTabIndex(t)},v=()=>{const t=h.getChecklistTasks();let e;for(const s in t)if(void 0!==t[s])return h.setCurrentTabIndex(s),e=s,e;return h.setCurrentTabIndex(null),null},D=(t,e="New Task Title",s="Task Due Date",n="Task Description",a="Task Notes",o=!1,c=!1)=>{const i=h.getSpecificChecklistTask(t),l=((t,e,s,n,a,o)=>{let c={};return Object.assign(c,C(c,t),f(c,s),((t,e)=>{let s=e;return Object.assign(t,{getTaskDueDate:()=>s,setTaskDueDate(t){s=t}})})(c,e),((t,e)=>{let s=e;return Object.assign(t,{getTaskNotes:()=>s,setTaskNotes(t){s=t}})})(c,n),((t,e)=>{let s=e;return Object.assign(t,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(c,a),S(c,o),p(c)),c})(e,s,n,a,o,c);return i.addTask(l)},L=(t,e,s)=>{const n=h.getCurrentTabObject().getSpecificChecklistTask(t);"Title"===e?n.setTaskTitle(s):"Due Date"===e?n.setTaskDueDate(s):"Description"===e?n.setTaskDescription(s):"Notes"===e&&n.setTaskNotes(s)},x=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).togglePinnedState()},O=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).toggleCompletedState()},q=(t,e,s="Checklist Task Description",n=!1)=>{const a=h.getSpecificChecklistTask(t).getSpecificChecklistTask(e),o=((t,e)=>{let s={};return Object.assign(s,f(s,t),S(s,e)),s})(s,n);return a.addTask(o)},A=(t,e,s)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).setTaskDescription(s)},_=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).toggleCompletedState()},N=(()=>{const t=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e},e=t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task-subcontainer");)e=e.parentElement,s=Array.from(e.classList);return e},s=t=>{let e=t.target,s=Array.from(e.classList);for(;!s.includes("checklist-task");)e=e.parentElement,s=Array.from(e.classList);return e},n=t=>document.querySelector(`[data-task-index='${t}']`),a=t=>h.getSpecificChecklistTask(t),o=(t,e)=>a(t).getSpecificChecklistTask(e);return{checkIfWasCurrentTab:e=>"current-tab"===t(e).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},getTaskIndex:t=>{const e=(t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task");)e=e.parentElement,s=Array.from(e.classList);return e})(t);return e.dataset.taskIndex},getChecklistTaskIndex:t=>s(t).dataset.checklistTaskIndex,getTabIndex:e=>t(e).dataset.tabIndex,getNewValue:t=>t.target.value,getTaskSubcontainerType:t=>{const s=e(t),n=Array.from(s.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(t,e)=>{const s=n(t);let a;return"Title"===e?a=s.querySelector(".to-do-title-section"):"Due Date"===e?a=s.querySelector(".to-do-due-date-section"):"Description"===e?a=s.querySelector(".to-do-description-section"):"Notes"===e&&(a=s.querySelector(".to-do-notes-section")),a},getTaskElement:n,getChecklistTaskElement:(t,e)=>n(t).querySelector(`[data-checklist-task-index='${e}']`),getTabElement:t=>document.querySelector(`[data-tab-index='${t}']`),checkForExistingInputElement:(n,a)=>{let o;return"Tab"===a?o=t(n).querySelector(".tab-name-input"):"Task"===a?o=e(n).querySelector(".task-input"):"Checklist Task"===a&&(o=s(n).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==o},tryingToDoubleClick:t=>{const e=n(t);return!!Array.from(e.classList).includes("mid-animation")},getTabObject:a,getTaskObject:o,getChecklistTaskObject:(t,e,s)=>o(t,e).getSpecificChecklistTask(s),checkIfNoMoreTabs:()=>{const t=document.querySelector(".to-do-tab-section");return 0===Array.from(t.querySelectorAll(".tab-title")).length}}})(),$=(()=>{const t=t=>{const e=h.getCurrentTabObject().getSpecificChecklistTask(t),s=document.querySelector(".to-do-content"),n=document.createElement("div");n.classList.add("to-do-task"),n.dataset.taskIndex=t;const a=e.getTaskTitle(),o=e.getTaskDescription(),c=e.getTaskDueDate(),i=e.getTaskNotes(),l=`to-do-complete-checkbox-${t}`;return n.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',n.querySelector(".to-do-title").textContent=a,n.querySelector(".to-do-due-date").textContent="Due On: "+c,n.querySelector(".to-do-description").textContent="Description: "+o,n.querySelector(".to-do-notes").textContent="Notes: "+i,s.appendChild(n),n.querySelector("label").setAttribute("for",l),n.querySelector(".to-do-complete-checkbox").setAttribute("id",l),n},e=t=>{const e=N.getTaskElement(t),s=e.querySelector(".to-do-complete-checkbox");h.getCurrentTabObject().getSpecificChecklistTask(t).getCompletedState()?(s.checked=!0,e.classList.add("task-completed")):(s.checked=!1,e.classList.remove("task-completed"))},s=(t,e)=>{const s=N.getTaskElement(t).querySelector(".checklist"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("div");return a.classList.add("checklist-task"),a.dataset.checklistTaskIndex=e,a.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${t}-${e}" class="checklist-complete-checkbox">\n                <label for="checklist-${t}-${e}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,a.querySelector(".checklist-task-description").textContent=n,s.appendChild(a),a},n=(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e);s.checked=n.getCompletedState(),n.getCompletedState()?s.classList.add("checklist-task-completed"):s.classList.remove("checklist-task-completed")},a=t=>{const e=N.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.querySelector(".to-do-pin").querySelector("img");s.getPinnedState()?n.setAttribute("src","./assets/pin-pinned.png"):n.setAttribute("src","./assets/pin-unpinned.png")},o=t=>{const e=N.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.dataset.taskIndex,a=document.querySelector(".to-do-content");if(s.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const o of t){if(n<o.dataset.taskIndex){a.insertBefore(e,o);break}o===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}else{const t=Array.from(a.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===t.length)a.appendChild(e);else{const s=t[t.length-1];for(const o of t){if(n<o.dataset.taskIndex){a.insertBefore(e,o);break}o===s&&a.appendChild(e,s)}}e.classList.remove("pinned-task")}};return{addNewTabToDOM:t=>{const e=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),a=h.getSpecificChecklistTask(t).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=t,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=a,s.insertBefore(n,e),n},insertTabInputElement:t=>{const e=N.getTabElement(t),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),e.insertBefore(s,e.firstChild),s.focus(),s},setTabInputElementValue:t=>{const e=N.getTabElement(t).querySelector("input"),s=h.getSpecificChecklistTask(t).getTaskTitle();e.value=s},insertTabNameElement:t=>{const e=N.getTabElement(t),s=h.getSpecificChecklistTask(t).getTaskTitle(),n=document.createElement("button");n.classList.add("switch-tab");const a=document.createElement("h2");return a.classList.add("tab-name"),a.textContent=s,n.appendChild(a),e.insertBefore(n,e.firstChild),e},addCurrentTabIndicator:()=>{const t=h.getCurrentTabIndex();null!==t&&N.getTabElement(t).setAttribute("id","current-tab")},loadTasksFromNewCurrentTab:()=>{const c=h.getCurrentTabObject().getChecklistTasks();for(const i in c){const l=c[i];if(void 0!==l){const c=t(i);a(i),o(i),e(i),G.addTaskListeners(c);const r=l.getChecklistTasks();for(const t in r)if(void 0!==r[t]){const e=s(i,t);n(i,t),G.addChecklistTaskListeners(e)}}}},addNewTaskToDOM:t,insertTaskInputElement:(t,e)=>{const s=N.getTaskSubcontainerElement(t,e),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),s.insertBefore(n,s.firstChild),n.focus(),n},setTaskInputElementValue:(t,e)=>{const s=N.getTaskSubcontainerElement(t,e).querySelector("input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;"Title"===e?a=n.getTaskTitle():"Due Date"===e?a=n.getTaskDueDate():"Description"===e?a=n.getTaskDescription():"Notes"===e&&(a=n.getTaskNotes()),s.value=a},insertTaskSubcontentElement:(t,e)=>{const s=N.getTaskSubcontainerElement(t,e),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;if("Title"===e){const t=n.getTaskTitle();a=document.createElement("h3"),a.classList.add("to-do-title"),a.textContent=t}else if("Due Date"===e){const t=n.getTaskDueDate();a=document.createElement("p"),a.classList.add("to-do-due-date"),a.textContent="Due On: "+t}else if("Description"===e){const t=n.getTaskDescription();a=document.createElement("p"),a.classList.add("to-do-description"),a.textContent="Description: "+t}else if("Notes"===e){const t=n.getTaskNotes();a=document.createElement("p"),a.classList.add("to-do-notes"),a.textContent="Notes: "+t}s.insertBefore(a,s.firstChild)},toggleTaskDOMComplete:e,addNewChecklistTaskToDOM:s,insertChecklistTaskInputElement:(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=document.createElement("input");return n.classList.add("checklist-input"),n.setAttribute("type","text"),s.appendChild(n),n.focus(),n},setChecklistTaskInputElementValue:(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription();s.value=n},insertChecklistTaskDescriptionElement:(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${t}-${e}`),a.classList.add("checklist-task-description"),a.textContent=n,s.appendChild(a)},toggleChecklistTaskDOMComplete:n,changePinButtonImage:a,shiftTaskElementPosition:o,toggleDisplayTaskDetails:t=>{const e=N.getTaskElement(t);Array.from(e.querySelectorAll(".animation-target")).forEach((t=>{Array.from(t.classList).includes("hide-to-do-details")?(t.classList.remove("hide-to-do-details"),t.classList.add("display-to-do-details"),t.style.display="flex"):(t.classList.add("hide-to-do-details"),t.classList.remove("display-to-do-details"),setTimeout((()=>{t.style.display="none"}),1e3))})),(t=>{t.classList.add("mid-animation"),setTimeout((()=>{t.classList.remove("mid-animation")}),1e3)})(e)},rotateChevronButton:t=>{const e=N.getTaskElement(t).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(e.classList);0===s.length||s.includes("rotate-hide-task-details")?(e.classList.remove("rotate-hide-task-details"),e.classList.add("rotate-display-task-details"),e.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(e.classList.remove("rotate-display-task-details"),e.classList.add("rotate-hide-task-details"),e.classList.remove("rotated-chevron"))},toggleAnimations:(t,e)=>{const s=N.getTaskElement(t),n=s.querySelector(".to-do-task-change-display").querySelector("img"),a=Array.from(s.querySelectorAll(".animation-target"));a.push(n),a.forEach((t=>{"Enable"===e?t.classList.add("no-animations"):"Disable"===e&&t.classList.remove("no-animations")}))}}})(),j=t=>{const e=N.getTabElement(t);let s=e.querySelector(".switch-tab");e.removeChild(s),s=null},w=t=>{const e=N.getTabElement(t);let s=e.querySelector("input");e.removeChild(s),s=null},P=t=>{let e=N.getTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},M=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},V=t=>{let e=N.getTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},B=(t,e)=>{const s=N.getTaskSubcontainerElement(t,e);let n=s.firstElementChild;s.removeChild(n),n=null},H=(t,e)=>{const s=N.getTaskSubcontainerElement(t,e);let n=s.querySelector("input");s.removeChild(n),n=null},R=(t,e)=>{const s=N.getChecklistTaskElement(t,e),n=s.querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-task-description");n.removeChild(a),a=null},F=(t,e)=>{const s=N.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section");let n=s.querySelector(".checklist-input");s.removeChild(n),n=null},J=(t,e)=>{const s=N.getTaskElement(t).querySelector(".checklist");let n=N.getChecklistTaskElement(t,e);s.removeChild(n),n=null},z=()=>{document.querySelector(".to-do-content").replaceChildren()},W=t=>{h.removeTask(t)},Q=t=>{h.getCurrentTabObject().removeTask(t)},U=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).removeTask(e)},X=(()=>{let t=!1;const e=()=>{const t=localStorage.getItem("to_do_list");return JSON.parse(t)},s=t=>{const e=JSON.stringify(t);localStorage.setItem("to_do_list",e)};return{addTab:t=>{const n=N.getTabObject(t),a=e(),o=`{\n            "title": "${n.getTaskTitle()}",\n            "tasks": {}\n        }`,c=JSON.parse(o);a.tabs[`tab_${t}`]=c,s(a)},setCurrentTab:t=>{const n=e();n.current_tab=null===t?null:Number(t),s(n)},setTabName:t=>{const n=N.getTabObject(t),a=e();a.tabs[`tab_${t}`].title=n.getTaskTitle(),s(a)},getCurrentTabIndex:()=>e().current_tab,getTabTitle:t=>e().tabs[t].title,getTabObjects:()=>X.getLocalStorageValue().tabs,removeTab:t=>{const n=e();n.tabs[`tab_${t}`]=null,s(n)},addTask:(t,n)=>{const a=N.getTaskObject(t,n),o=e(),c=`{\n            "title": "${a.getTaskTitle()}",\n            "due_date": "${a.getTaskDueDate()}",\n            "description": "${a.getTaskDescription()}",\n            "notes": "${a.getTaskNotes()}",\n            "pinned": ${a.getPinnedState()},\n            "completed": ${a.getCompletedState()},\n            "checklist_tasks": {}\n        }`,i=JSON.parse(c);o.tabs[`tab_${t}`].tasks[`task_${n}`]=i,s(o)},setTaskSubcontainerValue:(t,n,a)=>{const o=N.getTaskObject(t,n),c=e();"Title"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].title=o.getTaskTitle():"Due Date"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].due_date=o.getTaskDueDate():"Description"===a?c.tabs[`tab_${t}`].tasks[`task_${n}`].description=o.getTaskDescription():"Notes"===a&&(c.tabs[`tab_${t}`].tasks[`task_${n}`].notes=o.getTaskNotes()),s(c)},toggleTaskPinned:(t,n)=>{const a=N.getTaskObject(t,n),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].pinned=a.getPinnedState(),s(o)},toggleTaskCompleted:(t,n)=>{const a=N.getTaskObject(t,n),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].completed=a.getCompletedState(),s(o)},getTaskValues:(t,s)=>{const n=e();let a=[];const o=n.tabs[t].tasks[s].title;a.push(o);const c=n.tabs[t].tasks[s].due_date;a.push(c);const i=n.tabs[t].tasks[s].description;a.push(i);const l=n.tabs[t].tasks[s].notes;a.push(l);const r=n.tabs[t].tasks[s].pinned;a.push(r);const d=n.tabs[t].tasks[s].completed;return a.push(d),a},getTaskObjects:t=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks,removeTask:(t,n)=>{const a=e();a.tabs[`tab_${t}`].tasks[`task_${n}`]=null,s(a)},addChecklistTask:(t,n,a)=>{const o=N.getChecklistTaskObject(t,n,a),c=e(),i=`{\n            "description": "${o.getTaskDescription()}",\n            "completed": ${o.getCompletedState()}\n        }`,l=JSON.parse(i);c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=l,s(c)},setChecklistTaskDescription:(t,n,a)=>{const o=N.getChecklistTaskObject(t,n,a),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].description=o.getTaskDescription(),s(c)},toggleChecklistTaskCompleted:(t,n,a)=>{const o=N.getChecklistTaskObject(t,n,a),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].completed=o.getCompletedState(),s(c)},getChecklistTaskValues:(t,s,n)=>{const a=e();let o=[];const c=a.tabs[t].tasks[s].checklist_tasks[n].description;o.push(c);const i=a.tabs[t].tasks[s].checklist_tasks[n].completed;return o.push(i),o},getChecklistTaskObjects:(t,e)=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks,removeChecklistTask:(t,n,a)=>{const o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=null,s(o)},checkForExistingStorage:()=>!!localStorage.getItem("to_do_list"),getLocalStorageValue:e,initializeTodoList:()=>{const t=`{\n            "current_tab": ${h.getCurrentTabIndex()},\n            "tabs": {}\n        }`,e=JSON.parse(t);s(e)},toggleLoading:()=>{t=!t},isLoading:()=>t}})(),G=(()=>{const p=(t,e="New Tab")=>{const s=y(e),n=$.addNewTabToDOM(s);if(C(n),!X.isLoading()&&(X.addTab(s),N.checkIfOnlyOneTab())){const t=v();$.addCurrentTabIndicator(),X.setCurrentTab(t)}return s},C=t=>{e(t),n(t),a(t)},f=(t,e=h.getCurrentTabIndex(),s="New Task Title",n="Task Due Date",a="Task Description",o="Task Notes",c=!1,i=!1)=>{if(null===h.getCurrentTabIndex())return void K();const l=D(e,s,n,a,o,c,i),r=$.addNewTaskToDOM(l);return S(r),X.isLoading()||X.addTask(h.getCurrentTabIndex(),l),l},S=t=>{d(t),c(t),r(t),k(t),l(t),m(t)},G=t=>{u(t),g(t),b(t)},K=()=>{const t=p(event,"Instructions"),e=f(event,t,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!1,!1);$.toggleTaskDOMComplete(e),$.changePinButtonImage(e),$.shiftTaskElementPosition(e),Y(t,e,"If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!1),Y(t,e,"Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!1),Y(t,e,"Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!1)},Y=(t,e,s,n)=>{const a=q(t,e,s,n),o=$.addNewChecklistTaskToDOM(e,a);$.toggleChecklistTaskDOMComplete(e,a),G(o),X.isLoading()||X.addChecklistTask(t,e,a)},Z=()=>{X.toggleLoading(),tt(),et(),X.toggleLoading()},tt=()=>{const t=X.getCurrentTabIndex();h.setCurrentTabIndex(t)},et=()=>{const t=X.getTabObjects();for(const e in t)if(null===t[e])h.addTask(void 0);else{const t=X.getTabTitle(e),s=p(event,t);st(s,e)}$.addCurrentTabIndicator()},st=(t,e)=>{const s=N.getTabObject(t),n=X.getTaskObjects(t);for(const a in n)if(null===n[a])s.addTask(void 0);else{const s=X.getTaskValues(e,a),n=s[0],o=s[1],c=s[2],i=s[3],l=s[4],r=s[5];let d;t===h.getCurrentTabIndex()?(d=f(event,t,n,o,c,i,l,r),$.toggleTaskDOMComplete(d),$.changePinButtonImage(d),$.shiftTaskElementPosition(d)):d=D(t,n,o,c,i,l,r),nt(t,e,d,a)}},nt=(t,e,s,n)=>{const a=N.getTaskObject(t,s),o=X.getChecklistTaskObjects(t,s);for(const c in o)if(null===o[c])a.addTask(void 0);else{const a=X.getChecklistTaskValues(e,n,c),o=a[0],i=a[1];let l;l=t===h.getCurrentTabIndex()?Y(t,s,o,i):q(t,s,o,i)}},at=()=>{t(),o()};return{addTab:p,insertTabInputElement:t=>{if(!N.checkForExistingInputElement(t,"Tab")){const e=N.getTabIndex(t),n=$.insertTabInputElement(e);j(e),$.setTabInputElementValue(e),s(n)}},updateTab:t=>{if("Enter"===t.code){const e=N.getTabIndex(t),s=N.getNewValue(t);E(e,s);const n=$.insertTabNameElement(e);w(e),a(n),X.setTabName(e)}},switchTab:t=>{if(!N.checkIfWasCurrentTab(t)){const e=N.getTabIndex(t);I(e),M(),$.addCurrentTabIndicator(),z(),$.loadTasksFromNewCurrentTab(),X.setCurrentTab(e)}},removeTab:t=>{const e=N.getTabIndex(t);if(W(e),P(e),X.removeTab(e),N.checkIfWasCurrentTab(t)){const t=v();$.addCurrentTabIndicator(),z(),X.setCurrentTab(t),N.checkIfNoMoreTabs()||$.loadTasksFromNewCurrentTab()}},addTabListeners:C,addTask:f,insertTaskInputElement:t=>{if(!N.checkForExistingInputElement(t,"Task")){const e=N.getTaskIndex(t),s=N.getTaskSubcontainerType(t);B(e,s);const n=$.insertTaskInputElement(e,s);$.setTaskInputElementValue(e,s),i(n)}},updateTask:t=>{if("Enter"===t.code){const e=N.getTaskIndex(t),s=N.getTaskSubcontainerType(t),n=N.getNewValue(t);L(e,s,n),$.insertTaskSubcontentElement(e,s),H(e,s),X.setTaskSubcontainerValue(h.getCurrentTabIndex(),e,s)}},toggleTaskPin:t=>{const e=N.getTaskIndex(t);$.toggleAnimations(e,"Enable"),x(e),$.changePinButtonImage(e),$.shiftTaskElementPosition(e),X.toggleTaskPinned(h.getCurrentTabIndex(),e)},toggleTaskComplete:t=>{const e=N.getTaskIndex(t);O(e),$.toggleTaskDOMComplete(e),X.toggleTaskCompleted(h.getCurrentTabIndex(),e)},removeTask:t=>{const e=N.getTaskIndex(t);Q(e),V(e),X.removeTask(h.getCurrentTabIndex(),e)},addTaskListeners:S,addNewChecklistTask:t=>{const e=h.getCurrentTabIndex(),s=N.getTaskIndex(t),n=q(e,s),a=$.addNewChecklistTaskToDOM(s,n);G(a),X.isLoading()||X.addChecklistTask(h.getCurrentTabIndex(),s,n)},insertChecklistTaskInputElement:t=>{if(!N.checkForExistingInputElement(t,"Checklist Task")){const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t);R(e,s);const n=$.insertChecklistTaskInputElement(e,s);$.setChecklistTaskInputElementValue(e,s),T(n)}},updateChecklistTask:t=>{if("Enter"===t.code){const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t),n=N.getNewValue(t);A(e,s,n),$.insertChecklistTaskDescriptionElement(e,s),F(e,s),X.setChecklistTaskDescription(h.getCurrentTabIndex(),e,s)}},toggleChecklistTaskComplete:t=>{const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t);_(e,s),$.toggleChecklistTaskDOMComplete(e,s),X.toggleChecklistTaskCompleted(h.getCurrentTabIndex(),e,s)},removeChecklistTask:t=>{const e=N.getTaskIndex(t),s=N.getChecklistTaskIndex(t);U(e,s),J(e,s),X.removeChecklistTask(h.getCurrentTabIndex(),e,s)},addChecklistTaskListeners:G,toggleDisplayTaskDetails:t=>{const e=N.getTaskIndex(t);N.tryingToDoubleClick(e)||($.toggleAnimations(e,"Disable"),$.toggleDisplayTaskDetails(e),$.rotateChevronButton(e))},loadInInstructionsPage:K,loadInLocalStorage:Z,loadInTabObjects:et,loadInInitialListeners:at,loadInPage:()=>{at(),X.checkForExistingStorage()?Z():(X.initializeTodoList(),K())}}})();G.loadInPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})},t=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},o=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},s=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},l=(l,n,a,c)=>{let i={};return Object.assign(i,e(i,l),t(i,n),((e,t)=>{let o=t;return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(i,a),((e,t)=>{let o=t;return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(i,c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(i),o(i),s(i)),i},n=t=>{let o={};return Object.assign(o,e(o,t),s(o)),o},a=(()=>{let e={};return Object.assign(e,s(e)),e})(),c=e=>a.addTask(e),i=(e,t)=>e.addTask(t),g=(e,t)=>e.addTask(t),r=e=>{a.removeTask(e)},k=()=>{const e=n("New Tab");return a.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},T=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t};return{addNewTabToDOM:e=>{const t=document.querySelector(".add-tab"),o=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),l=a.getSpecificChecklistTask(e).getTaskTitle();s.classList.add("tab-title"),s.dataset.tabIndex=e,s.innerHTML=`\n            <button class="switch-tab">\n                <h2>${l}</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n            `,o.insertBefore(s,t)},editTabNameDOM:e=>{const t=e.target.parentElement,o=t.querySelector("button").querySelector("h2"),s=t.dataset.tabIndex,l=a.getSpecificChecklistTask(s).getTaskTitle();o.textContent=l},removeTabNameElement:t=>{const o=e(t);let s=o.querySelector(".switch-tab");o.removeChild(s),s=null},insertTabInputElement:t=>{const o=e(t),s=document.createElement("input");s.classList.add("tab-name-input"),s.setAttribute("type","text"),o.insertBefore(s,o.firstChild)}}})(),u=()=>{const e=k();T.addNewTabToDOM(e)},p=e=>{"Enter"===e.code&&(d(e),T.editTabNameDOM(e))},m=e=>{T.removeTabNameElement(e),T.insertTabInputElement(e)},b=()=>{document.querySelector(".add-tab").addEventListener("click",u)},h=()=>{document.querySelector(".tab-name-input").addEventListener("keydown",p)},S=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",m)};let C=(e=>{let s={};return Object.assign(s,t(s,"ddtest"),o(s)),s})();console.log(C),console.log(C.getCompletedState()),C.getCompletedState()?console.log(C.getCompletedState(),"this is now true"):console.log(C.getCompletedState(),"this is still false"),console.log(C.getCompletedState()),console.log(C.toggleCompletedState()),console.log(C.getCompletedState()),C.getCompletedState()?console.log(C.getCompletedState(),"this is now true"):console.log(C.getCompletedState(),"this is still false"),console.log(C.getCompletedState()),console.log(C),console.log(C.getTaskDescription()),C.setTaskDescription("wowwie"),console.log(C.getTaskDescription());let f=l("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(f),console.log(f.getTaskTitle()),console.log(f.getTaskDescription()),console.log(f.getTaskDueDate()),console.log(f.getTaskNotes()),console.log(f.getPinnedState()),console.log(f.getCompletedState()),f.setTaskTitle("Make Chicken Broth"),f.setTaskDescription("requires 1 chicken and 1 broth"),f.setTaskDueDate("before I caught this cold"),f.setTaskNotes("don't sneeze into pot"),f.togglePinnedState(),f.toggleCompletedState(),console.log(f.getTaskTitle()),console.log(f.getTaskDescription()),console.log(f.getTaskDueDate()),console.log(f.getTaskNotes()),console.log(f.getPinnedState()),console.log(f.getCompletedState()),console.log(g(f,C)),console.log(f.getChecklistTasks()),console.log(f.getSpecificChecklistTask(0)),console.log(f.getSpecificChecklistTask(0).getTaskDescription());let D=n("kitchen stuff");console.log(D),console.log(i(D,f)),console.log(D),console.log(D.getChecklistTasks()),console.log(D.getSpecificChecklistTask(0)),console.log(D.getSpecificChecklistTask(0).getTaskTitle());let E=l("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(D),console.log(i(D,E)),console.log(D.getSpecificChecklistTask(1)),console.log(D.getSpecificChecklistTask(1).getTaskTitle()),console.log(c(D)),console.log(a.getChecklistTasks()),console.log(a.getSpecificChecklistTask(0)),console.log(a.getSpecificChecklistTask(0).getTaskTitle()),r(0),console.log(a.getChecklistTasks()),console.log(c(D)),console.log(a.getChecklistTasks()),b(),h(),S()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
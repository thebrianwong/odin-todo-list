(()=>{"use strict";const e=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},t=(()=>{let s=0;const n=()=>s;let c={getCurrentTabIndex:n,setCurrentTabIndex:e=>{s=e},getCurrentTabObject:()=>{const e=n();return t.getSpecificChecklistTask(e)}};return Object.assign(c,e(c)),c})(),s=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},n=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},c=e=>{const n=s(e).dataset.taskIndex,c=t.getCurrentTabIndex();return t.getSpecificChecklistTask(c).getSpecificChecklistTask(n)},a=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t},o=e=>document.querySelector(`[data-task-index='${e}']`);return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:s,ensureCorrectSubcontainer:n,checkForTaskSubcontainerInputElement:e=>"INPUT"===n(e).firstElementChild.tagName,getTargetTaskObject:c,ensureCorrectButtonElement:e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t},getSubcontainerType:e=>{const t=n(e);return Array.from(t.classList)},ensureCorrectChecklistElement:e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist");)t=t.parentElement,s=Array.from(t.classList);return t},ensureCorrectChecklistTaskElement:a,checkForChecklistTaskInputElement:e=>null!==a(e).querySelector(".checklist-complete-section").querySelector(".checklist-input"),getTargetChecklistTaskObject:e=>{const t=c(e),s=a(e).dataset.checklistTaskIndex;return t.getSpecificChecklistTask(s)},getTaskIndex:e=>s(e).dataset.taskIndex,getChecklistTaskIndex:e=>a(e).dataset.checklistTaskIndex,getTabIndex:t=>e(t).dataset.tabIndex,getNewValue:e=>e.target.value,getButtonType:e=>{const t=n(e),s=Array.from(t.classList);let c;return s.includes("to-do-title-section")?c="Title":s.includes("to-do-due-date-section")?c="Due Date":s.includes("to-do-description-section")?c="Description":s.includes("to-do-notes-section")&&(c="Notes"),c},getTaskSubcontainerElement:(e,t)=>{const s=o(e);let n;return"Title"===t?n=s.querySelector(".to-do-title-section"):"Due Date"===t?n=s.querySelector(".to-do-due-date-section"):"Description"===t?n=s.querySelector(".to-do-description-section"):"Notes"===t&&(n=s.querySelector(".to-do-notes-section")),n},getTaskElement:o,getChecklistTaskElement:(e,t)=>o(e).querySelector(`[data-checklist-task-index='${t}']`)}})(),c=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},a=(e,t)=>{let s=t;return Object.assign(e,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},o=(n="New Tab")=>{const c=(t=>{let n={};return Object.assign(n,s(n,t),e(n)),n})(n);return t.addTask(c)},i=(e,s)=>{t.getSpecificChecklistTask(e).setTaskTitle(s)},r=e=>{t.setCurrentTabIndex(e)},l=()=>{const e=t.getChecklistTasks();let s;for(const n in e)if(void 0!==e[n])return t.setCurrentTabIndex(n),s=n,s},d=(n="New Task Title",o="Task Due Date",i="Task Description",r="Task Notes",l=!1,d=!1)=>{const k=t.getCurrentTabIndex(),u=t.getSpecificChecklistTask(k),T=((t,n,o,i,r,l)=>{let d={};return Object.assign(d,s(d,t),c(d,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(d,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(d,i),((e,t)=>{let s=t;return Object.assign(e,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,r),a(d,l),e(d)),d})(n,o,i,r,l,d);return u.addTask(T)},k=(e,s,n)=>{const c=t.getCurrentTabObject().getSpecificChecklistTask(e);"Title"===s?c.setTaskTitle(n):"Due Date"===s?c.setTaskDueDate(n):"Description"===s?c.setTaskDescription(n):"Notes"===s&&c.setTaskNotes(n)},u=e=>{t.getCurrentTabObject().getSpecificChecklistTask(e).toggleCompletedState()},T=(e,s="Checklist Task Description",n=!1)=>{const o=t.getCurrentTabObject().getSpecificChecklistTask(e),i=((e,t)=>{let s={};return Object.assign(s,c(s,e),a(s,t)),s})(s,n);return o.addTask(i)},g=(e,s,n)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).setTaskDescription(n)},m=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).toggleCompletedState()},p=e=>{n.getTargetTaskObject(e).togglePinnedState()},b=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},h=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",G.insertTabInputElement)},C=e=>{e.addEventListener("keydown",G.updateTab)},f=(e=document)=>{const t=Array.from(e.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",G.removeTab)},y=(e=document)=>{const t=Array.from(e.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",G.switchTab)},S=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.newTask)},E=(e=document)=>{const t=Array.from(e.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",G.removeTask)},v=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",G.insertTaskInputElement)},D=e=>{e.addEventListener("keydown",G.updateTask)},q=(e=document)=>{const t=e.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",G.toggleTaskComplete)},x=(e=document)=>{const t=e.querySelectorAll(".add-checklist-task");for(const e of t)e.addEventListener("click",G.addNewChecklistTask)},I=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",G.insertChecklistTaskInputElement)},L=e=>{e.addEventListener("keydown",G.updateChecklistTask)},O=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",G.toggleChecklistTaskComplete)},A=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",G.removeChecklistTask)},w=(e=document)=>{const t=e.querySelectorAll(".to-do-pin");for(const e of t)e.addEventListener("click",G.toggleTaskPin)},N=(e=document)=>{const t=e.querySelectorAll(".to-do-task-change-display");for(const e of t)e.addEventListener("click",G.toggleDisplayTaskDetails)},j=(()=>{const e=e=>{const s=t.getCurrentTabObject().getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),c=document.createElement("div");c.classList.add("to-do-task"),c.dataset.taskIndex=e;const a=s.getTaskTitle(),o=s.getTaskDescription(),i=s.getTaskDueDate(),r=s.getTaskNotes(),l=`to-do-complete-checkbox-${e}`;return c.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',c.querySelector(".to-do-title").textContent=a,c.querySelector(".to-do-due-date").textContent="Due On: "+i,c.querySelector(".to-do-description").textContent="Description: "+o,c.querySelector(".to-do-notes").textContent="Notes: "+r,n.appendChild(c),c.querySelector("label").setAttribute("for",l),c.querySelector(".to-do-complete-checkbox").setAttribute("id",l),c},s=e=>{const s=document.querySelector(`[data-task-index='${e}']`),n=s.querySelector(".to-do-complete-checkbox");t.getCurrentTabObject().getSpecificChecklistTask(e).getCompletedState()?(n.checked=!0,s.classList.add("task-completed")):(n.checked=!1,s.classList.remove("task-completed"))},c=(e,s)=>{const n=document.querySelector(`[data-task-index='${e}'`).querySelector(".checklist"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s),a=c.getTaskDescription(),o=(c.getCompletedState(),document.createElement("div"));return o.classList.add("checklist-task"),o.dataset.checklistTaskIndex=s,o.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${e}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${e}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,o.querySelector(".checklist-task-description").textContent=a,n.appendChild(o),o},a=(e,s)=>{const n=document.querySelector(`[data-task-index='${e}']`).querySelector(`[data-checklist-task-index='${s}']`).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),c=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s);n.checked=c.getCompletedState(),c.getCompletedState()?n.classList.add("checklist-task-completed"):n.classList.remove("checklist-task-completed")},o=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,c=s.getSpecificChecklistTask(n),a=e.querySelector(".to-do-pin").querySelector("img");c.getPinnedState()?a.setAttribute("src","./assets/pin-pinned.png"):a.setAttribute("src","./assets/pin-unpinned.png")},i=e=>{const s=t.getCurrentTabObject(),n=e.dataset.taskIndex,c=s.getSpecificChecklistTask(n),a=document.querySelector(".to-do-content");if(c.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const c of t){if(n<c.dataset.taskIndex){a.insertBefore(e,c);break}c===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}};return{addNewTabToDOM:e=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),c=document.createElement("div"),a=t.getSpecificChecklistTask(e).getTaskTitle();return c.classList.add("tab-title"),c.dataset.tabIndex=e,c.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',c.querySelector(".tab-name").textContent=a,n.insertBefore(c,s),c},setTabInputElementValue:e=>{const s=document.querySelector(`[data-tab-index='${e}']`).querySelector("input"),n=t.getSpecificChecklistTask(e).getTaskTitle();s.value=n},insertTabInputElement:e=>{const t=document.querySelector(`[data-tab-index='${e}']`),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},insertTabNameElement:e=>{const s=document.querySelector(`[data-tab-index='${e}']`),n=t.getSpecificChecklistTask(e).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const a=document.createElement("h2");return a.classList.add("tab-name"),a.textContent=n,c.appendChild(a),s.insertBefore(c,s.firstChild),s},setDefaultCurrentTabDOM:e=>{const t=document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`);null!==t&&t.setAttribute("id","current-tab")},setCurrentTabDOM:e=>{document.querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&document.querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},addNewTaskToDOM:e,insertTaskInputElement:(e,t)=>{const s=n.getTaskSubcontainerElement(e,t),c=document.createElement("input");return c.classList.add("task-input"),c.setAttribute("type","text"),s.insertBefore(c,s.firstChild),c.focus(),c},setTaskInputElementValue:(e,s)=>{const c=n.getTaskSubcontainerElement(e,s).querySelector("input"),a=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;"Title"===s?o=a.getTaskTitle():"Due Date"===s?o=a.getTaskDueDate():"Description"===s?o=a.getTaskDescription():"Notes"===s&&(o=a.getTaskNotes()),c.value=o},insertTaskSubcontentElement:(e,s)=>{const c=n.getTaskSubcontainerElement(e,s),a=t.getCurrentTabObject().getSpecificChecklistTask(e);let o;if("Title"===s){const e=a.getTaskTitle();o=document.createElement("h3"),o.classList.add("to-do-title"),o.textContent=e}else if("Due Date"===s){const e=a.getTaskDueDate();o=document.createElement("p"),o.classList.add("to-do-due-date"),o.textContent="Due On: "+e}else if("Description"===s){const e=a.getTaskDescription();o=document.createElement("p"),o.classList.add("to-do-description"),o.textContent="Description: "+e}else if("Notes"===s){const e=a.getTaskNotes();o=document.createElement("p"),o.classList.add("to-do-notes"),o.textContent="Notes: "+e}c.insertBefore(o,c.firstChild)},toggleTaskDOMComplete:s,addNewChecklistTaskToDOM:c,insertChecklistTaskInputElement:(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section"),c=document.createElement("input");return c.classList.add("checklist-input"),c.setAttribute("type","text"),s.appendChild(c),c.focus(),c},setChecklistTaskInputElementValue:(e,s)=>{const c=n.getChecklistTaskElement(e,s).querySelector(".checklist-input"),a=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription();c.value=a},insertChecklistTaskDescriptionElement:(e,s)=>{const c=n.getChecklistTaskElement(e,s).querySelector(".checklist-complete-section"),a=t.getCurrentTabObject().getSpecificChecklistTask(e).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("label");o.setAttribute("for",`checklist-${e}-${s}`),o.classList.add("checklist-task-description"),o.textContent=a,c.appendChild(o)},toggleChecklistTaskDOMComplete:a,changePinButtonImage:e=>{const s=document.querySelector(`[data-task-index='${e}']`),n=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.querySelector(".to-do-pin").querySelector("img");n.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:e=>{const s=document.querySelector(`[data-task-index='${e}']`),n=t.getCurrentTabObject().getSpecificChecklistTask(e),c=s.dataset.taskIndex,a=document.querySelector(".to-do-content");if(n.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)a.insertBefore(s,a.firstElementChild);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){a.insertBefore(s,n);break}n===t&&t.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const e=Array.from(a.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===e.length)a.appendChild(s);else{const t=e[e.length-1];for(const n of e){if(c<n.dataset.taskIndex){a.insertBefore(s,n);break}n===t&&a.appendChild(s,t)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=t.getCurrentTabObject().getChecklistTasks();for(const t in n){const r=n[t];if(void 0!==r){const n=e(t);o(n),i(n),s(t),G.addTaskListeners(n);const l=r.getChecklistTasks();for(const e in l)if(void 0!==l[e]){const s=c(t,e);a(t,e),G.addChecklistTaskListeners(s)}}}},toggleDisplayTaskDetails:e=>{const t=n.ensureCorrectTaskElement(e);[t.querySelector(".to-do-description-section"),t.querySelector(".to-do-notes-section"),t.querySelector(".checklist")].forEach((e=>{Array.from(e.classList).includes("hide-to-do-details")?(e.classList.remove("hide-to-do-details"),e.classList.add("display-to-do-details")):(e.classList.add("hide-to-do-details"),e.classList.remove("display-to-do-details"))}))},rotateChevronButton:e=>{const t=n.ensureCorrectButtonElement(e).querySelector("img"),s=t.getAttribute("class");null===s||"rotate-hide-task-details"===s?(t.classList.toggle("rotate-hide-task-details",!1),t.classList.add("rotate-display-task-details")):"rotate-display-task-details"===s&&(t.classList.remove("rotate-display-task-details"),t.classList.add("rotate-hide-task-details"))}}})(),P=e=>{t.removeTask(e)},$=e=>{t.getCurrentTabObject().removeTask(e)},B=(e,s)=>{t.getCurrentTabObject().getSpecificChecklistTask(e).removeTask(s)},M=e=>{const t=document.querySelector(`[data-tab-index='${e}']`);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},H=e=>{const t=document.querySelector(`[data-tab-index='${e}']`);let s=t.querySelector("input");t.removeChild(s),s=null},R=e=>{let t=document.querySelector(`[data-tab-index='${e}']`);document.querySelector(".to-do-tab-section").removeChild(t),t=null},F=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},V=e=>{let t=document.querySelector(`[data-task-index='${e}']`);document.querySelector(".to-do-content").removeChild(t),t=null},U=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let c=s.firstElementChild;s.removeChild(c),c=null},W=(e,t)=>{const s=n.getTaskSubcontainerElement(e,t);let c=s.querySelector("input");s.removeChild(c),c=null},z=(e,t)=>{const s=n.getChecklistTaskElement(e,t),c=s.querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-task-description");c.removeChild(a),a=null},J=(e,t)=>{const s=n.getChecklistTaskElement(e,t).querySelector(".checklist-complete-section");let c=s.querySelector(".checklist-input");s.removeChild(c),c=null},Q=(e,t)=>{const s=document.querySelector(`[data-task-index='${e}']`).querySelector(".checklist");let n=s.querySelector(`[data-checklist-task-index='${t}']`);s.removeChild(n),n=null},X=()=>{document.querySelector(".to-do-content").replaceChildren()},G=(()=>{const e=(e,t="New Tab")=>{const s=o(t),c=j.addNewTabToDOM(s);if(a(c),n.checkIfOnlyOneTab()){const e=l();j.setFirstTabToCurrentTab(e)}},t=(e,t="New Task Title",n="Task Due Date",c="Task Description",a="Task Notes",o=!1,i=!1)=>{const r=d(t,n,c,a,o,i),l=j.addNewTaskToDOM(r);return s(l),r},s=e=>{E(e),v(e),q(e),x(e),w(e),N(e)},c=e=>{I(e),O(e),A(e)},a=e=>{h(e),f(e),y(e)};return{addTab:e,insertTabInputElement:e=>{if(!n.checkForTabInputElement(e)){const t=n.getTabIndex(e),s=j.insertTabInputElement(t);M(t),j.setTabInputElementValue(t),C(s)}},updateTab:e=>{if("Enter"===e.code){const t=n.getTabIndex(e),s=n.getNewValue(e);i(t,s);const c=j.insertTabNameElement(t);H(t),y(c)}},removeTab:e=>{const t=n.getTabIndex(e);if(P(t),R(t),n.checkIfWasCurrentTab(e)){const e=l();j.setFirstTabToCurrentTab(e)}},switchTab:e=>{if(!n.checkIfWasCurrentTab(e)){const t=n.getTabIndex(e);r(t),F(),j.setCurrentTabDOM(t),X(),j.loadTasksFromNewCurrentTab()}},newTask:t,removeTask:e=>{const t=n.getTaskIndex(e);$(t),V(t)},insertTaskInputElement:e=>{if(!n.checkForTaskSubcontainerInputElement(e)){const t=n.getTaskIndex(e),s=n.getButtonType(e);U(t,s);const c=j.insertTaskInputElement(t,s);j.setTaskInputElementValue(t,s),D(c)}},updateTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getButtonType(e),c=n.getNewValue(e);k(t,s,c),j.insertTaskSubcontentElement(t,s),W(t,s)}},toggleTaskComplete:e=>{const t=n.getTaskIndex(e);u(t),j.toggleTaskDOMComplete(t)},addNewChecklistTask:e=>{const t=n.getTaskIndex(e),s=T(t),a=j.addNewChecklistTaskToDOM(t,s);c(a)},insertChecklistTaskInputElement:e=>{if(!n.checkForChecklistTaskInputElement(e)){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);z(t,s);const c=j.insertChecklistTaskInputElement(t,s);j.setChecklistTaskInputElementValue(t,s),L(c)}},updateChecklistTask:e=>{if("Enter"===e.code){const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e),c=n.getNewValue(e);g(t,s,c),j.insertChecklistTaskDescriptionElement(t,s),J(t,s)}},toggleChecklistTaskComplete:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);m(t,s),j.toggleChecklistTaskDOMComplete(t,s)},removeChecklistTask:e=>{const t=n.getTaskIndex(e),s=n.getChecklistTaskIndex(e);B(t,s),Q(t,s)},toggleTaskPin:e=>{const t=n.getTaskIndex(e);p(e),j.changePinButtonImage(t),j.shiftTaskElementPosition(t)},addTaskListeners:s,addChecklistTaskListeners:c,toggleDisplayTaskDetails:e=>{j.toggleDisplayTaskDetails(e),j.rotateChevronButton(e)},addTabListeners:a,loadInitialPage:()=>{e(event,"Instructions");const s=t(event,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here!\n            Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!0,!0);j.toggleTaskDOMComplete(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),(e=>{[["If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!0],["Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!0],["Organize the different types of tasks in your life by creating themed tabs. \n            Create a new tab by clicking on the plus sign button at the top of the list.\n            Change tabs by clicking on different tab names.",!0]].forEach((t=>{const s=T(e,t[0],t[1]),n=j.addNewChecklistTaskToDOM(e,s);j.toggleChecklistTaskDOMComplete(e,s),c(n)}))})(s)}}})();b(),h(),f(),j.setDefaultCurrentTabDOM(0),y(),S(),E(),v(),q(),x(),I(),O(),A(),w(),N(),G.loadInitialPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
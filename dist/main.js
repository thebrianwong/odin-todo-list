(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})},t=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},o=e=>{let t;return Object.assign(e,{addChecklist(e){t=e},removeChecklist(){t=void 0},getChecklist:()=>t})},s=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},l=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},c=(c,g,i,a)=>{let n={};return Object.assign(n,e(n,c),t(n,g),((e,t)=>{let o=t;return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(n,i),((e,t)=>{let o=t;return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(n,a),o(n),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(n),s(n),l(n)),n},g=()=>{let e={};return Object.assign(e,l(e)),e};let i=(e=>{let o={};return Object.assign(o,t(o,"ddtest"),s(o)),o})();console.log(i),console.log(i.getCompletedState()),i.getCompletedState()?console.log(i.getCompletedState(),"this is now true"):console.log(i.getCompletedState(),"this is still false"),console.log(i.getCompletedState()),console.log(i.toggleCompletedState()),console.log(i.getCompletedState()),i.getCompletedState()?console.log(i.getCompletedState(),"this is now true"):console.log(i.getCompletedState(),"this is still false"),console.log(i.getCompletedState()),console.log(i),console.log(i.getTaskDescription()),i.setTaskDescription("wowwie"),console.log(i.getTaskDescription());let a=c("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(a),console.log(a.getTaskTitle()),console.log(a.getTaskDescription()),console.log(a.getTaskDueDate()),console.log(a.getTaskNotes()),console.log(a.getPinnedState()),console.log(a.getCompletedState()),a.setTaskTitle("Make Chicken Broth"),a.setTaskDescription("requires 1 chicken and 1 broth"),a.setTaskDueDate("before I caught this cold"),a.setTaskNotes("don't sneeze into pot"),a.togglePinnedState(),a.toggleCompletedState(),console.log(a.getTaskTitle()),console.log(a.getTaskDescription()),console.log(a.getTaskDueDate()),console.log(a.getTaskNotes()),console.log(a.getPinnedState()),console.log(a.getCompletedState()),console.log(a.getChecklist()),a.addChecklist(["chicken","broth"]),console.log(a.getChecklist()),a.removeChecklist(),console.log(a.getChecklist());let n=g();console.log(n),console.log(n.addTask("bend toilet")),console.log(n.addTask("pinch toilet")),console.log(n.getChecklistTasks()),console.log(n.getSpecificChecklistTask(1)),n.removeTask(0),console.log(n.getChecklistTasks()),a.addChecklist(n),console.log(a),console.log(a.getChecklist()),console.log(a.getChecklist().getChecklistTasks()),console.log(a.getChecklist().addTask(i)),console.log(a.getChecklist().getSpecificChecklistTask(2)),console.log(a.getChecklist().getSpecificChecklistTask(2).getTaskDescription()),console.log(a.getChecklist().getSpecificChecklistTask(2).getCompletedState()),console.log(a.getChecklist().getSpecificChecklistTask(2).toggleCompletedState()),console.log(a.getChecklist().getSpecificChecklistTask(2).getCompletedState()),console.log(a.getChecklist().getSpecificChecklistTask(2).setTaskDescription("IT WORKS")),console.log(a.getChecklist().getSpecificChecklistTask(2).getTaskDescription());let k=(t=>{let s={};return Object.assign(s,e(s,"kitchen stuff"),o(s)),s})(),C=g();k.addChecklist(C),console.log(k.getChecklist().addTask(a)),console.log(k),console.log(k.getChecklist()),console.log(k.getChecklist().getSpecificChecklistTask(0)),console.log(k.getChecklist().getSpecificChecklistTask(0).getTaskTitle());let h=c("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(k),console.log(k.getChecklist()),console.log(k.getChecklist().addTask(h)),console.log(k.getChecklist().getSpecificChecklistTask(1)),console.log(k.getChecklist().getSpecificChecklistTask(1).getTaskTitle())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const t=(t,e)=>{let n=e;return Object.assign(t,{getTaskTitle:()=>n,setTaskTitle(t){n=t}})},e=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},n=(n,s,o,a)=>{let c={};return Object.assign(c,t(c,n),((t,e)=>{let n=e;return Object.assign(t,{getTaskDescription:()=>n,setTaskDescription(t){n=t}})})(c,o),((t,e)=>{let n=e;return Object.assign(t,{getTaskDueDate:()=>n,setTaskDueDate(t){n=t}})})(c,s),((t,e)=>{let n=e;return Object.assign(t,{getTaskNotes:()=>n,setTaskNotes(t){n=t}})})(c,a),(t=>{let e=!1;return Object.assign(t,{togglePinnedState(){e=!e},getPinnedState:()=>e})})(c),(t=>{let e=!1;return Object.assign(t,{toggleCompletedState(){e=!e},getCompletedState:()=>e})})(c),e(c)),c},s=n=>{let s={};return Object.assign(s,t(s,n),e(s)),s},o=(()=>{let t=0,n={getCurrentTabIndex:()=>t,setCurrentTabIndex:e=>{t=e}};return Object.assign(n,e(n)),n})(),a=(()=>{const t=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e},e=t=>{let e=t.target.parentElement;for(;"to-do-task"!==e.getAttribute("class");)e=e.parentElement;return e},n=t=>{let e=t.target.parentElement,n=Array.from(e.classList);for(;!n.includes("to-do-task-subcontainer");)e=e.parentElement,n=Array.from(e.classList);return e},s=t=>{let e=t.target;for(;"BUTTON"!==e.tagName;)e=e.parentElement;return e};return{ensureCorrectTabElement:t,checkForTabInputElement:e=>"INPUT"===t(e).firstElementChild.tagName,checkIfWasCurrentTab:e=>"current-tab"===t(e).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:e,ensureCorrectSubcontainer:n,checkForTaskSubcontainerInputElement:t=>"INPUT"===n(t).firstElementChild.tagName,getTargetTaskObject:t=>{const n=e(t).dataset.taskIndex,s=o.getCurrentTabIndex();return o.getSpecificChecklistTask(s).getSpecificChecklistTask(n)},ensureCorrectButtonElement:s,getButtonType:t=>{const e=s(t);return Array.from(e.classList)},getSubcontainerType:t=>{const e=n(t);return Array.from(e.classList)}}})(),c=()=>{const t=s("New Tab");return o.addTask(t)},r=t=>{const e=t.target.parentElement.dataset.tabIndex;o.getSpecificChecklistTask(e).setTaskTitle(t.target.value)},i=t=>{const e=a.ensureCorrectTabElement(t).dataset.tabIndex;o.setCurrentTabIndex(e)},l=()=>{const t=o.getChecklistTasks();let e;for(const n in t)if(void 0!==t[n])return o.setCurrentTabIndex(n),e=n,e},d=()=>{const t=o.getCurrentTabIndex(),e=o.getSpecificChecklistTask(t),s=n("New Task","Task Due Date","Task Description","Task Notes");return e.addTask(s)},u=t=>{const e=a.getTargetTaskObject(t),n=t.target.value,s=a.getSubcontainerType(t);return s.includes("to-do-title-section")?e.setTaskTitle(n):s.includes("to-do-due-date-section")?e.setTaskDueDate(n):s.includes("to-do-description-section")?e.setTaskDescription(n):s.includes("to-do-notes-section")?e.setTaskNotes(n):void 0},k=t=>{a.getTargetTaskObject(t).toggleCompletedState()},b=t=>{const e=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),a=o.getSpecificChecklistTask(t).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=t,s.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',s.querySelector(".tab-name").textContent=a,n.insertBefore(s,e),s},T=(t,e)=>{const n=a.ensureCorrectTabElement(t).dataset.tabIndex,s=o.getSpecificChecklistTask(n).getTaskTitle();e.value=s},m=t=>{const e=a.ensureCorrectTabElement(t),n=document.createElement("input");return n.classList.add("tab-name-input"),n.setAttribute("type","text"),e.insertBefore(n,e.firstChild),n.focus(),n},g=t=>{const e=a.ensureCorrectTabElement(t),n=e.dataset.tabIndex,s=o.getSpecificChecklistTask(n).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const r=document.createElement("h2");r.textContent=s,c.appendChild(r),e.insertBefore(c,e.firstChild)},p=t=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${t}']`).setAttribute("id","current-tab")},C=t=>{a.ensureCorrectTabElement(t).setAttribute("id","current-tab")},E=t=>{void 0!==t&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${t}']`).setAttribute("id","current-tab")},f=t=>{const e=o.getCurrentTabIndex(),n=o.getSpecificChecklistTask(e).getSpecificChecklistTask(t),s=document.querySelector(".to-do-content"),a=document.createElement("div");a.classList.add("to-do-task"),a.dataset.taskIndex=t;const c=n.getTaskTitle(),r=n.getTaskDescription(),i=n.getTaskDueDate(),l=n.getTaskNotes();return a.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-outline.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <form action="" class="task-checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </form>\n        ',a.querySelector(".to-do-title").textContent=c,a.querySelector(".to-do-due-date").textContent=i,a.querySelector(".to-do-description").textContent=r,a.querySelector(".to-do-notes").textContent=l,s.appendChild(a),a},h=t=>{const e=a.ensureCorrectSubcontainer(t),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),e.insertBefore(n,e.firstChild),n.focus(),n},v=(t,e)=>{const n=a.getTargetTaskObject(t),s=a.getButtonType(t);let o;s.includes("edit-task-title")?o=n.getTaskTitle():s.includes("edit-task-due-date")?o=n.getTaskDueDate():s.includes("edit-task-description")?o=n.getTaskDescription():s.includes("edit-task-notes")&&(o=n.getTaskNotes()),e.value=o},S=t=>{const e=a.ensureCorrectSubcontainer(t),n=a.getTargetTaskObject(t),s=a.getSubcontainerType(t);let o;if(s.includes("to-do-title-section")){const t=n.getTaskTitle();o=document.createElement("h3"),o.classList.add("to-do-title"),o.textContent=t}else if(s.includes("to-do-due-date-section")){const t=n.getTaskDueDate();o=document.createElement("p"),o.classList.add("to-do-due-date"),o.textContent=t}else if(s.includes("to-do-description-section")){const t=n.getTaskDescription();o=document.createElement("p"),o.classList.add("to-do-description"),o.textContent=t}else if(s.includes("to-do-notes-section")){const t=n.getTaskNotes();o=document.createElement("p"),o.classList.add("to-do-notes"),o.textContent=t}e.insertBefore(o,e.firstChild)},y=t=>{const e=a.ensureCorrectTaskElement(t).querySelector(".to-do-complete-checkbox"),n=a.getTargetTaskObject(t).getCompletedState();e.checked=!!n},L=()=>{document.querySelector(".add-tab").addEventListener("click",V.addTab)},x=()=>{const t=Array.from(document.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",V.insertTabInputElement)},A=t=>{t.addEventListener("keydown",V.updateTab)},I=t=>{t.querySelector(".edit-tab").addEventListener("click",V.insertTabInputElement)},q=()=>{const t=Array.from(document.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",V.removeTab)},D=t=>{t.querySelector(".remove-tab").addEventListener("click",V.removeTab)},O=()=>{const t=Array.from(document.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",V.switchTab)},N=t=>{t.querySelector(".switch-tab").addEventListener("click",V.switchTab)},w=()=>{document.querySelector(".new-to-do-task").addEventListener("click",V.newTask)},j=()=>{const t=Array.from(document.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",V.removeTask)},P=t=>{t.querySelector(".to-do-remove-task").addEventListener("click",V.removeTask)},B=()=>{const t=Array.from(document.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",V.insertTaskInputElement)},R=t=>{t.addEventListener("keydown",V.updateTask)},H=t=>{const e=Array.from(t.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",V.insertTaskInputElement)},M=()=>{const t=document.querySelectorAll(".to-do-complete-checkbox");for(const e of t)e.addEventListener("click",V.toggleTaskComplete)},F=t=>{const e=a.ensureCorrectTabElement(t).dataset.tabIndex;o.removeTask(e)},U=t=>{const e=a.ensureCorrectTaskElement(t).dataset.taskIndex,n=o.getCurrentTabIndex();o.getSpecificChecklistTask(n).removeTask(e)},W=t=>{const e=a.ensureCorrectTabElement(t);let n=e.querySelector(".switch-tab");e.removeChild(n),n=null},$=t=>{const e=a.ensureCorrectTabElement(t);let n=e.querySelector("input");e.removeChild(n),n=null},z=t=>{let e=a.ensureCorrectTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},G=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},J=t=>{let e=a.ensureCorrectTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},K=t=>{const e=a.ensureCorrectSubcontainer(t);let n=e.firstElementChild;e.removeChild(n),n=null},Q=t=>{const e=a.ensureCorrectSubcontainer(t);let n=e.querySelector("input");e.removeChild(n),n=null},V={addTab:()=>{const t=c(),e=b(t);if(I(e),D(e),N(e),a.checkIfOnlyOneTab()){const t=l();E(t)}},insertTabInputElement:t=>{if(!a.checkForTabInputElement(t)){const e=m(t);W(t),T(t,e),A(e)}},updateTab:t=>{"Enter"===t.code&&(r(t),g(t),$(t))},removeTab:t=>{if(F(t),z(t),a.checkIfWasCurrentTab(t)){const t=l();E(t)}},switchTab:t=>{i(t),G(),C(t)},newTask:()=>{const t=d(),e=f(t);P(e),H(e)},removeTask:t=>{U(t),J(t)},insertTaskInputElement:t=>{if(!a.checkForTaskSubcontainerInputElement(t)){K(t);const e=h(t);v(t,e),R(e)}},updateTask:t=>{"Enter"===t.code&&(u(t),S(t),Q(t))},toggleTaskComplete:t=>{k(t),y(t)}};let X=s("Default test");o.addTask(X);let Y=n("Make Money TEST","Task Due Date","Task Description","Task Notes");console.log(X.addTask(Y)),L(),x(),q(),console.log(o),console.log(o.getChecklistTasks()),console.log(o.getCurrentTabIndex()),console.log(X.getChecklistTasks()),console.log(X.getSpecificChecklistTask(0)),console.log(X.getSpecificChecklistTask(0).getTaskTitle()),p(0),O(),w(),j(),B(),M()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const t=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},e=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",G.insertTabInputElement)},s=t=>{t.addEventListener("keydown",G.updateTab)},n=(t=document)=>{const e=Array.from(t.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",G.removeTab)},a=(t=document)=>{const e=Array.from(t.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",G.switchTab)},c=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.addTask)},o=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",G.insertTaskInputElement)},i=t=>{t.addEventListener("keydown",G.updateTask)},l=(t=document)=>{const e=t.querySelectorAll(".to-do-pin");for(const t of e)t.addEventListener("click",G.toggleTaskPin)},r=(t=document)=>{const e=t.querySelectorAll(".to-do-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleTaskComplete)},d=(t=document)=>{const e=Array.from(t.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",G.removeTask)},k=(t=document)=>{const e=t.querySelectorAll(".add-checklist-task");for(const t of e)t.addEventListener("click",G.addNewChecklistTask)},u=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-checklist-task"));for(const t of e)t.addEventListener("click",G.insertChecklistTaskInputElement)},T=t=>{t.addEventListener("keydown",G.updateChecklistTask)},g=(t=document)=>{const e=t.querySelectorAll(".checklist-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleChecklistTaskComplete)},b=(t=document)=>{const e=t.querySelectorAll(".remove-checklist-task");for(const t of e)t.addEventListener("click",G.removeChecklistTask)},m=(t=document)=>{const e=t.querySelectorAll(".to-do-task-change-display");for(const t of e)t.addEventListener("click",G.toggleDisplayTaskDetails)},p=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},h=(()=>{let t=0;const e=()=>t;let s={getCurrentTabIndex:e,setCurrentTabIndex:e=>{t=null===e?null:Number(e)},getCurrentTabObject:()=>{const t=e();return h.getSpecificChecklistTask(t)}};return Object.assign(s,p(s)),s})(),C=(t,e)=>{let s=e;return Object.assign(t,{getTaskTitle:()=>s,setTaskTitle(t){s=t}})},f=(()=>{const t=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e},e=t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task-subcontainer");)e=e.parentElement,s=Array.from(e.classList);return e},s=t=>{let e=t.target,s=Array.from(e.classList);for(;!s.includes("checklist-task");)e=e.parentElement,s=Array.from(e.classList);return e},n=t=>document.querySelector(`[data-task-index='${t}']`),a=t=>h.getSpecificChecklistTask(t),c=(t,e)=>a(t).getSpecificChecklistTask(e);return{checkIfWasCurrentTab:e=>"current-tab"===t(e).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},getTaskIndex:t=>{const e=(t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task");)e=e.parentElement,s=Array.from(e.classList);return e})(t);return e.dataset.taskIndex},getChecklistTaskIndex:t=>s(t).dataset.checklistTaskIndex,getTabIndex:e=>t(e).dataset.tabIndex,getNewValue:t=>t.target.value,getTaskSubcontainerType:t=>{const s=e(t),n=Array.from(s.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(t,e)=>{const s=n(t);let a;return"Title"===e?a=s.querySelector(".to-do-title-section"):"Due Date"===e?a=s.querySelector(".to-do-due-date-section"):"Description"===e?a=s.querySelector(".to-do-description-section"):"Notes"===e&&(a=s.querySelector(".to-do-notes-section")),a},getTaskElement:n,getChecklistTaskElement:(t,e)=>n(t).querySelector(`[data-checklist-task-index='${e}']`),getTabElement:t=>document.querySelector(`[data-tab-index='${t}']`),checkForExistingInputElement:(n,a)=>{let c;return"Tab"===a?c=t(n).querySelector(".tab-name-input"):"Task"===a?c=e(n).querySelector(".task-input"):"Checklist Task"===a&&(c=s(n).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==c},tryingToDoubleClick:t=>{const e=n(t);return!!Array.from(e.classList).includes("mid-animation")},getTabObject:a,getTaskObject:c,getChecklistTaskObject:(t,e,s)=>c(t,e).getSpecificChecklistTask(s),checkIfNoMoreTabs:()=>{const t=document.querySelector(".to-do-tab-section");return 0===Array.from(t.querySelectorAll(".tab-title")).length}}})(),S=(t,e)=>{let s=e;return Object.assign(t,{getTaskDescription:()=>s,setTaskDescription(t){s=t}})},y=(t,e)=>{let s=e;return Object.assign(t,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},E=(t="New Tab")=>{const e=(t=>{let e={};return Object.assign(e,C(e,t),p(e)),e})(t);return h.addTask(e)},I=(t,e)=>{h.getSpecificChecklistTask(t).setTaskTitle(e)},v=t=>{h.setCurrentTabIndex(t)},D=()=>{const t=h.getChecklistTasks();let e;for(const s in t)if(void 0!==t[s])return h.setCurrentTabIndex(s),e=s,e;return h.setCurrentTabIndex(null),null},L=(t,e="New Task Title",s="Task Due Date",n="Task Description",a="Task Notes",c=!1,o=!1)=>{const i=h.getSpecificChecklistTask(t),l=((t,e,s,n,a,c)=>{let o={};return Object.assign(o,C(o,t),S(o,s),((t,e)=>{let s=e;return Object.assign(t,{getTaskDueDate:()=>s,setTaskDueDate(t){s=t}})})(o,e),((t,e)=>{let s=e;return Object.assign(t,{getTaskNotes:()=>s,setTaskNotes(t){s=t}})})(o,n),((t,e)=>{let s=e;return Object.assign(t,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(o,a),y(o,c),p(o)),o})(e,s,n,a,c,o);return i.addTask(l)},x=(t,e,s)=>{const n=h.getCurrentTabObject().getSpecificChecklistTask(t);"Title"===e?n.setTaskTitle(s):"Due Date"===e?n.setTaskDueDate(s):"Description"===e?n.setTaskDescription(s):"Notes"===e&&n.setTaskNotes(s)},O=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).toggleCompletedState()},q=(t,e,s="Checklist Task Description",n=!1)=>{const a=h.getSpecificChecklistTask(t).getSpecificChecklistTask(e),c=((t,e)=>{let s={};return Object.assign(s,S(s,t),y(s,e)),s})(s,n);return a.addTask(c)},A=(t,e,s)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).setTaskDescription(s)},_=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).toggleCompletedState()},N=t=>{h.getCurrentTabObject().getSpecificChecklistTask(t).togglePinnedState()},j=(()=>{const t=t=>{const e=h.getCurrentTabObject().getSpecificChecklistTask(t),s=document.querySelector(".to-do-content"),n=document.createElement("div");n.classList.add("to-do-task"),n.dataset.taskIndex=t;const a=e.getTaskTitle(),c=e.getTaskDescription(),o=e.getTaskDueDate(),i=e.getTaskNotes(),l=`to-do-complete-checkbox-${t}`;return n.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',n.querySelector(".to-do-title").textContent=a,n.querySelector(".to-do-due-date").textContent="Due On: "+o,n.querySelector(".to-do-description").textContent="Description: "+c,n.querySelector(".to-do-notes").textContent="Notes: "+i,s.appendChild(n),n.querySelector("label").setAttribute("for",l),n.querySelector(".to-do-complete-checkbox").setAttribute("id",l),n},e=t=>{const e=f.getTaskElement(t),s=e.querySelector(".to-do-complete-checkbox");h.getCurrentTabObject().getSpecificChecklistTask(t).getCompletedState()?(s.checked=!0,e.classList.add("task-completed")):(s.checked=!1,e.classList.remove("task-completed"))},s=(t,e)=>{const s=f.getTaskElement(t).querySelector(".checklist"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("div");return a.classList.add("checklist-task"),a.dataset.checklistTaskIndex=e,a.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${t}-${e}" class="checklist-complete-checkbox">\n                <label for="checklist-${t}-${e}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,a.querySelector(".checklist-task-description").textContent=n,s.appendChild(a),a},n=(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e);s.checked=n.getCompletedState(),n.getCompletedState()?s.classList.add("checklist-task-completed"):s.classList.remove("checklist-task-completed")},a=t=>{const e=h.getCurrentTabObject(),s=t.dataset.taskIndex,n=e.getSpecificChecklistTask(s),a=t.querySelector(".to-do-pin").querySelector("img");n.getPinnedState()?a.setAttribute("src","./assets/pin-pinned.png"):a.setAttribute("src","./assets/pin-unpinned.png")},c=t=>{const e=h.getCurrentTabObject(),s=t.dataset.taskIndex,n=e.getSpecificChecklistTask(s),a=document.querySelector(".to-do-content");if(n.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)a.insertBefore(t,a.firstElementChild);else{const n=e[e.length-1];for(const c of e){if(s<c.dataset.taskIndex){a.insertBefore(t,c);break}c===n&&n.insertAdjacentElement("afterend",t)}}t.classList.add("pinned-task")}};return{addNewTabToDOM:t=>{const e=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),a=h.getSpecificChecklistTask(t).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=t,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=a,s.insertBefore(n,e),n},setTabInputElementValue:t=>{const e=f.getTabElement(t).querySelector("input"),s=h.getSpecificChecklistTask(t).getTaskTitle();e.value=s},insertTabInputElement:t=>{const e=f.getTabElement(t),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),e.insertBefore(s,e.firstChild),s.focus(),s},insertTabNameElement:t=>{const e=f.getTabElement(t),s=h.getSpecificChecklistTask(t).getTaskTitle(),n=document.createElement("button");n.classList.add("switch-tab");const a=document.createElement("h2");return a.classList.add("tab-name"),a.textContent=s,n.appendChild(a),e.insertBefore(n,e.firstChild),e},addCurrentTabIndicator:()=>{const t=h.getCurrentTabIndex();null!==t&&f.getTabElement(t).setAttribute("id","current-tab")},addNewTaskToDOM:t,insertTaskInputElement:(t,e)=>{const s=f.getTaskSubcontainerElement(t,e),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),s.insertBefore(n,s.firstChild),n.focus(),n},setTaskInputElementValue:(t,e)=>{const s=f.getTaskSubcontainerElement(t,e).querySelector("input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;"Title"===e?a=n.getTaskTitle():"Due Date"===e?a=n.getTaskDueDate():"Description"===e?a=n.getTaskDescription():"Notes"===e&&(a=n.getTaskNotes()),s.value=a},insertTaskSubcontentElement:(t,e)=>{const s=f.getTaskSubcontainerElement(t,e),n=h.getCurrentTabObject().getSpecificChecklistTask(t);let a;if("Title"===e){const t=n.getTaskTitle();a=document.createElement("h3"),a.classList.add("to-do-title"),a.textContent=t}else if("Due Date"===e){const t=n.getTaskDueDate();a=document.createElement("p"),a.classList.add("to-do-due-date"),a.textContent="Due On: "+t}else if("Description"===e){const t=n.getTaskDescription();a=document.createElement("p"),a.classList.add("to-do-description"),a.textContent="Description: "+t}else if("Notes"===e){const t=n.getTaskNotes();a=document.createElement("p"),a.classList.add("to-do-notes"),a.textContent="Notes: "+t}s.insertBefore(a,s.firstChild)},toggleTaskDOMComplete:e,addNewChecklistTaskToDOM:s,insertChecklistTaskInputElement:(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=document.createElement("input");return n.classList.add("checklist-input"),n.setAttribute("type","text"),s.appendChild(n),n.focus(),n},setChecklistTaskInputElementValue:(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-input"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription();s.value=n},insertChecklistTaskDescriptionElement:(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),n=h.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${t}-${e}`),a.classList.add("checklist-task-description"),a.textContent=n,s.appendChild(a)},toggleChecklistTaskDOMComplete:n,changePinButtonImage:t=>{const e=f.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.querySelector(".to-do-pin").querySelector("img");s.getPinnedState()?n.setAttribute("src","./assets/pin-pinned.png"):n.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:t=>{const e=f.getTaskElement(t),s=h.getCurrentTabObject().getSpecificChecklistTask(t),n=e.dataset.taskIndex,a=document.querySelector(".to-do-content");if(s.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)a.insertBefore(e,a.firstElementChild);else{const s=t[t.length-1];for(const c of t){if(n<c.dataset.taskIndex){a.insertBefore(e,c);break}c===s&&s.insertAdjacentElement("afterend",e)}}e.classList.add("pinned-task")}else{const t=Array.from(a.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===t.length)a.appendChild(e);else{const s=t[t.length-1];for(const c of t){if(n<c.dataset.taskIndex){a.insertBefore(e,c);break}c===s&&a.appendChild(e,s)}}e.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const o=h.getCurrentTabObject().getChecklistTasks();for(const i in o){const l=o[i];if(void 0!==l){const o=t(i);a(o),c(o),e(i),G.addTaskListeners(o);const r=l.getChecklistTasks();for(const t in r)if(void 0!==r[t]){const e=s(i,t);n(i,t),G.addChecklistTaskListeners(e)}}}},toggleDisplayTaskDetails:t=>{const e=f.getTaskElement(t);Array.from(e.querySelectorAll(".animation-target")).forEach((t=>{Array.from(t.classList).includes("hide-to-do-details")?(t.classList.remove("hide-to-do-details"),t.classList.add("display-to-do-details"),t.style.display="flex"):(t.classList.add("hide-to-do-details"),t.classList.remove("display-to-do-details"),setTimeout((()=>{t.style.display="none"}),1e3))})),(t=>{t.classList.add("mid-animation"),setTimeout((()=>{t.classList.remove("mid-animation")}),1e3)})(e)},rotateChevronButton:t=>{const e=f.getTaskElement(t).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(e.classList);0===s.length||s.includes("rotate-hide-task-details")?(e.classList.remove("rotate-hide-task-details"),e.classList.add("rotate-display-task-details"),e.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(e.classList.remove("rotate-display-task-details"),e.classList.add("rotate-hide-task-details"),e.classList.remove("rotated-chevron"))},toggleAnimations:(t,e)=>{const s=f.getTaskElement(t),n=s.querySelector(".to-do-task-change-display").querySelector("img"),a=Array.from(s.querySelectorAll(".animation-target"));a.push(n),a.forEach((t=>{"Enable"===e?t.classList.add("no-animations"):"Disable"===e&&t.classList.remove("no-animations")}))}}})(),$=t=>{const e=f.getTabElement(t);let s=e.querySelector(".switch-tab");e.removeChild(s),s=null},w=t=>{const e=f.getTabElement(t);let s=e.querySelector("input");e.removeChild(s),s=null},P=t=>{let e=f.getTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},M=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},V=t=>{let e=f.getTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},B=(t,e)=>{const s=f.getTaskSubcontainerElement(t,e);let n=s.firstElementChild;s.removeChild(n),n=null},H=(t,e)=>{const s=f.getTaskSubcontainerElement(t,e);let n=s.querySelector("input");s.removeChild(n),n=null},R=(t,e)=>{const s=f.getChecklistTaskElement(t,e),n=s.querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-task-description");n.removeChild(a),a=null},F=(t,e)=>{const s=f.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section");let n=s.querySelector(".checklist-input");s.removeChild(n),n=null},J=(t,e)=>{const s=f.getTaskElement(t).querySelector(".checklist");let n=f.getChecklistTaskElement(t,e);s.removeChild(n),n=null},z=()=>{document.querySelector(".to-do-content").replaceChildren()},W=t=>{h.removeTask(t)},Q=t=>{h.getCurrentTabObject().removeTask(t)},U=(t,e)=>{h.getCurrentTabObject().getSpecificChecklistTask(t).removeTask(e)},X=(()=>{let t=!1;const e=()=>{const t=localStorage.getItem("to_do_list");return JSON.parse(t)},s=t=>{const e=JSON.stringify(t);localStorage.setItem("to_do_list",e)};return{addTab:t=>{const n=f.getTabObject(t),a=e(),c=`{\n            "title": "${n.getTaskTitle()}",\n            "tasks": {}\n        }`,o=JSON.parse(c);a.tabs[`tab_${t}`]=o,s(a)},setCurrentTab:t=>{const n=e();n.current_tab=null===t?null:Number(t),s(n)},setTabName:t=>{const n=f.getTabObject(t),a=e();a.tabs[`tab_${t}`].title=n.getTaskTitle(),s(a)},getCurrentTabIndex:()=>e().current_tab,getTabTitle:t=>e().tabs[t].title,getTabObjects:()=>X.getLocalStorageValue().tabs,removeTab:t=>{const n=e();n.tabs[`tab_${t}`]=null,s(n)},addTask:(t,n)=>{const a=f.getTaskObject(t,n),c=e(),o=`{\n            "title": "${a.getTaskTitle()}",\n            "due_date": "${a.getTaskDueDate()}",\n            "description": "${a.getTaskDescription()}",\n            "notes": "${a.getTaskNotes()}",\n            "pinned": ${a.getPinnedState()},\n            "completed": ${a.getCompletedState()},\n            "checklist_tasks": {}\n        }`,i=JSON.parse(o);c.tabs[`tab_${t}`].tasks[`task_${n}`]=i,s(c)},setTaskSubcontainerValue:(t,n,a)=>{const c=f.getTaskObject(t,n),o=e();"Title"===a?o.tabs[`tab_${t}`].tasks[`task_${n}`].title=c.getTaskTitle():"Due Date"===a?o.tabs[`tab_${t}`].tasks[`task_${n}`].due_date=c.getTaskDueDate():"Description"===a?o.tabs[`tab_${t}`].tasks[`task_${n}`].description=c.getTaskDescription():"Notes"===a&&(o.tabs[`tab_${t}`].tasks[`task_${n}`].notes=c.getTaskNotes()),s(o)},toggleTaskPinned:(t,n)=>{const a=f.getTaskObject(t,n),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].pinned=a.getPinnedState(),s(c)},toggleTaskCompleted:(t,n)=>{const a=f.getTaskObject(t,n),c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].completed=a.getCompletedState(),s(c)},getTaskValues:(t,s)=>{const n=e();let a=[];const c=n.tabs[t].tasks[s].title;a.push(c);const o=n.tabs[t].tasks[s].due_date;a.push(o);const i=n.tabs[t].tasks[s].description;a.push(i);const l=n.tabs[t].tasks[s].notes;a.push(l);const r=n.tabs[t].tasks[s].pinned;a.push(r);const d=n.tabs[t].tasks[s].completed;return a.push(d),a},getTaskObjects:t=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks,removeTask:(t,n)=>{const a=e();a.tabs[`tab_${t}`].tasks[`task_${n}`]=null,s(a)},addChecklistTask:(t,n,a)=>{const c=f.getChecklistTaskObject(t,n,a),o=e(),i=`{\n            "description": "${c.getTaskDescription()}",\n            "completed": ${c.getCompletedState()}\n        }`,l=JSON.parse(i);o.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=l,s(o)},setChecklistTaskDescription:(t,n,a)=>{const c=f.getChecklistTaskObject(t,n,a),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].description=c.getTaskDescription(),s(o)},toggleChecklistTaskCompleted:(t,n,a)=>{const c=f.getChecklistTaskObject(t,n,a),o=e();o.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`].completed=c.getCompletedState(),s(o)},getChecklistTaskValues:(t,s,n)=>{const a=e();let c=[];const o=a.tabs[t].tasks[s].checklist_tasks[n].description;c.push(o);const i=a.tabs[t].tasks[s].checklist_tasks[n].completed;return c.push(i),c},getChecklistTaskObjects:(t,e)=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks,removeChecklistTask:(t,n,a)=>{const c=e();c.tabs[`tab_${t}`].tasks[`task_${n}`].checklist_tasks[`checklist_task_${a}`]=null,s(c)},checkForExistingStorage:()=>!!localStorage.getItem("to_do_list"),getLocalStorageValue:e,initializeTodoList:()=>{const t=`{\n            "current_tab": ${h.getCurrentTabIndex()},\n            "tabs": {}\n        }`,e=JSON.parse(t);s(e)},toggleLoading:()=>{t=!t},isLoading:()=>t}})(),G=(()=>{const p=(t,e="New Tab")=>{const s=E(e),n=j.addNewTabToDOM(s);if(C(n),!X.isLoading()&&(X.addTab(s),f.checkIfOnlyOneTab())){const t=D();j.addCurrentTabIndicator(),X.setCurrentTab(t)}return s},C=t=>{e(t),n(t),a(t)},S=(t,e=h.getCurrentTabIndex(),s="New Task Title",n="Task Due Date",a="Task Description",c="Task Notes",o=!1,i=!1)=>{if(null===h.getCurrentTabIndex())return void K();const l=L(e,s,n,a,c,o,i),r=j.addNewTaskToDOM(l);return y(r),X.isLoading()||X.addTask(h.getCurrentTabIndex(),l),l},y=t=>{d(t),o(t),r(t),k(t),l(t),m(t)},G=t=>{u(t),g(t),b(t)},K=()=>{const t=p(event,"Instructions"),e=S(event,t,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!1,!1);j.toggleTaskDOMComplete(e),j.changePinButtonImage(e),j.shiftTaskElementPosition(e),Y(t,e,"If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!1),Y(t,e,"Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!1),Y(t,e,"Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!1)},Y=(t,e,s,n)=>{const a=q(t,e,s,n),c=j.addNewChecklistTaskToDOM(e,a);j.toggleChecklistTaskDOMComplete(e,a),G(c),X.isLoading()||X.addChecklistTask(t,e,a)},Z=()=>{X.toggleLoading(),tt(),et(),X.toggleLoading()},tt=()=>{const t=X.getCurrentTabIndex();h.setCurrentTabIndex(t)},et=()=>{const t=X.getTabObjects();for(const e in t)if(null===t[e])h.addTask(void 0);else{const t=X.getTabTitle(e),s=p(event,t);st(s,e)}j.addCurrentTabIndicator()},st=(t,e)=>{const s=f.getTabObject(t),n=X.getTaskObjects(t);for(const a in n)if(null===n[a])s.addTask(void 0);else{const s=X.getTaskValues(e,a),n=s[0],c=s[1],o=s[2],i=s[3],l=s[4],r=s[5];let d;t===h.getCurrentTabIndex()?(d=S(event,t,n,c,o,i,l,r),j.toggleTaskDOMComplete(d),j.changePinButtonImage(d),j.shiftTaskElementPosition(d)):d=L(t,n,c,o,i,l,r),nt(t,e,d,a)}},nt=(t,e,s,n)=>{const a=f.getTaskObject(t,s),c=X.getChecklistTaskObjects(t,s);for(const o in c)if(null===c[o])a.addTask(void 0);else{const a=X.getChecklistTaskValues(e,n,o),c=a[0],i=a[1];let l;l=t===h.getCurrentTabIndex()?Y(t,s,c,i):q(t,s,c,i)}},at=()=>{t(),c()};return{addTab:p,insertTabInputElement:t=>{if(!f.checkForExistingInputElement(t,"Tab")){const e=f.getTabIndex(t),n=j.insertTabInputElement(e);$(e),j.setTabInputElementValue(e),s(n)}},updateTab:t=>{if("Enter"===t.code){const e=f.getTabIndex(t),s=f.getNewValue(t);I(e,s);const n=j.insertTabNameElement(e);w(e),a(n),X.setTabName(e)}},switchTab:t=>{if(!f.checkIfWasCurrentTab(t)){const e=f.getTabIndex(t);v(e),M(),j.addCurrentTabIndicator(),z(),j.loadTasksFromNewCurrentTab(),X.setCurrentTab(e)}},removeTab:t=>{const e=f.getTabIndex(t);if(W(e),P(e),X.removeTab(e),f.checkIfWasCurrentTab(t)){const t=D();j.addCurrentTabIndicator(),z(),X.setCurrentTab(t),f.checkIfNoMoreTabs()||j.loadTasksFromNewCurrentTab()}},addTabListeners:C,addTask:S,insertTaskInputElement:t=>{if(!f.checkForExistingInputElement(t,"Task")){const e=f.getTaskIndex(t),s=f.getTaskSubcontainerType(t);B(e,s);const n=j.insertTaskInputElement(e,s);j.setTaskInputElementValue(e,s),i(n)}},updateTask:t=>{if("Enter"===t.code){const e=f.getTaskIndex(t),s=f.getTaskSubcontainerType(t),n=f.getNewValue(t);x(e,s,n),j.insertTaskSubcontentElement(e,s),H(e,s),X.setTaskSubcontainerValue(h.getCurrentTabIndex(),e,s)}},toggleTaskPin:t=>{const e=f.getTaskIndex(t);j.toggleAnimations(e,"Enable"),N(e),j.changePinButtonImage(e),j.shiftTaskElementPosition(e),X.toggleTaskPinned(h.getCurrentTabIndex(),e)},toggleTaskComplete:t=>{const e=f.getTaskIndex(t);O(e),j.toggleTaskDOMComplete(e),X.toggleTaskCompleted(h.getCurrentTabIndex(),e)},removeTask:t=>{const e=f.getTaskIndex(t);Q(e),V(e),X.removeTask(h.getCurrentTabIndex(),e)},addTaskListeners:y,addNewChecklistTask:t=>{const e=h.getCurrentTabIndex(),s=f.getTaskIndex(t),n=q(e,s),a=j.addNewChecklistTaskToDOM(s,n);G(a),X.isLoading()||X.addChecklistTask(h.getCurrentTabIndex(),s,n)},insertChecklistTaskInputElement:t=>{if(!f.checkForExistingInputElement(t,"Checklist Task")){const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t);R(e,s);const n=j.insertChecklistTaskInputElement(e,s);j.setChecklistTaskInputElementValue(e,s),T(n)}},updateChecklistTask:t=>{if("Enter"===t.code){const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t),n=f.getNewValue(t);A(e,s,n),j.insertChecklistTaskDescriptionElement(e,s),F(e,s),X.setChecklistTaskDescription(h.getCurrentTabIndex(),e,s)}},toggleChecklistTaskComplete:t=>{const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t);_(e,s),j.toggleChecklistTaskDOMComplete(e,s),X.toggleChecklistTaskCompleted(h.getCurrentTabIndex(),e,s)},removeChecklistTask:t=>{const e=f.getTaskIndex(t),s=f.getChecklistTaskIndex(t);U(e,s),J(e,s),X.removeChecklistTask(h.getCurrentTabIndex(),e,s)},addChecklistTaskListeners:G,toggleDisplayTaskDetails:t=>{const e=f.getTaskIndex(t);f.tryingToDoubleClick(e)||(j.toggleAnimations(e,"Disable"),j.toggleDisplayTaskDetails(e),j.rotateChevronButton(e))},loadInInstructionsPage:K,loadInLocalStorage:Z,loadInTabObjects:et,loadInInitialListeners:at,loadInPage:()=>{at(),X.checkForExistingStorage()?Z():(X.initializeTodoList(),K())}}})();G.loadInPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eks4QjZCLElBQzlCLE1BQU1ZLEVBQVlkLEVBQWdCcUIsYUFBYW5CLEdBQzFDRixFQUFnQnVDLG9CQUFvQnpCLEtBQ3JDd0UsRUFBcUJxRixpQkFBaUI3SixFQUFXLFdBQ2pEd0UsRUFBcUJqSCx5QkFBeUJ5QyxHQUM5Q3dFLEVBQXFCa0Ysb0JBQW9CMUosR0FDNUMsRUFvS0R1Tix5QkFDQUcscUJBQ0FFLG9CQUNBTywwQkFDQUUsV0FsQ2UsS0FDZkYsS0FDSTlELEVBQWdCMkMsMEJBQ2hCVSxLQUVBckQsRUFBZ0I0QyxxQkFDaEJNLElBQ0gsRUE2QlIsRUFwWG9CLEdDUHJCcFMsRUFBYWtULFkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2V2ZW50X2Fzc2lnbmVyX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fbGlzdF9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy90aXRsZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9oZWxwZXJfZnVuY3Rpb25zLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFiX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFza19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9ub3Rlc19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9waW5uZWRfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvY2hlY2tsaXN0X3Rhc2tfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ET01fY29udHJvbGxlcl9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9vYmplY3RfY29udHJvbGxlcl9yZW1vdmVfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvdG9kb19saXN0X3N0b3JhZ2Vfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvZXZlbnRfYnVuZGxlcl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfYnVuZGxlcl9vYmplY3RcIjtcblxuY29uc3QgZXZlbnRBc3NpZ25lciA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZFRhYkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhYlwiKTtcbiAgICAgICAgYWRkVGFiQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuYWRkVGFiKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYkVkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYWJJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFkZFRhYklucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFiKVxuICAgIH1cbiAgICBjb25zdCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlbW92ZS10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJSZW1vdmVCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYWIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkU3dpdGNoVGFiTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiU3dpdGNoQnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5zd2l0Y2gtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiU3dpdGNoQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuc3dpdGNoVGFiKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgYWRkTmV3VGFza0xpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdG8tZG8tdGFza1wiKTtcbiAgICAgICAgbmV3VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmFkZFRhc2spO1xuICAgIH1cbiAgICBjb25zdCBhZGRFZGl0VGFza0xpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhc2tcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrRWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVUYXNrUGluTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1BpbkJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXBpblwiKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza1BpbkJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZVRhc2tQaW4pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVG9nZ2xlVGFza0NvbXBsZXRlTGlzdGVuZXIgPSAoc2NvcGU9ZG9jdW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlQ2hlY2tib3hlcyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tY29tcGxldGUtY2hlY2tib3hcIik7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tib3ggb2YgdGFza0NvbXBsZXRlQ2hlY2tib3hlcykge1xuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci50b2dnbGVUYXNrQ29tcGxldGUpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXJlbW92ZS10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza1JlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhc2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyID0gKHNjb3BlPWRvY3VtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tCdXR0b25zID0gc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5hZGQtY2hlY2tsaXN0LXRhc2tcIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIG5ld0NoZWNrbGlzdFRhc2tCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5hZGROZXdDaGVja2xpc3RUYXNrKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LWNoZWNrbGlzdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgY2hlY2tsaXN0RWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlQ2hlY2tsaXN0VGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVja2JveCBvZiBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVtb3ZlLWNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlQ2hlY2tsaXN0VGFzayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVEaXNwbGF5VGFza0RldGFpbHNMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrVG9nZ2xlRGlzcGxheUJ1dHRvbnMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIik7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhc2tUb2dnbGVEaXNwbGF5QnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkTmV3VGFiTGlzdGVuZXIsXG4gICAgICAgIGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lcixcbiAgICAgICAgYWRkVGFiSW5wdXRMaXN0ZW5lcixcbiAgICAgICAgYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXIsXG4gICAgICAgIGFkZFN3aXRjaFRhYkxpc3RlbmVyLFxuICAgICAgICBhZGROZXdUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZEVkaXRUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZFRhc2tJbnB1dExpc3RlbmVyLFxuICAgICAgICBhZGRUb2dnbGVUYXNrUGluTGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyLFxuICAgICAgICBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXIsXG4gICAgICAgIGFkZE5ld0NoZWNrbGlzdFRhc2tMaXN0ZW5lcixcbiAgICAgICAgYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcixcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyLFxuICAgICAgICBhZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIsXG4gICAgICAgIGFkZFRvZ2dsZURpc3BsYXlUYXNrRGV0YWlsc0xpc3RlbmVyXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJjb25zdCBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgY2hlY2tsaXN0ID0gW107XG4gICAgY29uc3QgZ2V0VGFza0luZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0Lmxlbmd0aCAtIDE7XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgICAgICBjaGVja2xpc3QucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBjaGVja2xpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHJldHVybiBnZXRUYXNrSW5kZXgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlVGFzayhpbmRleCkge1xuICAgICAgICAgICAgY2hlY2tsaXN0W2luZGV4XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tsaXN0O1xuICAgICAgICB9LFxuICAgICAgICBnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja2xpc3RbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9OyIsIi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvTGlzdCA9ICgoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRUYWIgPSAwO1xuICAgIGNvbnN0IGdldEN1cnJlbnRUYWJJbmRleCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWI7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDdXJyZW50VGFiSW5kZXggPSAobmV3Q3VycmVudFRhYikgPT4ge1xuICAgICAgICBpZiAobmV3Q3VycmVudFRhYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY3VycmVudFRhYiA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50VGFiID0gTnVtYmVyKG5ld0N1cnJlbnRUYWIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYk9iamVjdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWJPYmplY3Q7XG4gICAgfVxuICAgIGxldCBvYmplY3QgPSB7XG4gICAgICAgIGdldEN1cnJlbnRUYWJJbmRleCxcbiAgICAgICAgc2V0Q3VycmVudFRhYkluZGV4LFxuICAgICAgICBnZXRDdXJyZW50VGFiT2JqZWN0XG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59KSgpO1xuXG5leHBvcnQgeyB0b0RvTGlzdCB9OyIsImNvbnN0IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsVGl0bGUpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBpbml0aWFsVGl0bGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tUaXRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza1RpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcblxuY29uc3QgaGVscGVyRnVuY3Rpb25zID0gKCgpID0+IHtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB3aGlsZSAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gXCJ0YWItdGl0bGVcIikge1xuICAgICAgICAgICAgdGFiRWxlbWVudCA9IHRhYkVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50ID0gKGV2ZW50LCBlbGVtZW50VHlwZSkgPT4ge1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiVGFza1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2staW5wdXRcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IFwiQ2hlY2tsaXN0IFRhc2tcIikge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjaGVja0lmV2FzQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBpZiAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gXCJjdXJyZW50LXRhYlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZPbmx5T25lVGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJzID0gQXJyYXkuZnJvbSh0b0RvVGFiU2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi10aXRsZVwiKSk7XG4gICAgICAgIGlmICh0b0RvVGFicy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2tcIikpIHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50ID0gdGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QpXG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwidG8tZG8tdGFzay1zdWJjb250YWluZXJcIikpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza1N1YmNvbnRhaW5lckVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKGNoZWNrbGlzdFRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwiY2hlY2tsaXN0LXRhc2tcIikpIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNsYXNzTGlzdCA9IEFycmF5LmZyb20oY2hlY2tsaXN0VGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNoZWNrbGlzdFRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBnZXRUYXNrSW5kZXggPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgcmV0dXJuIHRhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldENoZWNrbGlzdFRhc2tJbmRleCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiSW5kZXggPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHJldHVybiB0YWJJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGdldE5ld1ZhbHVlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrU3ViY29udGFpbmVyVHlwZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYXNrU3ViY29udGFpbmVyRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50Q2xhc3NlcyA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250YWluZXJUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tdGl0bGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIlRpdGxlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkR1ZSBEYXRlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIkRlc2NyaXB0aW9uXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lckVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwidG8tZG8tbm90ZXMtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBcIk5vdGVzXCI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyVHlwZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRpdGxlLXNlY3Rpb25cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzLXNlY3Rpb25cIik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YXNrU3ViY29udGFpbmVyRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tFbGVtZW50ID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhc2staW5kZXg9JyR7dGFza0luZGV4fSddYCk7XG4gICAgICAgIHJldHVybiB0YXNrRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBnZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNoZWNrbGlzdC10YXNrLWluZGV4PScke2NoZWNrbGlzdFRhc2tJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGdldFRhYkVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHt0YWJJbmRleH0nXWApO1xuICAgICAgICByZXR1cm4gdGFiRWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHRyeWluZ1RvRG91YmxlQ2xpY2sgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdGFza0NsYXNzZXMgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIGlmICh0YXNrQ2xhc3Nlcy5pbmNsdWRlcyhcIm1pZC1hbmltYXRpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFiT2JqZWN0ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIHJldHVybiB0YWJPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXNrT2JqZWN0ID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gZ2V0VGFiT2JqZWN0KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IHRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDaGVja2xpc3RUYXNrT2JqZWN0ID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrT2JqZWN0O1xuICAgIH1cbiAgICBjb25zdCBjaGVja0lmTm9Nb3JlVGFicyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFicyA9IEFycmF5LmZyb20odG9Eb1RhYlNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbChcIi50YWItdGl0bGVcIikpO1xuICAgICAgICBpZiAodG9Eb1RhYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGNoZWNrSWZXYXNDdXJyZW50VGFiLCBjaGVja0lmT25seU9uZVRhYiwgZ2V0VGFza0luZGV4LFxuICAgICAgICBnZXRDaGVja2xpc3RUYXNrSW5kZXgsIGdldFRhYkluZGV4LCBnZXROZXdWYWx1ZSwgZ2V0VGFza1N1YmNvbnRhaW5lclR5cGUsXG4gICAgICAgIGdldFRhc2tTdWJjb250YWluZXJFbGVtZW50LCBnZXRUYXNrRWxlbWVudCwgZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQsXG4gICAgICAgIGdldFRhYkVsZW1lbnQsIGNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQsIHRyeWluZ1RvRG91YmxlQ2xpY2ssIGdldFRhYk9iamVjdCwgZ2V0VGFza09iamVjdCwgZ2V0Q2hlY2tsaXN0VGFza09iamVjdCwgY2hlY2tJZk5vTW9yZVRhYnMgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9OyIsImNvbnN0IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRGVzY3JpcHRpb24pID0+IHtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBpbml0aWFsRGVzY3JpcHRpb247XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza0Rlc2NyaXB0aW9uKG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0iLCIvLyBvcmlnaW5hbCB3aGVyZSBhbGwgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBnZXQgcmV0dXJuZWQsIHNvIG5vIHByaXZhdGUgZmllbGRzIChjb21wbGV0ZWQgc2hvdWxkIGJlIHByaXZhdGUpXG4vLyBrZWVwaW5nIGZvciBwb3N0ZXJpdHksIHByb2JhYmx5IHdpbGwgZGVsZXRlZCBhdCB0aGUgZW5kXG4vLyBjb25zdCBjYW5Db21wbGV0ZSA9IChvYmplY3QpID0+ICh7XG4vLyAgICAgY29tcGxldGVkOiBmYWxzZSxcbi8vICAgICB0b2dnbGU6ICgpID0+IHtcbi8vICAgICAgICAgaWYgKG9iamVjdC5jb21wbGV0ZWQpIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSBmYWxzZTtcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSB0cnVlO1xuLy8gICAgICAgICB9O1xuLy8gICAgIH0sXG4vLyAgICAgZ2V0Q29tcGxldGVkU3RhdGU6ICgpID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG9iamVjdC5jb21wbGV0ZWRcbi8vICAgICB9XG4vLyB9KTtcblxuY29uc3QgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsQ29tcGxldGVkU3RhdGUpID0+IHtcbiAgICBsZXQgY29tcGxldGVkID0gaW5pdGlhbENvbXBsZXRlZFN0YXRlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICB0b2dnbGVDb21wbGV0ZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldENvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyB0b0RvVGFzayB9IGZyb20gXCIuL3RvZG9fdGFza19vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdFRhc2tPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3RfdGFza19vYmplY3RcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYlRvVG9kb0FycmF5ID0gKHRhYk5hbWU9XCJOZXcgVGFiXCIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiID0gdG9Eb1RhYih0YWJOYW1lKTtcbiAgICAgICAgcmV0dXJuIHRvRG9MaXN0LmFkZFRhc2sobmV3VGFiKTtcbiAgICB9XG4gICAgY29uc3QgZWRpdFRhYk5hbWUgPSAodGFiSW5kZXgsIG5ld1RhYk5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgdGFiT2JqZWN0LnNldFRhc2tUaXRsZShuZXdUYWJOYW1lKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlQ3VycmVudFRhYiA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiSW5kZXgpXG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJBcnJheSA9IHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCk7XG4gICAgICAgIGxldCBmaXJzdFRhYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCB0YWIgaW4gdGFiQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0YWJBcnJheVt0YWJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgodGFiKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRhYiA9IHRhYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RUYWI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KG51bGwpXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdUYXNrVG9UYWIgPSAodGFiSW5kZXgsIHRpdGxlPVwiTmV3IFRhc2sgVGl0bGVcIiwgZHVlRGF0ZT1cIlRhc2sgRHVlIERhdGVcIiwgZGVzY3JpcHRpb249XCJUYXNrIERlc2NyaXB0aW9uXCIsIG5vdGVzPVwiVGFzayBOb3Rlc1wiLCBwaW5uZWQ9ZmFsc2UsIGNvbXBsZXRlZD1mYWxzZSkgPT4ge1xuICAgICAgICAvLyBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFiSW5kZXgpXG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB0b0RvVGFzayh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzLCBwaW5uZWQsIGNvbXBsZXRlZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld1Rhc2spXG4gICAgICAgIGNvbnN0IG5ld1Rhc2tJbmRleCA9IHRhYk9iamVjdC5hZGRUYXNrKG5ld1Rhc2spO1xuICAgICAgICByZXR1cm4gbmV3VGFza0luZGV4O1xuICAgIH07XG4gICAgY29uc3QgZWRpdFRhc2tPYmplY3RJbmZvID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSwgbmV3VGFza1N1YmNvbnRlbnRWYWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrVGl0bGUobmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0LnNldFRhc2tEdWVEYXRlKG5ld1Rhc2tTdWJjb250ZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgdGFza09iamVjdC5zZXRUYXNrRGVzY3JpcHRpb24obmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJOb3Rlc1wiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0LnNldFRhc2tOb3RlcyhuZXdUYXNrU3ViY29udGVudFZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tDb21wbGV0ZSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIHRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCwgZGVzY3JpcHRpb249XCJDaGVja2xpc3QgVGFzayBEZXNjcmlwdGlvblwiLCBjb21wbGV0ZWQ9ZmFsc2UpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFza0luZGV4KVxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSlcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IHRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFzayA9IGNoZWNrbGlzdFRhc2tPYmplY3QoZGVzY3JpcHRpb24sIGNvbXBsZXRlZCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tJbmRleCA9IHRhc2tPYmplY3QuYWRkVGFzayhuZXdDaGVja2xpc3RUYXNrKTtcbiAgICAgICAgcmV0dXJuIG5ld0NoZWNrbGlzdFRhc2tJbmRleDtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgsIG5ld0Rlc2NyaXB0aW9uVmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjaGVja2xpc3RUYXNrT2JqZWN0LnNldFRhc2tEZXNjcmlwdGlvbihuZXdEZXNjcmlwdGlvblZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW4gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICB0YXNrT2JqZWN0LnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJUb1RvZG9BcnJheSwgZWRpdFRhYk5hbWUsIHVwZGF0ZUN1cnJlbnRUYWIsIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLFxuICAgICAgICBhZGROZXdUYXNrVG9UYWIsIGVkaXRUYXNrT2JqZWN0SW5mbywgdG9nZ2xlVGFza0NvbXBsZXRlLCBhZGROZXdDaGVja2xpc3RUYXNrVG9UYXNrLFxuICAgICAgICBlZGl0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uLCB0b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGUsIHRvZ2dsZVRhc2tQaW4sIH07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbi8vIGltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFiID0gKHRpdGxlKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1RhYiB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFzayA9ICh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzLCBwaW5uZWQsIGNvbXBsZXRlZCkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgdGl0bGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIHRpdGxlKSwgXG4gICAgICAgIGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBkZXNjcmlwdGlvbiksXG4gICAgICAgIGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGR1ZURhdGUpLFxuICAgICAgICBub3Rlc0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgbm90ZXMpLFxuICAgICAgICAvLyBjb250YWluc0NoZWNrbGlzdEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCksXG4gICAgICAgIHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgcGlubmVkKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBjb21wbGV0ZWQpLFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufTtcblxuZXhwb3J0IHsgdG9Eb1Rhc2sgfTsiLCJjb25zdCBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRHVlRGF0ZSkgPT4ge1xuICAgIGxldCBkdWVEYXRlID0gaW5pdGlhbER1ZURhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEdWVEYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGR1ZURhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tEdWVEYXRlKG5ld0R1ZURhdGUpIHtcbiAgICAgICAgICAgIGR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsTm90ZXMpID0+IHtcbiAgICBsZXQgbm90ZXMgPSBpbml0aWFsTm90ZXM7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tOb3RlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBub3RlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza05vdGVzKG5ld05vdGVzKSB7XG4gICAgICAgICAgICBub3RlcyA9IG5ld05vdGVzO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBub3Rlc0JlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxQaW5uZWRTdGF0ZSkgPT4ge1xuICAgIGxldCBwaW5uZWQgPSBpbml0aWFsUGlubmVkU3RhdGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIHRvZ2dsZVBpbm5lZFN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKHBpbm5lZCkge1xuICAgICAgICAgICAgICAgIHBpbm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwaW5uZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UGlubmVkU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlubmVkO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBwaW5uZWRCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuXG4vLyBvcmlnaW5hbCB3aGVyZSBvYmplY3Qgd291bGQgbmVlZCB0byBoYXZlIE9iamVjdC5hc3NpZ24oKSBmb3IgZXZlcnkgaW5zdGFuY2Vcbi8vIGtlZXBpbmcgZm9yIHBvc3Rlcml0eSwgcHJvYmFibHkgd2lsbCBkZWxldGVkIGF0IHRoZSBlbmRcbi8vIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24pID0+IHtcbiAgICAvLyBjb25zdCBnZXRUYXNrRGVzY3JpcHRpb24gPSAoKSA9PiB7XG4gICAgLy8gICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAvLyB9O1xuICAgIC8vIGNvbnN0IHNldFRhc2tEZXNjcmlwdGlvbiA9IChuZXdEZXNjcmlwdGlvbikgPT4ge1xuICAgIC8vICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIC8vIH07XG4vLyAgICAgcmV0dXJuIHsgZ2V0VGFza0Rlc2NyaXB0aW9uLCBzZXRUYXNrRGVzY3JpcHRpb24gfTtcbi8vIH07XG5cbmNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSAoZGVzY3JpcHRpb24sIGNvbXBsZXRlZCkgPT4ge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCxcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBjb21wbGV0ZWQpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBldmVudEJ1bmRsZXIgfSBmcm9tIFwiLi9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuXG5jb25zdCBET01Db250cm9sbGVyQWRkRWRpdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgYWRkVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFiXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IG5ld1RhYkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3RUaXRsZSA9IG5ld1RhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgbmV3VGFiRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiLXRpdGxlXCIpO1xuICAgICAgICBuZXdUYWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXggPSBpbmRleDtcbiAgICAgICAgbmV3VGFiRWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3dpdGNoLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInRhYi1uYW1lXCI+VEFCIE5BTUUgUExBQ0VIT0xERVI8L2gyPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YWIgbmFtZSBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFiIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHRhYk5hbWVFbGVtZW50ID0gbmV3VGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYi1uYW1lXCIpO1xuICAgICAgICB0YWJOYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5ld1RhYk9iamVjdFRpdGxlO1xuICAgICAgICB0b0RvVGFiU2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFiRWxlbWVudCwgYWRkVGFiQnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIG5ld1RhYkVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IHNldFRhYklucHV0RWxlbWVudFZhbHVlID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0YWJOYW1lID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBpbnB1dEVsZW1lbnQudmFsdWUgPSB0YWJOYW1lO1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYi1uYW1lLWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKGlucHV0RWxlbWVudCwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYk5hbWVFbGVtZW50ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YWJJbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IHRhYkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwic3dpdGNoLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGFiQnV0dG9uTmFtZS5jbGFzc0xpc3QuYWRkKFwidGFiLW5hbWVcIik7XG4gICAgICAgIHRhYkJ1dHRvbk5hbWUudGV4dENvbnRlbnQgPSB0YWJOYW1lO1xuICAgICAgICB0YWJCdXR0b24uYXBwZW5kQ2hpbGQodGFiQnV0dG9uTmFtZSk7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRhYkJ1dHRvbiwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBhZGRDdXJyZW50VGFiSW5kaWNhdG9yID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWJJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQoY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgdGFiRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImN1cnJlbnQtdGFiXCIpO1xuICAgIH1cbiAgICBjb25zdCBhZGROZXdUYXNrVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgdG9Eb0NvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbmV3VGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLXRhc2tcIik7XG4gICAgICAgIG5ld1Rhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4ID0gaW5kZXg7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tUaXRsZSA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tEZXNjcmlwdGlvbiA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tEdWVEYXRlID0gbmV3VGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrTm90ZXMgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICBjb25zdCBuZXdUYXNrQ29tcGxldGVJRCA9IGB0by1kby1jb21wbGV0ZS1jaGVja2JveC0ke2luZGV4fWA7XG4gICAgICAgIG5ld1Rhc2tFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby10YXNrLW92ZXJ2aWV3XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLXRpdGxlLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG8tZG8tdGl0bGVcIj5USVRMRSBQTEFDRUhPTERFUjwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby1waW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvcGluLXVucGlubmVkLnBuZ1wiIGFsdD1cIlBpbiB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay10aXRsZSBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgdGl0bGUgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tcmVtb3ZlLXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIlJlbW92ZSB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tY29tcGxldGUtc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tY29tcGxldGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJJRCBQTEFDRUhPTERFUlwiIGNsYXNzPVwidG8tZG8tY29tcGxldGUtbGFiZWxcIj5Db21wbGV0ZWQ6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiXCIgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1jaGVja2JveFwiIGlkPVwiSUQgUExBQ0VIT0xERVJcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby10YXNrLWNoYW5nZS1kaXNwbGF5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jaGV2cm9uLWRvd24ucG5nXCIgYWx0PVwiQ2hhbmdlIHRhc2sgZGlzcGxheSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWR1ZS1kYXRlLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0by1kby1kdWUtZGF0ZVwiPkRVRSBEQVRFIFBMQUNFSE9MREVSPC9wPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLWR1ZS1kYXRlIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBkdWUgZGF0ZSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uIHRvLWRvLXRhc2stc3ViY29udGFpbmVyIGFuaW1hdGlvbi10YXJnZXRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uXCI+REVTQ1JJUFRJT04gUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1kZXNjcmlwdGlvbiBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBkZXNjcmlwdGlvbiBidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLW5vdGVzLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXIgYW5pbWF0aW9uLXRhcmdldFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tbm90ZXNcIj5OT1RFUyBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLW5vdGVzIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIG5vdGVzIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGFjdGlvbj1cIlwiIGNsYXNzPVwiY2hlY2tsaXN0IGFuaW1hdGlvbi10YXJnZXRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2tsaXN0LWhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8bGVnZW5kIGNsYXNzPVwiY2hlY2tsaXN0LWxhYmVsXCI+Q2hlY2tsaXN0PC9sZWdlbmQ+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJhZGQtY2hlY2tsaXN0LXRhc2tcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wbHVzLnBuZ1wiIGFsdD1cIkFkZCBjaGVja2xpc3QgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgdGl0bGVFbGVtZW50ID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10aXRsZVwiKTtcbiAgICAgICAgdGl0bGVFbGVtZW50LnRleHRDb250ZW50ID0gbmV3VGFza1RpdGxlO1xuICAgICAgICBjb25zdCBkdWVEYXRlRWxlbWVudCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGVcIik7XG4gICAgICAgIGR1ZURhdGVFbGVtZW50LnRleHRDb250ZW50ID0gXCJEdWUgT246IFwiICsgbmV3VGFza0R1ZURhdGU7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uRWxlbWVudCA9IG5ld1Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGRlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IFwiRGVzY3JpcHRpb246IFwiICsgbmV3VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCBub3Rlc0VsZW1lbnQgPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzXCIpO1xuICAgICAgICBub3Rlc0VsZW1lbnQudGV4dENvbnRlbnQgPSBcIk5vdGVzOiBcIiArIG5ld1Rhc2tOb3RlcztcbiAgICAgICAgdG9Eb0NvbnRlbnQuYXBwZW5kQ2hpbGQobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUxhYmVsID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcImxhYmVsXCIpO1xuICAgICAgICBjb21wbGV0ZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBuZXdUYXNrQ29tcGxldGVJRCk7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlQ2hlY2tib3ggPSBuZXdUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb21wbGV0ZUNoZWNrYm94LnNldEF0dHJpYnV0ZShcImlkXCIsIG5ld1Rhc2tDb21wbGV0ZUlEKTtcbiAgICAgICAgcmV0dXJuIG5ld1Rhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIuaW5zZXJ0QmVmb3JlKGlucHV0RWxlbWVudCwgdGFza1N1YmNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUgPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGxldCB0YXNrT2JqZWN0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChidXR0b25UeXBlID09PSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgIHRhc2tPYmplY3RWYWx1ZSA9IHRhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0VmFsdWUgPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgICB0YXNrT2JqZWN0VmFsdWUgPSB0YXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdGFza09iamVjdFZhbHVlID0gdGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gdGFza09iamVjdFZhbHVlO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50ID0gKHRhc2tJbmRleCwgYnV0dG9uVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyRWxlbWVudCh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJ1dHRvblR5cGUgPT09IFwiVGl0bGVcIikge1xuICAgICAgICAgICAgY29uc3QgdGFza1RpdGxlID0gdGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tdGl0bGVcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrVGl0bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJEdWUgRGF0ZVwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrRHVlRGF0ZSA9IHRhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kdWUtZGF0ZVwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiRHVlIE9uOiBcIiArIHRhc2tEdWVEYXRlO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gdGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiRGVzY3JpcHRpb246IFwiICsgdGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgY29uc3QgdGFza05vdGVzID0gdGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1ub3Rlc1wiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IFwiTm90ZXM6IFwiICsgdGFza05vdGVzO1xuICAgICAgICB9O1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5pbnNlcnRCZWZvcmUodGFza1N1YmNvbnRlbnRFbGVtZW50LCB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgY29uc3QgdG9nZ2xlVGFza0RPTUNvbXBsZXRlID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUNoZWNrYm94ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9ICB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrQ29tcGxldGVkU3RhdGVkID0gdGFza09iamVjdC5nZXRDb21wbGV0ZWRTdGF0ZSgpO1xuICAgICAgICBpZiAodGFza0NvbXBsZXRlZFN0YXRlZCkge1xuICAgICAgICAgICAgY29tcGxldGVDaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbXBsZXRlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NID0gKHRhc2tJbmRleCwgbmV3Q2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdEVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdFwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSB0YXNrT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhuZXdDaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtdGFza1wiKTtcbiAgICAgICAgbmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQuZGF0YXNldC5jaGVja2xpc3RUYXNrSW5kZXggPSBuZXdDaGVja2xpc3RUYXNrSW5kZXg7XG4gICAgICAgIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImNoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtuZXdDaGVja2xpc3RUYXNrSW5kZXh9XCIgY2xhc3M9XCJjaGVja2xpc3QtY29tcGxldGUtY2hlY2tib3hcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke25ld0NoZWNrbGlzdFRhc2tJbmRleH1cIiBjbGFzcz1cImNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIERFU0NSSVBUSU9OIFBMQUNFSE9MREVSXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtY2hlY2tsaXN0LXRhc2tcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgY2hlY2tsaXN0IHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJyZW1vdmUtY2hlY2tsaXN0LXRhc2tcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2xvc2UucG5nXCIgYWx0PVwiRWRpdCBjaGVja2xpc3QgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBgXG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQgPSBuZXdDaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gbmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjaGVja2xpc3RFbGVtZW50LmFwcGVuZENoaWxkKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjaGVja2xpc3QtaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLmFwcGVuZENoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudFZhbHVlID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtaW5wdXRcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gdGFza09iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgYGNoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtjaGVja2xpc3RUYXNrSW5kZXh9YCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24uYXBwZW5kQ2hpbGQoY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2sodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgaWYgKGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tsaXN0LXRhc2stY29tcGxldGVkXCIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2hhbmdlUGluQnV0dG9uSW1hZ2UgPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBwaW5CdXR0b24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXBpblwiKVxuICAgICAgICBjb25zdCBwaW5CdXR0b25JbWFnZSA9IHBpbkJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgICAgICBpZiAodGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpKSB7XG4gICAgICAgICAgICBwaW5CdXR0b25JbWFnZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCIuL2Fzc2V0cy9waW4tcGlubmVkLnBuZ1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBpbkJ1dHRvbkltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4vYXNzZXRzL3Bpbi11bnBpbm5lZC5wbmdcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudEluZGV4ID0gdGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhc2tDb250ZW50U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgaWYgKHRhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBpbm5lZC10YXNrXCIpKTtcbiAgICAgICAgICAgIGlmIChsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgdGFza0NvbnRlbnRTZWN0aW9uLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlFbmRJbmRleCA9IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQaW5uZWRUYXNrRWxlbWVudCA9IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50c1thcnJheUVuZEluZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBpbm5lZFRhc2tFbGVtZW50IG9mIGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaW5uZWRUYXNrRWxlbWVudEluZGV4ID0gcGlubmVkVGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrRWxlbWVudEluZGV4IDwgcGlubmVkVGFza0VsZW1lbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgcGlubmVkVGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGlubmVkVGFza0VsZW1lbnQgPT09IGxhc3RQaW5uZWRUYXNrRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBpbm5lZFRhc2tFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIHRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwaW5uZWQtdGFza1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzID0gQXJyYXkuZnJvbSh0YXNrQ29udGVudFNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbChcIi50by1kby10YXNrOm5vdCgucGlubmVkLXRhc2spXCIpKTtcbiAgICAgICAgICAgIGlmIChsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24uYXBwZW5kQ2hpbGQodGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUVuZEluZGV4ID0gbGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0VW5waW5uZWRUYXNrRWxlbWVudCA9IGxpc3RPZlVucGlubmVkVGFza0VsZW1lbnRzW2FycmF5RW5kSW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdW5waW5uZWRUYXNrRWxlbWVudCBvZiBsaXN0T2ZVbnBpbm5lZFRhc2tFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bnBpbm5lZFRhc2tFbGVtZW50SW5kZXggPSB1bnBpbm5lZFRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFza0VsZW1lbnRJbmRleCA8IHVucGlubmVkVGFza0VsZW1lbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZSh0YXNrRWxlbWVudCwgdW5waW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1bnBpbm5lZFRhc2tFbGVtZW50ID09PSBsYXN0VW5waW5uZWRUYXNrRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmFwcGVuZENoaWxkKHRhc2tFbGVtZW50LCBsYXN0VW5waW5uZWRUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwicGlubmVkLXRhc2tcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVBbmltYXRpb25zID0gKHRhc2tJbmRleCwgYWN0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZURpc3BsYXlCdXR0b24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIik7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkltYWdlID0gdG9nZ2xlRGlzcGxheUJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgICAgICBjb25zdCBlbGVtZW50c1RvVG9nZ2xlID0gQXJyYXkuZnJvbSh0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFuaW1hdGlvbi10YXJnZXRcIikpO1xuICAgICAgICBlbGVtZW50c1RvVG9nZ2xlLnB1c2goYnV0dG9uSW1hZ2UpXG4gICAgICAgIGVsZW1lbnRzVG9Ub2dnbGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJFbmFibGVcIikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vLWFuaW1hdGlvbnNcIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJEaXNhYmxlXCIpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm5vLWFuaW1hdGlvbnNcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRUYXNrc0Zyb21OZXdDdXJyZW50VGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYk9iamVjdCgpO1xuICAgICAgICBjb25zdCBsaXN0T2ZUYXNrcyA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0Q2hlY2tsaXN0VGFza3MoKTtcbiAgICAgICAgZm9yIChjb25zdCB0YXNrSW5kZXggaW4gbGlzdE9mVGFza3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBsaXN0T2ZUYXNrc1t0YXNrSW5kZXhdXG4gICAgICAgICAgICBpZiAodGFza09iamVjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VGFza0VsZW1lbnQgPSBhZGROZXdUYXNrVG9ET00odGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICBzZXRQaW5CdXR0b25JbWFnZShuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgcmVhcnJhbmdlUGlubmVkVGFza3NQb3NpdGlvbihuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgZXZlbnRCdW5kbGVyLmFkZFRhc2tMaXN0ZW5lcnMobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RPZkNoZWNrbGlzdFRhc2tzID0gdGFza09iamVjdC5nZXRDaGVja2xpc3RUYXNrcygpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hlY2tsaXN0VGFza0luZGV4IGluIGxpc3RPZkNoZWNrbGlzdFRhc2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBsaXN0T2ZDaGVja2xpc3RUYXNrc1tjaGVja2xpc3RUYXNrSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tsaXN0VGFza09iamVjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrRWxlbWVudCA9IGFkZE5ld0NoZWNrbGlzdFRhc2tUb0RPTSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDaGVja2xpc3RUYXNrRE9NQ29tcGxldGUodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRCdW5kbGVyLmFkZENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHNldFBpbkJ1dHRvbkltYWdlID0gKG5ld1Rhc2tFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYXNrSW5kZXggPSBuZXdUYXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY3VycmVudFRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgcGluQnV0dG9uID0gbmV3VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1waW5cIik7XG4gICAgICAgIGNvbnN0IHBpbkJ1dHRvbkltYWdlID0gcGluQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgICAgIGlmIChjdXJyZW50VGFza09iamVjdC5nZXRQaW5uZWRTdGF0ZSgpKSB7XG4gICAgICAgICAgICBwaW5CdXR0b25JbWFnZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCIuL2Fzc2V0cy9waW4tcGlubmVkLnBuZ1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBpbkJ1dHRvbkltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcIi4vYXNzZXRzL3Bpbi11bnBpbm5lZC5wbmdcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCByZWFycmFuZ2VQaW5uZWRUYXNrc1Bvc2l0aW9uID0gKG5ld1Rhc2tFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYXNrSW5kZXggPSBuZXdUYXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY3VycmVudFRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdGFza0NvbnRlbnRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICBpZiAoY3VycmVudFRhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdE9mUGlubmVkVGFza0VsZW1lbnRzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBpbm5lZC10YXNrXCIpKTtcbiAgICAgICAgICAgIGlmIChsaXN0T2ZQaW5uZWRUYXNrRWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZShuZXdUYXNrRWxlbWVudCwgdGFza0NvbnRlbnRTZWN0aW9uLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlFbmRJbmRleCA9IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQaW5uZWRUYXNrRWxlbWVudCA9IGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50c1thcnJheUVuZEluZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBpbm5lZFRhc2tFbGVtZW50IG9mIGxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaW5uZWRUYXNrRWxlbWVudEluZGV4ID0gcGlubmVkVGFza0VsZW1lbnQuZGF0YXNldC50YXNrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGFza0luZGV4IDwgcGlubmVkVGFza0VsZW1lbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbnRlbnRTZWN0aW9uLmluc2VydEJlZm9yZShuZXdUYXNrRWxlbWVudCwgcGlubmVkVGFza0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGlubmVkVGFza0VsZW1lbnQgPT09IGxhc3RQaW5uZWRUYXNrRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBpbm5lZFRhc2tFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld1Rhc2tFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwaW5uZWQtdGFza1wiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZURpc3BsYXlUYXNrRGV0YWlscyA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0VsZW1lbnQodGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgZWxlbWVudHNUb1RvZ2dsZSA9IEFycmF5LmZyb20odGFza0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5hbmltYXRpb24tdGFyZ2V0XCIpKTtcbiAgICAgICAgZWxlbWVudHNUb1RvZ2dsZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50Q2xhc3NlcyA9IEFycmF5LmZyb20oZWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRDbGFzc2VzLmluY2x1ZGVzKFwiaGlkZS10by1kby1kZXRhaWxzXCIpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZS10by1kby1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc3BsYXktdG8tZG8tZGV0YWlsc1wiKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZS10by1kby1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRpc3BsYXktdG8tZG8tZGV0YWlsc1wiKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcHJldmVudERvdWJsZUNsaWNrKHRhc2tFbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IHByZXZlbnREb3VibGVDbGljayA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibWlkLWFuaW1hdGlvblwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibWlkLWFuaW1hdGlvblwiKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfTtcbiAgICBjb25zdCByb3RhdGVDaGV2cm9uQnV0dG9uID0gKHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGV2cm9uQnV0dG9uID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YXNrLWNoYW5nZS1kaXNwbGF5XCIpO1xuICAgICAgICBjb25zdCBidXR0b25JbWFnZSA9IGNoZXZyb25CdXR0b24ucXVlcnlTZWxlY3RvcihcImltZ1wiKTtcbiAgICAgICAgY29uc3QgYnV0dG9uSW1hZ2VDbGFzc2VzID0gQXJyYXkuZnJvbShidXR0b25JbWFnZS5jbGFzc0xpc3QpO1xuICAgICAgICBpZiAoYnV0dG9uSW1hZ2VDbGFzc2VzLmxlbmd0aCA9PT0gMCB8fCBidXR0b25JbWFnZUNsYXNzZXMuaW5jbHVkZXMoXCJyb3RhdGUtaGlkZS10YXNrLWRldGFpbHNcIikpIHtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJyb3RhdGUtaGlkZS10YXNrLWRldGFpbHNcIik7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QuYWRkKFwicm90YXRlLWRpc3BsYXktdGFzay1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LmFkZChcInJvdGF0ZWQtY2hldnJvblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25JbWFnZUNsYXNzZXMuaW5jbHVkZXMoXCJyb3RhdGUtZGlzcGxheS10YXNrLWRldGFpbHNcIikpIHtcbiAgICAgICAgICAgIGJ1dHRvbkltYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJyb3RhdGUtZGlzcGxheS10YXNrLWRldGFpbHNcIik7XG4gICAgICAgICAgICBidXR0b25JbWFnZS5jbGFzc0xpc3QuYWRkKFwicm90YXRlLWhpZGUtdGFzay1kZXRhaWxzXCIpO1xuICAgICAgICAgICAgYnV0dG9uSW1hZ2UuY2xhc3NMaXN0LnJlbW92ZShcInJvdGF0ZWQtY2hldnJvblwiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZE5ld1RhYlRvRE9NLFxuICAgICAgICBzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSxcbiAgICAgICAgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LFxuICAgICAgICBpbnNlcnRUYWJOYW1lRWxlbWVudCxcbiAgICAgICAgYWRkQ3VycmVudFRhYkluZGljYXRvcixcbiAgICAgICAgYWRkTmV3VGFza1RvRE9NLFxuICAgICAgICBpbnNlcnRUYXNrSW5wdXRFbGVtZW50LFxuICAgICAgICBzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUsXG4gICAgICAgIGluc2VydFRhc2tTdWJjb250ZW50RWxlbWVudCxcbiAgICAgICAgdG9nZ2xlVGFza0RPTUNvbXBsZXRlLFxuICAgICAgICBhZGROZXdDaGVja2xpc3RUYXNrVG9ET00sXG4gICAgICAgIGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQsXG4gICAgICAgIHNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSxcbiAgICAgICAgaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCxcbiAgICAgICAgdG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlLFxuICAgICAgICBjaGFuZ2VQaW5CdXR0b25JbWFnZSxcbiAgICAgICAgc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uLFxuICAgICAgICBsb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYixcbiAgICAgICAgdG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzLFxuICAgICAgICByb3RhdGVDaGV2cm9uQnV0dG9uLFxuICAgICAgICB0b2dnbGVBbmltYXRpb25zXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IERPTUNvbnRyb2xsZXJSZW1vdmUgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHJlbW92ZVRhYk5hbWVFbGVtZW50ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiRWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgIGxldCBzd2l0Y2hUYWIgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKVxuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKHN3aXRjaFRhYik7XG4gICAgICAgIHN3aXRjaFRhYiA9IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYklucHV0RWxlbWVudCA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIHRhYkVsZW1lbnQucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGxldCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkVsZW1lbnQodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIHRvRG9UYWJTZWN0aW9uLnJlbW92ZUNoaWxkKHRhYkVsZW1lbnQpO1xuICAgICAgICB0YWJFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0Q3VycmVudFRhYlN0YXR1cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY3VycmVudC10YWJcIik7XG4gICAgICAgIGlmIChjdXJyZW50VGFiICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjdXJyZW50VGFiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrRWxlbWVudEZyb21ET00gPSAodGFza0luZGV4KSA9PiB7XG4gICAgICAgIGxldCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrRWxlbWVudCh0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b0RvVGFza1NlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbnRlbnRcIik7XG4gICAgICAgIHRvRG9UYXNrU2VjdGlvbi5yZW1vdmVDaGlsZCh0YXNrRWxlbWVudCk7XG4gICAgICAgIHRhc2tFbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlVGFza1N1YmNvbnRlbnRFbGVtZW50RnJvbURPTSA9ICh0YXNrSW5kZXgsIGJ1dHRvblR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lckVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQodGFza0luZGV4LCBidXR0b25UeXBlKTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZCh0YXNrU3ViY29udGVudEVsZW1lbnQpO1xuICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBudWxsXG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tJbnB1dEVsZW1lbnQgPSAodGFza0luZGV4LCBidXR0b25UeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tTdWJjb250YWluZXJFbGVtZW50KHRhc2tJbmRleCwgYnV0dG9uVHlwZSk7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSA9ICh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrRWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC10YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucmVtb3ZlQ2hpbGQoY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQgPSAodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tFbGVtZW50RE9NID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tFbGVtZW50KHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdEVsZW1lbnQgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdFwiKTtcbiAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgY2hlY2tsaXN0RWxlbWVudC5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUFsbFRhc2tFbGVtZW50cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbnRlbnRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0YXNrQ29udGVudFNlY3Rpb24ucmVwbGFjZUNoaWxkcmVuKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyByZW1vdmVUYWJOYW1lRWxlbWVudCwgcmVtb3ZlVGFiSW5wdXRFbGVtZW50LCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVzZXRDdXJyZW50VGFiU3RhdHVzLCByZW1vdmVUYXNrRWxlbWVudEZyb21ET00sIHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00sXG4gICAgICAgIHJlbW92ZVRhc2tJbnB1dEVsZW1lbnQsIHJlbW92ZUNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkRPTSwgcmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgcmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00sIHJlbW92ZUFsbFRhc2tFbGVtZW50cywgfVxufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlckFkZEVkaXQgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9hZGRfZWRpdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuXG5jb25zdCBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0ID0gKCgpID0+IHtcbiAgICBjb25zdCByZW1vdmVUYWJGcm9tVG9kb0FycmF5ID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIHRvRG9MaXN0LnJlbW92ZVRhc2sodGFiSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFza0Zyb21UYWJBcnJheSA9ICh0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJPYmplY3QoKTtcbiAgICAgICAgY3VycmVudFRhYk9iamVjdC5yZW1vdmVUYXNrKHRhc2tJbmRleCk7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tGcm9tVGFza0FycmF5ID0gKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiT2JqZWN0KCk7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayh0YXNrSW5kZXgpO1xuICAgICAgICB0YXNrT2JqZWN0LnJlbW92ZVRhc2soY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICB9O1xuICAgIHJldHVybiB7IHJlbW92ZVRhYkZyb21Ub2RvQXJyYXksIHJlbW92ZVRhc2tGcm9tVGFiQXJyYXksIHJlbW92ZUNoZWNrbGlzdFRhc2tGcm9tVGFza0FycmF5LCB9O1xufSkoKTtcblxuZXhwb3J0IHsgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuXG5jb25zdCB0b2RvTGlzdFN0b3JhZ2UgPSAoKCkgPT4ge1xuICAgIGxldCBsb2FkaW5nSW5Db250ZW50ID0gZmFsc2U7XG4gICAgY29uc3QgYWRkVGFiID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJPYmplY3QodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHRhYkpTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIiR7dGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpfVwiLFxuICAgICAgICAgICAgXCJ0YXNrc1wiOiB7fVxuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgdGFiUGFyc2VkT2JqZWN0ID0gSlNPTi5wYXJzZSh0YWJKU09OU3RyaW5nKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXSA9IHRhYlBhcnNlZE9iamVjdDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q3VycmVudFRhYiA9ICh0YWJJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIHRhYkluZGV4ID09PSBudWxsXG4gICAgICAgICAgICA/ICh0b2RvTGlzdFBhcnNlZE9iamVjdFtcImN1cnJlbnRfdGFiXCJdID0gbnVsbClcbiAgICAgICAgICAgIDogKHRvZG9MaXN0UGFyc2VkT2JqZWN0W1wiY3VycmVudF90YWJcIl0gPSBOdW1iZXIodGFiSW5kZXgpKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpXG4gICAgfTtcbiAgICBjb25zdCBzZXRUYWJOYW1lID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJPYmplY3QodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0aXRsZVwiXSA9IHRhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYkluZGV4ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJJbmRleCA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1wiY3VycmVudF90YWJcIl07XG4gICAgICAgIHJldHVybiBjdXJyZW50VGFiSW5kZXg7XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYWJUaXRsZSA9ICh0YWJLZXkpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBjb25zdCB0YWJUaXRsZSA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGl0bGVcIl07XG4gICAgICAgIHJldHVybiB0YWJUaXRsZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhYk9iamVjdHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gdG9kb0xpc3RTdG9yYWdlLmdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdHMgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl07XG4gICAgICAgIHJldHVybiB0YWJPYmplY3RzO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiID0gKHRhYkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXSA9IG51bGw7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tPYmplY3QodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFza0pTT05TdHJpbmcgPSBge1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIiR7dGFza09iamVjdC5nZXRUYXNrVGl0bGUoKX1cIixcbiAgICAgICAgICAgIFwiZHVlX2RhdGVcIjogXCIke3Rhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKX1cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCIke3Rhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCl9XCIsXG4gICAgICAgICAgICBcIm5vdGVzXCI6IFwiJHt0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpfVwiLFxuICAgICAgICAgICAgXCJwaW5uZWRcIjogJHt0YXNrT2JqZWN0LmdldFBpbm5lZFN0YXRlKCl9LFxuICAgICAgICAgICAgXCJjb21wbGV0ZWRcIjogJHt0YXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCl9LFxuICAgICAgICAgICAgXCJjaGVja2xpc3RfdGFza3NcIjoge31cbiAgICAgICAgfWA7XG4gICAgICAgIGNvbnN0IHRhc2tQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRhc2tKU09OU3RyaW5nKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdID0gdGFza1BhcnNlZE9iamVjdDtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0VGFza1N1YmNvbnRhaW5lclZhbHVlID0gKHRhYkluZGV4LCB0YXNrSW5kZXgsIHN1YmNvbnRhaW5lclR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGlmIChzdWJjb250YWluZXJUeXBlID09PSBcIlRpdGxlXCIpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcInRpdGxlXCJdID0gdGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJjb250YWluZXJUeXBlID09PSBcIkR1ZSBEYXRlXCIpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcImR1ZV9kYXRlXCJdID0gdGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmNvbnRhaW5lclR5cGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiZGVzY3JpcHRpb25cIl0gPSB0YXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmNvbnRhaW5lclR5cGUgPT09IFwiTm90ZXNcIikge1xuICAgICAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wibm90ZXNcIl0gPSB0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICB9O1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrUGlubmVkID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXVtcInBpbm5lZFwiXSA9IHRhc2tPYmplY3QuZ2V0UGlubmVkU3RhdGUoKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlVGFza0NvbXBsZXRlZCA9ICh0YWJJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjb21wbGV0ZWRcIl0gPSB0YXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCk7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFRhc2tWYWx1ZXMgPSAodGFiS2V5LCB0YXNrS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgbGV0IHRhc2tWYWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFza1RpdGxlID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0YXNrc1wiXVt0YXNrS2V5XVtcInRpdGxlXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza1RpdGxlKTtcbiAgICAgICAgY29uc3QgdGFza0R1ZURhdGUgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1wiZHVlX2RhdGVcIl07XG4gICAgICAgIHRhc2tWYWx1ZXMucHVzaCh0YXNrRHVlRGF0ZSk7XG4gICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJkZXNjcmlwdGlvblwiXTtcbiAgICAgICAgdGFza1ZhbHVlcy5wdXNoKHRhc2tEZXNjcmlwdGlvbik7XG4gICAgICAgIGNvbnN0IHRhc2tOb3RlcyA9IHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVt0YWJLZXldW1widGFza3NcIl1bdGFza0tleV1bXCJub3Rlc1wiXTtcbiAgICAgICAgdGFza1ZhbHVlcy5wdXNoKHRhc2tOb3Rlcyk7XG4gICAgICAgIGNvbnN0IHRhc2tQaW5uZWQgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1wicGlubmVkXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza1Bpbm5lZCk7XG4gICAgICAgIGNvbnN0IHRhc2tDb21wbGV0ZWQgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1wiY29tcGxldGVkXCJdO1xuICAgICAgICB0YXNrVmFsdWVzLnB1c2godGFza0NvbXBsZXRlZCk7XG4gICAgICAgIHJldHVybiB0YXNrVmFsdWVzO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VGFza09iamVjdHMgPSAodGFiSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdHMgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl07XG4gICAgICAgIHJldHVybiB0YXNrT2JqZWN0cztcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIHRvZG9MaXN0UGFyc2VkT2JqZWN0W1widGFic1wiXVtgdGFiXyR7dGFiSW5kZXh9YF1bXCJ0YXNrc1wiXVtgdGFza18ke3Rhc2tJbmRleH1gXSA9IG51bGw7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZENoZWNrbGlzdFRhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBjb25zdCB0b2RvTGlzdFBhcnNlZE9iamVjdCA9IGdldExvY2FsU3RvcmFnZVZhbHVlKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tKU09OU3RyaW5nID0gYHtcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCIke2NoZWNrbGlzdFRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCl9XCIsXG4gICAgICAgICAgICBcImNvbXBsZXRlZFwiOiAke2NoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKX1cbiAgICAgICAgfWA7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKGNoZWNrbGlzdFRhc2tKU09OU3RyaW5nKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2BjaGVja2xpc3RfdGFza18ke2NoZWNrbGlzdFRhc2tJbmRleH1gXSA9IGNoZWNrbGlzdFRhc2tQYXJzZWRPYmplY3Q7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0IHNldENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2BjaGVja2xpc3RfdGFza18ke2NoZWNrbGlzdFRhc2tJbmRleH1gXVtcImRlc2NyaXB0aW9uXCJdID0gY2hlY2tsaXN0VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlZCA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrT2JqZWN0KHRhYkluZGV4LCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2BjaGVja2xpc3RfdGFza18ke2NoZWNrbGlzdFRhc2tJbmRleH1gXVtcImNvbXBsZXRlZFwiXSA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlVmFsdWUodG9kb0xpc3RQYXJzZWRPYmplY3QpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2hlY2tsaXN0VGFza1ZhbHVlcyA9ICh0YWJLZXksIHRhc2tLZXksIGNoZWNrbGlzdFRhc2tLZXkpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSgpO1xuICAgICAgICBsZXQgY2hlY2tsaXN0VGFza1ZhbHVlcyA9IFtdO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bdGFiS2V5XVtcInRhc2tzXCJdW3Rhc2tLZXldW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2NoZWNrbGlzdFRhc2tLZXldW1wiZGVzY3JpcHRpb25cIl07XG4gICAgICAgIGNoZWNrbGlzdFRhc2tWYWx1ZXMucHVzaChjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24pO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrQ29tcGxldGVkID0gdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW3RhYktleV1bXCJ0YXNrc1wiXVt0YXNrS2V5XVtcImNoZWNrbGlzdF90YXNrc1wiXVtjaGVja2xpc3RUYXNrS2V5XVtcImNvbXBsZXRlZFwiXTtcbiAgICAgICAgY2hlY2tsaXN0VGFza1ZhbHVlcy5wdXNoKGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQpO1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza1ZhbHVlcztcbiAgICB9O1xuICAgIGNvbnN0IGdldENoZWNrbGlzdFRhc2tPYmplY3RzID0gKHRhYkluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdHMgPSB0b2RvTGlzdFBhcnNlZE9iamVjdFtcInRhYnNcIl1bYHRhYl8ke3RhYkluZGV4fWBdW1widGFza3NcIl1bYHRhc2tfJHt0YXNrSW5kZXh9YF1bXCJjaGVja2xpc3RfdGFza3NcIl07XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrT2JqZWN0cztcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2sgPSAodGFiSW5kZXgsIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gZ2V0TG9jYWxTdG9yYWdlVmFsdWUoKTtcbiAgICAgICAgdG9kb0xpc3RQYXJzZWRPYmplY3RbXCJ0YWJzXCJdW2B0YWJfJHt0YWJJbmRleH1gXVtcInRhc2tzXCJdW2B0YXNrXyR7dGFza0luZGV4fWBdW1wiY2hlY2tsaXN0X3Rhc2tzXCJdW2BjaGVja2xpc3RfdGFza18ke2NoZWNrbGlzdFRhc2tJbmRleH1gXSA9IG51bGw7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlKHRvZG9MaXN0UGFyc2VkT2JqZWN0KTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrRm9yRXhpc3RpbmdTdG9yYWdlID0gKCkgPT4ge1xuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b19kb19saXN0XCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZ2V0TG9jYWxTdG9yYWdlVmFsdWUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0SlNPTlN0cmluZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9fZG9fbGlzdFwiKTtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RQYXJzZWRPYmplY3QgPSBKU09OLnBhcnNlKHRvZG9MaXN0SlNPTlN0cmluZyk7XG4gICAgICAgIHJldHVybiB0b2RvTGlzdFBhcnNlZE9iamVjdDtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUxvY2FsU3RvcmFnZVZhbHVlID0gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRKU09OU3RyaW5nVmFsdWUgPSBKU09OLnN0cmluZ2lmeShuZXdWYWx1ZSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidG9fZG9fbGlzdFwiLCB1cGRhdGVkSlNPTlN0cmluZ1ZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGluaXRpYWxpemVUb2RvTGlzdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9kb0xpc3RKU09OU3RyaW5nID0gYHtcbiAgICAgICAgICAgIFwiY3VycmVudF90YWJcIjogJHt0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKX0sXG4gICAgICAgICAgICBcInRhYnNcIjoge31cbiAgICAgICAgfWA7XG4gICAgICAgIGNvbnN0IHRvZG9MaXN0UGFyc2VkT2JqZWN0ID0gSlNPTi5wYXJzZSh0b2RvTGlzdEpTT05TdHJpbmcpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSh0b2RvTGlzdFBhcnNlZE9iamVjdCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVMb2FkaW5nID0gKCkgPT4ge1xuICAgICAgICBsb2FkaW5nSW5Db250ZW50ID8gbG9hZGluZ0luQ29udGVudCA9IGZhbHNlIDogbG9hZGluZ0luQ29udGVudCA9IHRydWU7XG4gICAgfTtcbiAgICBjb25zdCBpc0xvYWRpbmcgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBsb2FkaW5nSW5Db250ZW50O1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkVGFiLFxuICAgICAgICBzZXRDdXJyZW50VGFiLFxuICAgICAgICBzZXRUYWJOYW1lLFxuICAgICAgICBnZXRDdXJyZW50VGFiSW5kZXgsXG4gICAgICAgIGdldFRhYlRpdGxlLFxuICAgICAgICBnZXRUYWJPYmplY3RzLFxuICAgICAgICByZW1vdmVUYWIsXG4gICAgICAgIGFkZFRhc2ssXG4gICAgICAgIHNldFRhc2tTdWJjb250YWluZXJWYWx1ZSxcbiAgICAgICAgdG9nZ2xlVGFza1Bpbm5lZCxcbiAgICAgICAgdG9nZ2xlVGFza0NvbXBsZXRlZCxcbiAgICAgICAgZ2V0VGFza1ZhbHVlcyxcbiAgICAgICAgZ2V0VGFza09iamVjdHMsXG4gICAgICAgIHJlbW92ZVRhc2ssXG4gICAgICAgIGFkZENoZWNrbGlzdFRhc2ssXG4gICAgICAgIHNldENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbixcbiAgICAgICAgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlZCxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza1ZhbHVlcyxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza09iamVjdHMsXG4gICAgICAgIHJlbW92ZUNoZWNrbGlzdFRhc2ssXG4gICAgICAgIGNoZWNrRm9yRXhpc3RpbmdTdG9yYWdlLFxuICAgICAgICBnZXRMb2NhbFN0b3JhZ2VWYWx1ZSxcbiAgICAgICAgaW5pdGlhbGl6ZVRvZG9MaXN0LFxuICAgICAgICB0b2dnbGVMb2FkaW5nLFxuICAgICAgICBpc0xvYWRpbmdcbiAgICB9XG59KSgpO1xuXG5leHBvcnQgeyB0b2RvTGlzdFN0b3JhZ2UgfTsiLCJpbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfYWRkX2VkaXRfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyUmVtb3ZlIH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfcmVtb3ZlXCI7XG5pbXBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgdG9kb0xpc3RTdG9yYWdlIH0gZnJvbSBcIi4vdG9kb19saXN0X3N0b3JhZ2Vfb2JqZWN0XCI7XG5cbmNvbnN0IGV2ZW50QnVuZGxlciA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkVGFiID0gKGV2ZW50LCB0YWJOYW1lPVwiTmV3IFRhYlwiKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFiVG9Ub2RvQXJyYXkodGFiTmFtZSk7XG4gICAgICAgIGNvbnN0IG5ld1RhYkVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdUYWJUb0RPTShuZXdUYWJJbmRleCk7XG4gICAgICAgIGFkZFRhYkxpc3RlbmVycyhuZXdUYWJFbGVtZW50KTtcbiAgICAgICAgaWYgKCF0b2RvTGlzdFN0b3JhZ2UuaXNMb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5hZGRUYWIobmV3VGFiSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGhlbHBlckZ1bmN0aW9ucy5jaGVja0lmT25seU9uZVRhYigpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKCk7XG4gICAgICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkQ3VycmVudFRhYkluZGljYXRvcigpXG4gICAgICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnNldEN1cnJlbnRUYWIoZmlyc3RUYWJJbmRleCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdUYWJJbmRleFxuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JFeGlzdGluZ0lucHV0RWxlbWVudChldmVudCwgXCJUYWJcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYklucHV0RWxlbWVudCh0YWJJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYk5hbWVFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhYklucHV0RWxlbWVudFZhbHVlKHRhYkluZGV4KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVGFiSW5wdXRMaXN0ZW5lcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RhYk5hbWUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0TmV3VmFsdWUoZXZlbnQpO1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhYk5hbWUodGFiSW5kZXgsIG5ld1RhYk5hbWUpO1xuICAgICAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYk5hbWVFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiSW5wdXRFbGVtZW50KHRhYkluZGV4KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkU3dpdGNoVGFiTGlzdGVuZXIodGFiRWxlbWVudCk7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2Uuc2V0VGFiTmFtZSh0YWJJbmRleCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFiSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZVRhYkZyb21Ub2RvQXJyYXkodGFiSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NKHRhYkluZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnJlbW92ZVRhYih0YWJJbmRleCk7XG4gICAgICAgIGlmIChoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZldhc0N1cnJlbnRUYWIoZXZlbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFRhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3Quc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZEN1cnJlbnRUYWJJbmRpY2F0b3IoKVxuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVBbGxUYXNrRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRDdXJyZW50VGFiKGZpcnN0VGFiSW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZk5vTW9yZVRhYnMoKSkge1xuICAgICAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmxvYWRUYXNrc0Zyb21OZXdDdXJyZW50VGFiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHN3aXRjaFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0lmV2FzQ3VycmVudFRhYihldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhYkluZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnVwZGF0ZUN1cnJlbnRUYWIodGFiSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZXNldEN1cnJlbnRUYWJTdGF0dXMoKTtcbiAgICAgICAgICAgIC8vIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldEN1cnJlbnRUYWJET00odGFiSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkQ3VycmVudFRhYkluZGljYXRvcigpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVBbGxUYXNrRWxlbWVudHMoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmxvYWRUYXNrc0Zyb21OZXdDdXJyZW50VGFiKCk7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2Uuc2V0Q3VycmVudFRhYih0YWJJbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGFkZFRhYkxpc3RlbmVycyA9IChuZXdUYWJFbGVtZW50KSA9PiB7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyKG5ld1RhYkVsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyKG5ld1RhYkVsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFN3aXRjaFRhYkxpc3RlbmVyKG5ld1RhYkVsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFzayA9IChcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIHRhYkluZGV4PXRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLFxuICAgICAgICB0aXRsZT1cIk5ldyBUYXNrIFRpdGxlXCIsXG4gICAgICAgIGR1ZURhdGU9XCJUYXNrIER1ZSBEYXRlXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uPVwiVGFzayBEZXNjcmlwdGlvblwiLFxuICAgICAgICBub3Rlcz1cIlRhc2sgTm90ZXNcIixcbiAgICAgICAgcGlubmVkPWZhbHNlLFxuICAgICAgICBjb21wbGV0ZWQ9ZmFsc2VcbiAgICApID0+IHtcbiAgICAgICAgaWYgKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpID09PSBudWxsKSB7XG4gICAgICAgICAgICBsb2FkSW5JbnN0cnVjdGlvbnNQYWdlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld1Rhc2tUb1RhYihcbiAgICAgICAgICAgIHRhYkluZGV4LFxuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBkdWVEYXRlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBub3RlcyxcbiAgICAgICAgICAgIHBpbm5lZCxcbiAgICAgICAgICAgIGNvbXBsZXRlZFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBuZXdUYXNrRWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZE5ld1Rhc2tUb0RPTShuZXdUYXNrSW5kZXgpO1xuICAgICAgICBhZGRUYXNrTGlzdGVuZXJzKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgaWYgKCF0b2RvTGlzdFN0b3JhZ2UuaXNMb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5hZGRUYXNrKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCBuZXdUYXNrSW5kZXgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3VGFza0luZGV4O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrRm9yRXhpc3RpbmdJbnB1dEVsZW1lbnQoZXZlbnQsIFwiVGFza1wiKSkge1xuICAgICAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyVHlwZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrU3ViY29udGFpbmVyVHlwZShldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00odGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0VGFza0lucHV0RWxlbWVudFZhbHVlKHRhc2tJbmRleCwgdGFza1N1YmNvbnRhaW5lclR5cGUpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYXNrSW5wdXRMaXN0ZW5lcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza1N1YmNvbnRhaW5lclR5cGUoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgbmV3VGFza1N1YmNvbnRlbnRWYWx1ZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXROZXdWYWx1ZShldmVudCk7XG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5lZGl0VGFza09iamVjdEluZm8odGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSwgbmV3VGFza1N1YmNvbnRlbnRWYWx1ZSk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQodGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tJbnB1dEVsZW1lbnQodGFza0luZGV4LCB0YXNrU3ViY29udGFpbmVyVHlwZSk7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2Uuc2V0VGFza1N1YmNvbnRhaW5lclZhbHVlKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgsIHRhc2tTdWJjb250YWluZXJUeXBlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZVRhc2tQaW4gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZUFuaW1hdGlvbnModGFza0luZGV4LCBcIkVuYWJsZVwiKTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlVGFza1Bpbih0YXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5jaGFuZ2VQaW5CdXR0b25JbWFnZSh0YXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zaGlmdFRhc2tFbGVtZW50UG9zaXRpb24odGFza0luZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZVRhc2tQaW5uZWQodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnRvZ2dsZVRhc2tDb21wbGV0ZSh0YXNrSW5kZXgpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVUYXNrRE9NQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZVRhc2tDb21wbGV0ZWQodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZVRhc2tGcm9tVGFiQXJyYXkodGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrRWxlbWVudEZyb21ET00odGFza0luZGV4KTtcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnJlbW92ZVRhc2sodG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUYXNrTGlzdGVuZXJzID0gKG5ld1Rhc2tFbGVtZW50KSA9PiB7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFza0xpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lcihuZXdUYXNrRWxlbWVudCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVUYXNrUGluTGlzdGVuZXIobmV3VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZURpc3BsYXlUYXNrRGV0YWlsc0xpc3RlbmVyKG5ld1Rhc2tFbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sodGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgbmV3Q2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyhuZXdDaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGlmICghdG9kb0xpc3RTdG9yYWdlLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2UuYWRkQ2hlY2tsaXN0VGFzayh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4LCBuZXdDaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvckV4aXN0aW5nSW5wdXRFbGVtZW50KGV2ZW50LCBcIkNoZWNrbGlzdCBUYXNrXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25ET00odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRDaGVja2xpc3RUYXNrSW5wdXRMaXN0ZW5lcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlQ2hlY2tsaXN0VGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRDaGVja2xpc3RUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgbmV3RGVzY3JpcHRpb25WYWx1ZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXROZXdWYWx1ZShldmVudCk7XG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5lZGl0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4LCBuZXdEZXNjcmlwdGlvblZhbHVlKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQodGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgICAgIHRvZG9MaXN0U3RvcmFnZS5zZXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24odG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCksIHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gaGVscGVyRnVuY3Rpb25zLmdldENoZWNrbGlzdFRhc2tJbmRleChldmVudCk7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHRvZG9MaXN0U3RvcmFnZS50b2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVkKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpLCB0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBoZWxwZXJGdW5jdGlvbnMuZ2V0Q2hlY2tsaXN0VGFza0luZGV4KGV2ZW50KTtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdC5yZW1vdmVDaGVja2xpc3RUYXNrRnJvbVRhc2tBcnJheSh0YXNrSW5kZXgsIGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlQ2hlY2tsaXN0VGFza0VsZW1lbnRET00odGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICB0b2RvTGlzdFN0b3JhZ2UucmVtb3ZlQ2hlY2tsaXN0VGFzayh0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKSwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyA9IChuZXdDaGVja2xpc3RUYXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZUxpc3RlbmVyKG5ld0NoZWNrbGlzdFRhc2tFbGVtZW50KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIobmV3Q2hlY2tsaXN0VGFza0VsZW1lbnQpO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXNrSW5kZXgoZXZlbnQpO1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy50cnlpbmdUb0RvdWJsZUNsaWNrKHRhc2tJbmRleCkpIHtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZUFuaW1hdGlvbnModGFza0luZGV4LCBcIkRpc2FibGVcIik7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVEaXNwbGF5VGFza0RldGFpbHModGFza0luZGV4KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnJvdGF0ZUNoZXZyb25CdXR0b24odGFza0luZGV4KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJbkluc3RydWN0aW9uc1BhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkluZGV4ID0gYWRkVGFiKGV2ZW50LCBcIkluc3RydWN0aW9uc1wiKTtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gYWRkVGFzayhcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICBcIlF1aWNrIFRpcHMhIENsaWNrIHRoZSBwaW4gYnV0dG9uIHRvIHBpbiBhIHRhc2sgdG8gdGhlIHRvcCBvZiB0aGUgbGlzdC5cIixcbiAgICAgICAgICAgIFwiVG9tb3Jyb3csIG5leHQgd2Vlaywgb3Igd2hlbmV2ZXIgeW91ciB0YXNrIGlzIGR1ZSwgeW91IGNhbiBhZGQgaXQgaGVyZSEgQ2xpY2sgdGhlIGFycm93IGJ1dHRvbiB0byB0b2dnbGUgYmV0d2VlbiBzaG93aW5nIGFuZCBoaWRpbmcgdGFzayBkZXRhaWxzLlwiLFxuICAgICAgICAgICAgXCJBZGQgYSBkZXNjcmlwdGlvbiBvZiB5b3VyIHRhc2sgaGVyZSEgQ2xpY2sgdGhlIHBlbmNpbCBidXR0b25zIHRvIGVkaXQgdGhlIHZhcmlvdXMgcGFydHMgb2YgeW91ciB0YXNrLlwiLFxuICAgICAgICAgICAgXCJKb3QgZG93biBzb21lIG5vdGVzIGhlcmUhIE1hcmsgeW91ciB0YXNrIGFzIGNvbXBsZXRlIHdoZW4geW91J3JlIGRvbmUsIG9yIHJlbW92ZSBpdCBmcm9tIHRoZSBsaXN0IGJ5IGNsaWNraW5nIHRoZSBYIGJ1dHRvbi5cIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlVGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LmNoYW5nZVBpbkJ1dHRvbkltYWdlKHRhc2tJbmRleCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNoaWZ0VGFza0VsZW1lbnRQb3NpdGlvbih0YXNrSW5kZXgpO1xuICAgICAgICBhZGRMb2FkZWRJbkNoZWNrbGlzdFRhc2soXG4gICAgICAgICAgICB0YWJJbmRleCxcbiAgICAgICAgICAgIHRhc2tJbmRleCxcbiAgICAgICAgICAgIFwiSWYgeW91ciB0YXNrIGhhcyBtdWx0aXBsZSBzdGVwcywgdHJ5IGJyZWFraW5nIHRoZW0gZG93biBpbnRvIGEgY2hlY2tsaXN0ISBDbGljayB0aGUgcGx1cyBzaWduIGJ1dHRvbiB0byBhZGQgc3RlcHMgYXMgbmVlZGVkLlwiLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgYWRkTG9hZGVkSW5DaGVja2xpc3RUYXNrKFxuICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICB0YXNrSW5kZXgsXG4gICAgICAgICAgICBcIkhhdmUgYSBuZXcgdGFzayB5b3Ugd2FudCB0byBrZWVwIHRyYWNrIG9mPyBBZGQgaXQgdG8gdGhlIGxpc3QgYnkgY2xpY2tpbmcgb24gdGhlICdOZXcgVGFzaycgYnV0dG9uIGJlbG93IVwiLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgYWRkTG9hZGVkSW5DaGVja2xpc3RUYXNrKHRhYkluZGV4LFxuICAgICAgICAgICAgdGFza0luZGV4LFxuICAgICAgICAgICAgXCJPcmdhbml6ZSB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIHRhc2tzIGluIHlvdXIgbGlmZSBieSBjcmVhdGluZyB0aGVtZWQgdGFicy4gQ3JlYXRlIGEgbmV3IHRhYiBieSBjbGlja2luZyBvbiB0aGUgcGx1cyBzaWduIGJ1dHRvbiBhdCB0aGUgdG9wIG9mIHRoZSBsaXN0LiBDaGFuZ2UgdGFicyBieSBjbGlja2luZyBvbiBkaWZmZXJlbnQgdGFiIG5hbWVzLlwiLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZExvYWRlZEluQ2hlY2tsaXN0VGFzayA9ICh0YWJJbmRleCwgdGFza0luZGV4LCBkZXNjcmlwdGlvbiwgY29tcGxldGVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2sodGFiSW5kZXgsIHRhc2tJbmRleCwgZGVzY3JpcHRpb24sIGNvbXBsZXRlZCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlKHRhc2tJbmRleCwgY2hlY2tsaXN0VGFza0luZGV4KTtcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyhjaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGlmICghdG9kb0xpc3RTdG9yYWdlLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICB0b2RvTGlzdFN0b3JhZ2UuYWRkQ2hlY2tsaXN0VGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrSW5kZXgpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5Mb2NhbFN0b3JhZ2UgPSAoKSA9PiB7XG4gICAgICAgIHRvZG9MaXN0U3RvcmFnZS50b2dnbGVMb2FkaW5nKCk7XG4gICAgICAgIGxvYWRJbkN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBsb2FkSW5UYWJPYmplY3RzKClcbiAgICAgICAgdG9kb0xpc3RTdG9yYWdlLnRvZ2dsZUxvYWRpbmcoKTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJbkN1cnJlbnRUYWJJbmRleCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9kb0xpc3RTdG9yYWdlLmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICB0b0RvTGlzdC5zZXRDdXJyZW50VGFiSW5kZXgoY3VycmVudFRhYkluZGV4KTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWRJblRhYk9iamVjdHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdHMgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0VGFiT2JqZWN0cygpO1xuICAgICAgICBmb3IgKGNvbnN0IHRhYktleSBpbiB0YWJPYmplY3RzKSB7XG4gICAgICAgICAgICBpZiAodGFiT2JqZWN0c1t0YWJLZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdG9Eb0xpc3QuYWRkVGFzayh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJUaXRsZSA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYWJUaXRsZSh0YWJLZXkpXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiSW5kZXggPSBhZGRUYWIoZXZlbnQsIHRhYlRpdGxlKVxuICAgICAgICAgICAgICAgIGxvYWRJblRhc2tPYmplY3RzKHRhYkluZGV4LCB0YWJLZXkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkQ3VycmVudFRhYkluZGljYXRvcigpXG4gICAgfTtcbiAgICBjb25zdCBsb2FkSW5UYXNrT2JqZWN0cyA9ICh0YWJJbmRleCwgdGFiS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYWJPYmplY3QodGFiSW5kZXgpO1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0cyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYXNrT2JqZWN0cyh0YWJJbmRleCk7XG4gICAgICAgIGZvciAoY29uc3QgdGFza0tleSBpbiB0YXNrT2JqZWN0cykge1xuICAgICAgICAgICAgaWYgKHRhc2tPYmplY3RzW3Rhc2tLZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGFiT2JqZWN0LmFkZFRhc2sodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza1ZhbHVlcyA9IHRvZG9MaXN0U3RvcmFnZS5nZXRUYXNrVmFsdWVzKHRhYktleSwgdGFza0tleSlcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSB0YXNrVmFsdWVzWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gdGFza1ZhbHVlc1sxXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSB0YXNrVmFsdWVzWzJdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tOb3RlcyA9IHRhc2tWYWx1ZXNbM107XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza1Bpbm5lZCA9IHRhc2tWYWx1ZXNbNF07XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlZCA9IHRhc2tWYWx1ZXNbNV07XG4gICAgICAgICAgICAgICAgbGV0IHRhc2tJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tJbmRleCA9IGFkZFRhc2soXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1RpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0R1ZURhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrRGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrTm90ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrUGlubmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NvbXBsZXRlZFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC50b2dnbGVUYXNrRE9NQ29tcGxldGUodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuY2hhbmdlUGluQnV0dG9uSW1hZ2UodGFza0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2hpZnRUYXNrRWxlbWVudFBvc2l0aW9uKHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFza1RvVGFiKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrRHVlRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tOb3RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tQaW5uZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ29tcGxldGVkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvYWRJbkNoZWNrbGlzdFRhc2tPYmplY3RzKHRhYkluZGV4LCB0YWJLZXksIHRhc2tJbmRleCwgdGFza0tleSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluQ2hlY2tsaXN0VGFza09iamVjdHMgPSAodGFiSW5kZXgsIHRhYktleSwgdGFza0luZGV4LCB0YXNrS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFza09iamVjdCh0YWJJbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdHMgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0Q2hlY2tsaXN0VGFza09iamVjdHModGFiSW5kZXgsIHRhc2tJbmRleCk7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2tsaXN0VGFza0tleSBpbiBjaGVja2xpc3RUYXNrT2JqZWN0cykge1xuICAgICAgICAgICAgaWYgKGNoZWNrbGlzdFRhc2tPYmplY3RzW2NoZWNrbGlzdFRhc2tLZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGFza09iamVjdC5hZGRUYXNrKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tWYWx1ZXMgPSB0b2RvTGlzdFN0b3JhZ2UuZ2V0Q2hlY2tsaXN0VGFza1ZhbHVlcyh0YWJLZXksIHRhc2tLZXksIGNoZWNrbGlzdFRhc2tLZXkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tWYWx1ZXNbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0NvbXBsZXRlZCA9IGNoZWNrbGlzdFRhc2tWYWx1ZXNbMV07XG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tJbmRleCA9IGFkZExvYWRlZEluQ2hlY2tsaXN0VGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24sIGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tsaXN0VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayh0YWJJbmRleCwgdGFza0luZGV4LCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24sIGNoZWNrbGlzdFRhc2tDb21wbGV0ZWQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluSW5pdGlhbExpc3RlbmVycyA9ICgpID0+IHtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGROZXdUYWJMaXN0ZW5lcigpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZE5ld1Rhc2tMaXN0ZW5lcigpO1xuICAgIH07XG4gICAgY29uc3QgbG9hZEluUGFnZSA9ICgpID0+IHtcbiAgICAgICAgbG9hZEluSW5pdGlhbExpc3RlbmVycygpO1xuICAgICAgICBpZiAodG9kb0xpc3RTdG9yYWdlLmNoZWNrRm9yRXhpc3RpbmdTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgIGxvYWRJbkxvY2FsU3RvcmFnZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9kb0xpc3RTdG9yYWdlLmluaXRpYWxpemVUb2RvTGlzdCgpOztcbiAgICAgICAgICAgIGxvYWRJbkluc3RydWN0aW9uc1BhZ2UoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFRhYixcbiAgICAgICAgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LFxuICAgICAgICB1cGRhdGVUYWIsXG4gICAgICAgIHN3aXRjaFRhYixcbiAgICAgICAgcmVtb3ZlVGFiLFxuICAgICAgICBhZGRUYWJMaXN0ZW5lcnMsXG4gICAgICAgIGFkZFRhc2ssXG4gICAgICAgIGluc2VydFRhc2tJbnB1dEVsZW1lbnQsXG4gICAgICAgIHVwZGF0ZVRhc2ssXG4gICAgICAgIHRvZ2dsZVRhc2tQaW4sXG4gICAgICAgIHRvZ2dsZVRhc2tDb21wbGV0ZSxcbiAgICAgICAgcmVtb3ZlVGFzayxcbiAgICAgICAgYWRkVGFza0xpc3RlbmVycyxcbiAgICAgICAgYWRkTmV3Q2hlY2tsaXN0VGFzayxcbiAgICAgICAgaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCxcbiAgICAgICAgdXBkYXRlQ2hlY2tsaXN0VGFzayxcbiAgICAgICAgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlLFxuICAgICAgICByZW1vdmVDaGVja2xpc3RUYXNrLFxuICAgICAgICBhZGRDaGVja2xpc3RUYXNrTGlzdGVuZXJzLFxuICAgICAgICB0b2dnbGVEaXNwbGF5VGFza0RldGFpbHMsXG4gICAgICAgIGxvYWRJbkluc3RydWN0aW9uc1BhZ2UsXG4gICAgICAgIGxvYWRJbkxvY2FsU3RvcmFnZSxcbiAgICAgICAgbG9hZEluVGFiT2JqZWN0cyxcbiAgICAgICAgbG9hZEluSW5pdGlhbExpc3RlbmVycyxcbiAgICAgICAgbG9hZEluUGFnZSxcbiAgICB9O1xufSkoKTtcblxuZXhwb3J0IHsgZXZlbnRCdW5kbGVyIH07IiwiaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuXG5ldmVudEJ1bmRsZXIubG9hZEluUGFnZSgpOyJdLCJuYW1lcyI6WyJldmVudEFzc2lnbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50QnVuZGxlciIsImFkZFRhYiIsInNjb3BlIiwidGFiRWRpdEJ1dHRvbnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwiaW5zZXJ0VGFiSW5wdXRFbGVtZW50IiwiaW5wdXRFbGVtZW50IiwidXBkYXRlVGFiIiwidGFiUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhYiIsInRhYlN3aXRjaEJ1dHRvbnMiLCJzd2l0Y2hUYWIiLCJhZGRUYXNrIiwidGFza0VkaXRCdXR0b25zIiwiaW5zZXJ0VGFza0lucHV0RWxlbWVudCIsInVwZGF0ZVRhc2siLCJ0YXNrUGluQnV0dG9ucyIsInRvZ2dsZVRhc2tQaW4iLCJ0YXNrQ29tcGxldGVDaGVja2JveGVzIiwiY2hlY2tib3giLCJ0b2dnbGVUYXNrQ29tcGxldGUiLCJ0YXNrUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhc2siLCJuZXdDaGVja2xpc3RUYXNrQnV0dG9ucyIsImFkZE5ld0NoZWNrbGlzdFRhc2siLCJjaGVja2xpc3RFZGl0QnV0dG9ucyIsImluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQiLCJ1cGRhdGVDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzIiwidG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlIiwiY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMiLCJyZW1vdmVDaGVja2xpc3RUYXNrIiwidGFza1RvZ2dsZURpc3BsYXlCdXR0b25zIiwidG9nZ2xlRGlzcGxheVRhc2tEZXRhaWxzIiwiY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQiLCJvYmplY3QiLCJjaGVja2xpc3QiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXNrIiwicHVzaCIsImxlbmd0aCIsImluZGV4IiwidW5kZWZpbmVkIiwiZ2V0Q2hlY2tsaXN0VGFza3MiLCJnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2siLCJ0b0RvTGlzdCIsImN1cnJlbnRUYWIiLCJnZXRDdXJyZW50VGFiSW5kZXgiLCJzZXRDdXJyZW50VGFiSW5kZXgiLCJuZXdDdXJyZW50VGFiIiwiTnVtYmVyIiwiZ2V0Q3VycmVudFRhYk9iamVjdCIsImN1cnJlbnRUYWJJbmRleCIsInRpdGxlQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsVGl0bGUiLCJ0aXRsZSIsImdldFRhc2tUaXRsZSIsInNldFRhc2tUaXRsZSIsIm5ld1RpdGxlIiwiaGVscGVyRnVuY3Rpb25zIiwiZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQiLCJldmVudCIsInRhYkVsZW1lbnQiLCJ0YXJnZXQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiZW5zdXJlQ29ycmVjdFRhc2tTdWJjb250YWluZXJFbGVtZW50IiwidGFza1N1YmNvbnRhaW5lckVsZW1lbnQiLCJjbGFzc0xpc3QiLCJpbmNsdWRlcyIsImVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCIsImNoZWNrbGlzdFRhc2tFbGVtZW50IiwiZ2V0VGFza0VsZW1lbnQiLCJ0YXNrSW5kZXgiLCJnZXRUYWJPYmplY3QiLCJ0YWJJbmRleCIsImdldFRhc2tPYmplY3QiLCJjaGVja0lmV2FzQ3VycmVudFRhYiIsImNoZWNrSWZPbmx5T25lVGFiIiwidG9Eb1RhYlNlY3Rpb24iLCJnZXRUYXNrSW5kZXgiLCJ0YXNrRWxlbWVudCIsImVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCIsImRhdGFzZXQiLCJnZXRDaGVja2xpc3RUYXNrSW5kZXgiLCJjaGVja2xpc3RUYXNrSW5kZXgiLCJnZXRUYWJJbmRleCIsImdldE5ld1ZhbHVlIiwidmFsdWUiLCJnZXRUYXNrU3ViY29udGFpbmVyVHlwZSIsInRhc2tTdWJjb250YWluZXJFbGVtZW50Q2xhc3NlcyIsInRhc2tTdWJjb250YWluZXJUeXBlIiwiZ2V0VGFza1N1YmNvbnRhaW5lckVsZW1lbnQiLCJidXR0b25UeXBlIiwiZ2V0Q2hlY2tsaXN0VGFza0VsZW1lbnQiLCJnZXRUYWJFbGVtZW50IiwiY2hlY2tGb3JFeGlzdGluZ0lucHV0RWxlbWVudCIsImVsZW1lbnRUeXBlIiwidHJ5aW5nVG9Eb3VibGVDbGljayIsImdldENoZWNrbGlzdFRhc2tPYmplY3QiLCJjaGVja0lmTm9Nb3JlVGFicyIsImRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImdldFRhc2tEZXNjcmlwdGlvbiIsInNldFRhc2tEZXNjcmlwdGlvbiIsIm5ld0Rlc2NyaXB0aW9uIiwiY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsQ29tcGxldGVkU3RhdGUiLCJjb21wbGV0ZWQiLCJ0b2dnbGVDb21wbGV0ZWRTdGF0ZSIsImdldENvbXBsZXRlZFN0YXRlIiwib2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QiLCJ0YWJOYW1lIiwibmV3VGFiIiwidG9Eb1RhYiIsIm5ld1RhYk5hbWUiLCJ0YWJBcnJheSIsImZpcnN0VGFiIiwidGFiIiwiZHVlRGF0ZSIsIm5vdGVzIiwicGlubmVkIiwidGFiT2JqZWN0IiwibmV3VGFzayIsImluaXRpYWxEdWVEYXRlIiwiZ2V0VGFza0R1ZURhdGUiLCJzZXRUYXNrRHVlRGF0ZSIsIm5ld0R1ZURhdGUiLCJkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsTm90ZXMiLCJnZXRUYXNrTm90ZXMiLCJzZXRUYXNrTm90ZXMiLCJuZXdOb3RlcyIsIm5vdGVzQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsUGlubmVkU3RhdGUiLCJ0b2dnbGVQaW5uZWRTdGF0ZSIsImdldFBpbm5lZFN0YXRlIiwicGlubmVkQmVoYXZpb3JDb21wb25lbnQiLCJ0b0RvVGFzayIsIm5ld1Rhc2tTdWJjb250ZW50VmFsdWUiLCJ0YXNrT2JqZWN0IiwibmV3Q2hlY2tsaXN0VGFzayIsImNoZWNrbGlzdFRhc2tPYmplY3QiLCJuZXdEZXNjcmlwdGlvblZhbHVlIiwiRE9NQ29udHJvbGxlckFkZEVkaXQiLCJhZGROZXdUYXNrVG9ET00iLCJuZXdUYXNrT2JqZWN0IiwidG9Eb0NvbnRlbnQiLCJuZXdUYXNrRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGQiLCJuZXdUYXNrVGl0bGUiLCJuZXdUYXNrRGVzY3JpcHRpb24iLCJuZXdUYXNrRHVlRGF0ZSIsIm5ld1Rhc2tOb3RlcyIsIm5ld1Rhc2tDb21wbGV0ZUlEIiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZVRhc2tET01Db21wbGV0ZSIsImNvbXBsZXRlQ2hlY2tib3giLCJjaGVja2VkIiwicmVtb3ZlIiwiYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NIiwibmV3Q2hlY2tsaXN0VGFza0luZGV4IiwiY2hlY2tsaXN0RWxlbWVudCIsIm5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiIsIm5ld0NoZWNrbGlzdFRhc2tFbGVtZW50IiwidG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlIiwiY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveCIsInNldFBpbkJ1dHRvbkltYWdlIiwiY3VycmVudFRhYk9iamVjdCIsImN1cnJlbnRUYXNrSW5kZXgiLCJjdXJyZW50VGFza09iamVjdCIsInBpbkJ1dHRvbkltYWdlIiwicmVhcnJhbmdlUGlubmVkVGFza3NQb3NpdGlvbiIsInRhc2tDb250ZW50U2VjdGlvbiIsImxpc3RPZlBpbm5lZFRhc2tFbGVtZW50cyIsImluc2VydEJlZm9yZSIsImZpcnN0RWxlbWVudENoaWxkIiwibGFzdFBpbm5lZFRhc2tFbGVtZW50IiwicGlubmVkVGFza0VsZW1lbnQiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJhZGROZXdUYWJUb0RPTSIsImFkZFRhYkJ1dHRvbiIsIm5ld1RhYkVsZW1lbnQiLCJuZXdUYWJPYmplY3RUaXRsZSIsInNldFRhYklucHV0RWxlbWVudFZhbHVlIiwiZmlyc3RDaGlsZCIsImZvY3VzIiwiaW5zZXJ0VGFiTmFtZUVsZW1lbnQiLCJ0YWJCdXR0b24iLCJ0YWJCdXR0b25OYW1lIiwiYWRkQ3VycmVudFRhYkluZGljYXRvciIsInRhc2tTdWJjb250YWluZXIiLCJzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUiLCJ0YXNrT2JqZWN0VmFsdWUiLCJpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQiLCJ0YXNrU3ViY29udGVudEVsZW1lbnQiLCJ0YXNrVGl0bGUiLCJ0YXNrRHVlRGF0ZSIsInRhc2tEZXNjcmlwdGlvbiIsInRhc2tOb3RlcyIsImNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiIsInNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSIsImNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiIsImluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQiLCJjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50IiwiY2hhbmdlUGluQnV0dG9uSW1hZ2UiLCJzaGlmdFRhc2tFbGVtZW50UG9zaXRpb24iLCJ0YXNrRWxlbWVudEluZGV4IiwibGlzdE9mVW5waW5uZWRUYXNrRWxlbWVudHMiLCJsYXN0VW5waW5uZWRUYXNrRWxlbWVudCIsInVucGlubmVkVGFza0VsZW1lbnQiLCJsb2FkVGFza3NGcm9tTmV3Q3VycmVudFRhYiIsImxpc3RPZlRhc2tzIiwiYWRkVGFza0xpc3RlbmVycyIsImxpc3RPZkNoZWNrbGlzdFRhc2tzIiwiYWRkQ2hlY2tsaXN0VGFza0xpc3RlbmVycyIsImZvckVhY2giLCJlbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5Iiwic2V0VGltZW91dCIsInByZXZlbnREb3VibGVDbGljayIsInJvdGF0ZUNoZXZyb25CdXR0b24iLCJidXR0b25JbWFnZSIsImJ1dHRvbkltYWdlQ2xhc3NlcyIsInRvZ2dsZUFuaW1hdGlvbnMiLCJhY3Rpb24iLCJlbGVtZW50c1RvVG9nZ2xlIiwiRE9NQ29udHJvbGxlclJlbW92ZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQXR0cmlidXRlIiwicmVwbGFjZUNoaWxkcmVuIiwib2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCIsInRvZG9MaXN0U3RvcmFnZSIsImxvYWRpbmdJbkNvbnRlbnQiLCJnZXRMb2NhbFN0b3JhZ2VWYWx1ZSIsInRvZG9MaXN0SlNPTlN0cmluZyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJ1cGRhdGVMb2NhbFN0b3JhZ2VWYWx1ZSIsIm5ld1ZhbHVlIiwidXBkYXRlZEpTT05TdHJpbmdWYWx1ZSIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJ0b2RvTGlzdFBhcnNlZE9iamVjdCIsInRhYkpTT05TdHJpbmciLCJ0YWJQYXJzZWRPYmplY3QiLCJzZXRDdXJyZW50VGFiIiwic2V0VGFiTmFtZSIsImdldFRhYlRpdGxlIiwidGFiS2V5IiwiZ2V0VGFiT2JqZWN0cyIsInRhc2tKU09OU3RyaW5nIiwidGFza1BhcnNlZE9iamVjdCIsInNldFRhc2tTdWJjb250YWluZXJWYWx1ZSIsInN1YmNvbnRhaW5lclR5cGUiLCJ0b2dnbGVUYXNrUGlubmVkIiwidG9nZ2xlVGFza0NvbXBsZXRlZCIsImdldFRhc2tWYWx1ZXMiLCJ0YXNrS2V5IiwidGFza1ZhbHVlcyIsInRhc2tQaW5uZWQiLCJ0YXNrQ29tcGxldGVkIiwiZ2V0VGFza09iamVjdHMiLCJhZGRDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0VGFza0pTT05TdHJpbmciLCJjaGVja2xpc3RUYXNrUGFyc2VkT2JqZWN0Iiwic2V0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uIiwidG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlZCIsImdldENoZWNrbGlzdFRhc2tWYWx1ZXMiLCJjaGVja2xpc3RUYXNrS2V5IiwiY2hlY2tsaXN0VGFza1ZhbHVlcyIsImNoZWNrbGlzdFRhc2tDb21wbGV0ZWQiLCJnZXRDaGVja2xpc3RUYXNrT2JqZWN0cyIsImNoZWNrRm9yRXhpc3RpbmdTdG9yYWdlIiwiaW5pdGlhbGl6ZVRvZG9MaXN0IiwidG9nZ2xlTG9hZGluZyIsImlzTG9hZGluZyIsIm5ld1RhYkluZGV4IiwiYWRkVGFiTGlzdGVuZXJzIiwiZmlyc3RUYWJJbmRleCIsImxvYWRJbkluc3RydWN0aW9uc1BhZ2UiLCJuZXdUYXNrSW5kZXgiLCJhZGRMb2FkZWRJbkNoZWNrbGlzdFRhc2siLCJsb2FkSW5Mb2NhbFN0b3JhZ2UiLCJsb2FkSW5DdXJyZW50VGFiSW5kZXgiLCJsb2FkSW5UYWJPYmplY3RzIiwidGFiT2JqZWN0cyIsInRhYlRpdGxlIiwibG9hZEluVGFza09iamVjdHMiLCJ0YXNrT2JqZWN0cyIsImxvYWRJbkNoZWNrbGlzdFRhc2tPYmplY3RzIiwiY2hlY2tsaXN0VGFza09iamVjdHMiLCJsb2FkSW5Jbml0aWFsTGlzdGVuZXJzIiwiY29kZSIsImxvYWRJblBhZ2UiXSwic291cmNlUm9vdCI6IiJ9
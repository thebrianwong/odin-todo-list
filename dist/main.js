(()=>{"use strict";const t=(t,e)=>{let n=e;return Object.assign(t,{getTaskTitle:()=>n,setTaskTitle(t){n=t}})},e=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},n=(n,s,o,a)=>{let c={};return Object.assign(c,t(c,n),((t,e)=>{let n=e;return Object.assign(t,{getTaskDescription:()=>n,setTaskDescription(t){n=t}})})(c,o),((t,e)=>{let n=e;return Object.assign(t,{getTaskDueDate:()=>n,setTaskDueDate(t){n=t}})})(c,s),((t,e)=>{let n=e;return Object.assign(t,{getTaskNotes:()=>n,setTaskNotes(t){n=t}})})(c,a),(t=>{let e=!1;return Object.assign(t,{togglePinnedState(){e=!e},getPinnedState:()=>e})})(c),(t=>{let e=!1;return Object.assign(t,{toggleCompletedState(){e=!e},getCompletedState:()=>e})})(c),e(c)),c},s=n=>{let s={};return Object.assign(s,t(s,n),e(s)),s},o=(()=>{let t=0,n={getCurrentTabIndex:()=>t,setCurrentTabIndex:e=>{t=e}};return Object.assign(n,e(n)),n})(),a=(()=>{const t=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e};return{ensureCorrectTabElement:t,checkForTabInputElement:e=>"INPUT"===t(e).firstElementChild.tagName,checkIfWasCurrentTab:e=>"current-tab"===t(e).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:t=>{let e=t.target.parentElement;for(;"to-do-task"!==e.getAttribute("class");)e=e.parentElement;return e}}})(),c=()=>{const t=s("New Tab");return o.addTask(t)},r=t=>{const e=t.target.parentElement.dataset.tabIndex;o.getSpecificChecklistTask(e).setTaskTitle(t.target.value)},l=t=>{const e=a.ensureCorrectTabElement(t).dataset.tabIndex;o.setCurrentTabIndex(e)},i=()=>{const t=o.getChecklistTasks();let e;for(const n in t)if(void 0!==t[n])return o.setCurrentTabIndex(n),e=n,e},d=()=>{const t=o.getCurrentTabIndex(),e=o.getSpecificChecklistTask(t),s=n("New Task","Task Due Date","Task Description","Task Notes");return e.addTask(s)},u=t=>{const e=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),a=o.getSpecificChecklistTask(t).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=t,s.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',s.querySelector(".tab-name").textContent=a,n.insertBefore(s,e),s},b=(t,e)=>{const n=a.ensureCorrectTabElement(t).dataset.tabIndex,s=o.getSpecificChecklistTask(n).getTaskTitle();e.value=s},k=t=>{const e=a.ensureCorrectTabElement(t),n=document.createElement("input");return n.classList.add("tab-name-input"),n.setAttribute("type","text"),e.insertBefore(n,e.firstChild),n.focus(),n},T=t=>{const e=a.ensureCorrectTabElement(t),n=e.dataset.tabIndex,s=o.getSpecificChecklistTask(n).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const r=document.createElement("h2");r.textContent=s,c.appendChild(r),e.insertBefore(c,e.firstChild)},m=t=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${t}']`).setAttribute("id","current-tab")},g=t=>{a.ensureCorrectTabElement(t).setAttribute("id","current-tab")},p=t=>{void 0!==t&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${t}']`).setAttribute("id","current-tab")},C=t=>{const e=o.getCurrentTabIndex(),n=o.getSpecificChecklistTask(e).getSpecificChecklistTask(t),s=document.querySelector(".to-do-content"),a=document.createElement("div");a.classList.add("to-do-task"),a.dataset.taskIndex=t;const c=n.getTaskTitle(),r=n.getTaskDescription(),l=n.getTaskDueDate(),i=n.getTaskNotes();return a.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-task-overview-top">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-outline.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-title">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-overview-middle">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-task-overview-bottom">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-due-date">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-description">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-notes">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <form action="" class="task-checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </form>\n        ',a.querySelector(".to-do-title").textContent=c,a.querySelector(".to-do-due-date").textContent=l,a.querySelector(".to-do-description").textContent=r,a.querySelector(".to-do-notes").textContent=i,s.appendChild(a),a},v=()=>{document.querySelector(".add-tab").addEventListener("click",R.addTab)},E=()=>{const t=Array.from(document.querySelectorAll(".edit-tab"));for(const e of t)e.addEventListener("click",R.insertTabInputElement)},h=t=>{t.addEventListener("keydown",R.updateTab)},f=t=>{t.querySelector(".edit-tab").addEventListener("click",R.insertTabInputElement)},S=()=>{const t=Array.from(document.querySelectorAll(".remove-tab"));for(const e of t)e.addEventListener("click",R.removeTab)},y=t=>{t.querySelector(".remove-tab").addEventListener("click",R.removeTab)},x=()=>{const t=Array.from(document.querySelectorAll(".switch-tab"));for(const e of t)e.addEventListener("click",R.switchTab)},I=t=>{t.querySelector(".switch-tab").addEventListener("click",R.switchTab)},q=()=>{document.querySelector(".new-to-do-task").addEventListener("click",R.newTask)},A=()=>{const t=Array.from(document.querySelectorAll(".to-do-remove-task"));for(const e of t)e.addEventListener("click",R.removeTask)},L=t=>{const e=a.ensureCorrectTabElement(t).dataset.tabIndex;o.removeTask(e)},D=t=>{const e=a.ensureCorrectTaskElement(t).dataset.taskIndex,n=o.getCurrentTabIndex();o.getSpecificChecklistTask(n).removeTask(e)},O=t=>{const e=a.ensureCorrectTabElement(t);let n=e.querySelector(".switch-tab");e.removeChild(n),n=null},w=t=>{const e=a.ensureCorrectTabElement(t);let n=e.querySelector("input");e.removeChild(n),n=null},N=t=>{let e=a.ensureCorrectTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},j=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},P=t=>{let e=a.ensureCorrectTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},R={addTab:()=>{const t=c(),e=u(t);if(f(e),y(e),I(e),a.checkIfOnlyOneTab()){const t=i();p(t)}},insertTabInputElement:t=>{if(!a.checkForTabInputElement(t)){const e=k(t);O(t),b(t,e),h(e)}},updateTab:t=>{"Enter"===t.code&&(r(t),T(t),w(t))},removeTab:t=>{if(L(t),N(t),a.checkIfWasCurrentTab(t)){const t=i();p(t)}},switchTab:t=>{l(t),j(),g(t)},newTask:()=>{const t=d();C(t)},removeTask:t=>{D(t),P(t)}};let H=s("Default test");o.addTask(H);let M=n("Make Money TEST","Task Due Date","Task Description","Task Notes");console.log(H.addTask(M)),v(),E(),S(),console.log(o),console.log(o.getChecklistTasks()),console.log(o.getCurrentTabIndex()),console.log(H.getChecklistTasks()),console.log(H.getSpecificChecklistTask(0)),console.log(H.getSpecificChecklistTask(0).getTaskTitle()),m(0),x(),q(),A()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},t=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},s=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},n=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},c=(c,o,a,r)=>{let l={};return Object.assign(l,e(l,c),t(l,a),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(l,o),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(l,r),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(l),s(l),n(l)),l},o=e=>{let n={};return Object.assign(n,t(n,e),s(n)),n},a=t=>{let s={};return Object.assign(s,e(s,t),n(s)),s},r=(()=>{let e=0,t={getCurrentTabIndex:()=>e,setCurrentTabIndex:t=>{e=t}};return Object.assign(t,n(t)),t})(),l=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement;for(;"to-do-task"!==t.getAttribute("class");)t=t.parentElement;return t},s=e=>{let t=e.target.parentElement,s=Array.from(t.classList);for(;!s.includes("to-do-task-subcontainer");)t=t.parentElement,s=Array.from(t.classList);return t},n=e=>{const s=t(e).dataset.taskIndex,n=r.getCurrentTabIndex();return r.getSpecificChecklistTask(n).getSpecificChecklistTask(s)},c=e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t},o=e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist-task");)t=t.parentElement,s=Array.from(t.classList);return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:t,ensureCorrectSubcontainer:s,checkForTaskSubcontainerInputElement:e=>"INPUT"===s(e).firstElementChild.tagName,getTargetTaskObject:n,ensureCorrectButtonElement:c,getButtonType:e=>{const t=c(e);return Array.from(t.classList)},getSubcontainerType:e=>{const t=s(e);return Array.from(t.classList)},ensureCorrectChecklistElement:e=>{let t=e.target,s=Array.from(t.classList);for(;!s.includes("checklist");)t=t.parentElement,s=Array.from(t.classList);return t},ensureCorrectChecklistTaskElement:o,checkForChecklistTaskInputElement:e=>null!==o(e).querySelector(".checklist-complete-section").querySelector(".checklist-input"),getTargetChecklistTaskObject:e=>{const t=n(e),s=o(e).dataset.checklistTaskIndex;return t.getSpecificChecklistTask(s)}}})(),i=()=>{const e=a("New Tab");return r.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;r.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},u=e=>{const t=l.ensureCorrectTabElement(e).dataset.tabIndex;r.setCurrentTabIndex(t)},k=()=>{const e=r.getChecklistTasks();let t;for(const s in e)if(void 0!==e[s])return r.setCurrentTabIndex(s),t=s,t},T=()=>{const e=r.getCurrentTabIndex(),t=r.getSpecificChecklistTask(e),s=c("New Task","Task Due Date","Task Description","Task Notes");return t.addTask(s)},m=e=>{const t=l.getTargetTaskObject(e),s=e.target.value,n=l.getSubcontainerType(e);return n.includes("to-do-title-section")?t.setTaskTitle(s):n.includes("to-do-due-date-section")?t.setTaskDueDate(s):n.includes("to-do-description-section")?t.setTaskDescription(s):n.includes("to-do-notes-section")?t.setTaskNotes(s):void 0},b=e=>{l.getTargetTaskObject(e).toggleCompletedState()},g=e=>{const t=l.getTargetTaskObject(e),s=o("Checklist Task Description");return t.addTask(s)},p=e=>{const t=l.getTargetChecklistTaskObject(e),s=e.target.value;t.setTaskDescription(s)},h=e=>{l.getTargetChecklistTaskObject(e).toggleCompletedState()},C=e=>{const t=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),n=document.createElement("div"),c=r.getSpecificChecklistTask(e).getTaskTitle();return n.classList.add("tab-title"),n.dataset.tabIndex=e,n.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',n.querySelector(".tab-name").textContent=c,s.insertBefore(n,t),n},E=(e,t)=>{const s=l.ensureCorrectTabElement(e).dataset.tabIndex,n=r.getSpecificChecklistTask(s).getTaskTitle();t.value=n},f=e=>{const t=l.ensureCorrectTabElement(e),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},S=e=>{const t=l.ensureCorrectTabElement(e),s=t.dataset.tabIndex,n=r.getSpecificChecklistTask(s).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const o=document.createElement("h2");o.textContent=n,c.appendChild(o),t.insertBefore(c,t.firstChild)},v=e=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},y=e=>{l.ensureCorrectTabElement(e).setAttribute("id","current-tab")},L=e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},x=e=>{const t=r.getCurrentTabIndex(),s=r.getSpecificChecklistTask(t).getSpecificChecklistTask(e),n=document.querySelector(".to-do-content"),c=document.createElement("div");c.classList.add("to-do-task"),c.dataset.taskIndex=e;const o=s.getTaskTitle(),a=s.getTaskDescription(),l=s.getTaskDueDate(),i=s.getTaskNotes();return c.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-outline.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',c.querySelector(".to-do-title").textContent=o,c.querySelector(".to-do-due-date").textContent=l,c.querySelector(".to-do-description").textContent=a,c.querySelector(".to-do-notes").textContent=i,n.appendChild(c),c},q=e=>{const t=l.ensureCorrectSubcontainer(e),s=document.createElement("input");return s.classList.add("task-input"),s.setAttribute("type","text"),t.insertBefore(s,t.firstChild),s.focus(),s},I=(e,t)=>{const s=l.getTargetTaskObject(e),n=l.getButtonType(e);let c;n.includes("edit-task-title")?c=s.getTaskTitle():n.includes("edit-task-due-date")?c=s.getTaskDueDate():n.includes("edit-task-description")?c=s.getTaskDescription():n.includes("edit-task-notes")&&(c=s.getTaskNotes()),t.value=c},A=e=>{const t=l.ensureCorrectSubcontainer(e),s=l.getTargetTaskObject(e),n=l.getSubcontainerType(e);let c;if(n.includes("to-do-title-section")){const e=s.getTaskTitle();c=document.createElement("h3"),c.classList.add("to-do-title"),c.textContent=e}else if(n.includes("to-do-due-date-section")){const e=s.getTaskDueDate();c=document.createElement("p"),c.classList.add("to-do-due-date"),c.textContent=e}else if(n.includes("to-do-description-section")){const e=s.getTaskDescription();c=document.createElement("p"),c.classList.add("to-do-description"),c.textContent=e}else if(n.includes("to-do-notes-section")){const e=s.getTaskNotes();c=document.createElement("p"),c.classList.add("to-do-notes"),c.textContent=e}t.insertBefore(c,t.firstChild)},D=e=>{const t=l.ensureCorrectTaskElement(e).querySelector(".to-do-complete-checkbox"),s=l.getTargetTaskObject(e).getCompletedState();t.checked=!!s},O=(e,t)=>{const s=l.ensureCorrectChecklistElement(e),n=l.ensureCorrectTaskElement(e).dataset.taskIndex,c=l.getTargetTaskObject(e).getSpecificChecklistTask(t),o=c.getTaskDescription(),a=c.getCompletedState(),r=document.createElement("div");r.classList.add("checklist-task"),r.dataset.checklistTaskIndex=t,r.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${n}-${t}" class="checklist-complete-checkbox">\n                <label for="checklist-${n}-${t}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,r.querySelector(".checklist-task-description").textContent=o;return r.querySelector(`#checklist-${n}-${t}`).checked=!!a,s.appendChild(r),r},j=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section"),s=document.createElement("input");return s.classList.add("checklist-input"),s.setAttribute("type","text"),t.appendChild(s),s.focus(),s},N=(e,t)=>{const s=l.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex,n=l.getTargetTaskObject(e).getSpecificChecklistTask(s).getTaskDescription();t.value=n},w=e=>{const t=l.ensureCorrectChecklistTaskElement(e),s=t.dataset.checklistTaskIndex,n=t.querySelector(".checklist-complete-section"),c=l.ensureCorrectTaskElement(e).dataset.taskIndex,o=l.getTargetChecklistTaskObject(e).getTaskDescription(),a=document.createElement("label");a.setAttribute("for",`checklist-${c}-${s}`),a.classList.add("checklist-task-description"),a.textContent=o,n.appendChild(a)},P=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),s=l.getTargetChecklistTaskObject(e);t.checked=s.getCompletedState()},B=()=>{document.querySelector(".add-tab").addEventListener("click",pe.addTab)},R=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",pe.insertTabInputElement)},$=e=>{e.addEventListener("keydown",pe.updateTab)},H=e=>{e.querySelector(".edit-tab").addEventListener("click",pe.insertTabInputElement)},F=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",pe.removeTab)},M=e=>{e.querySelector(".remove-tab").addEventListener("click",pe.removeTab)},U=()=>{const e=Array.from(document.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",pe.switchTab)},W=e=>{e.querySelector(".switch-tab").addEventListener("click",pe.switchTab)},z=()=>{document.querySelector(".new-to-do-task").addEventListener("click",pe.newTask)},G=()=>{const e=Array.from(document.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",pe.removeTask)},J=e=>{e.querySelector(".to-do-remove-task").addEventListener("click",pe.removeTask)},K=()=>{const e=Array.from(document.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",pe.insertTaskInputElement)},Q=e=>{e.addEventListener("keydown",pe.updateTask)},V=e=>{const t=Array.from(e.querySelectorAll(".edit-task"));for(const e of t)e.addEventListener("click",pe.insertTaskInputElement)},X=()=>{const e=document.querySelectorAll(".to-do-complete-checkbox");for(const t of e)t.addEventListener("click",pe.toggleTaskComplete)},Y=e=>{e.querySelector(".to-do-complete-checkbox").addEventListener("click",pe.toggleTaskComplete)},Z=()=>{const e=document.querySelectorAll(".add-checklist-task");for(const t of e)t.addEventListener("click",pe.addNewChecklistTask)},_=e=>{e.querySelector(".add-checklist-task").addEventListener("click",pe.addNewChecklistTask)},ee=(e=document)=>{const t=Array.from(e.querySelectorAll(".edit-checklist-task"));for(const e of t)e.addEventListener("click",pe.insertChecklistTaskInputElement)},te=e=>{e.addEventListener("keydown",pe.updateChecklistTask)},se=(e=document)=>{const t=e.querySelectorAll(".checklist-complete-checkbox");for(const e of t)e.addEventListener("click",pe.toggleChecklistTaskComplete)},ne=(e=document)=>{const t=e.querySelectorAll(".remove-checklist-task");for(const e of t)e.addEventListener("click",pe.removeChecklistTask)},ce=e=>{const t=l.ensureCorrectTabElement(e).dataset.tabIndex;r.removeTask(t)},oe=e=>{const t=l.ensureCorrectTaskElement(e).dataset.taskIndex,s=r.getCurrentTabIndex();r.getSpecificChecklistTask(s).removeTask(t)},ae=e=>{const t=l.ensureCorrectChecklistTaskElement(e).dataset.checklistTaskIndex;l.getTargetTaskObject(e).removeTask(t)},re=e=>{const t=l.ensureCorrectTabElement(e);let s=t.querySelector(".switch-tab");t.removeChild(s),s=null},le=e=>{const t=l.ensureCorrectTabElement(e);let s=t.querySelector("input");t.removeChild(s),s=null},ie=e=>{let t=l.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},de=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},ue=e=>{let t=l.ensureCorrectTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},ke=e=>{const t=l.ensureCorrectSubcontainer(e);let s=t.firstElementChild;t.removeChild(s),s=null},Te=e=>{const t=l.ensureCorrectSubcontainer(e);let s=t.querySelector("input");t.removeChild(s),s=null},me=e=>{const t=l.ensureCorrectButtonElement(e).previousElementSibling;let s=t.querySelector("label");t.removeChild(s),s=null},be=e=>{const t=l.ensureCorrectChecklistTaskElement(e).querySelector(".checklist-complete-section");let s=t.querySelector(".checklist-input");t.removeChild(s),s=null},ge=e=>{let t=l.ensureCorrectChecklistTaskElement(e);l.ensureCorrectChecklistElement(e).removeChild(t),t=null},pe={addTab:()=>{const e=i(),t=C(e);if(H(t),M(t),W(t),l.checkIfOnlyOneTab()){const e=k();L(e)}},insertTabInputElement:e=>{if(!l.checkForTabInputElement(e)){const t=f(e);re(e),E(e,t),$(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),S(e),le(e))},removeTab:e=>{if(ce(e),ie(e),l.checkIfWasCurrentTab(e)){const e=k();L(e)}},switchTab:e=>{u(e),de(),y(e)},newTask:()=>{const e=T(),t=x(e);J(t),V(t),Y(t),_(t)},removeTask:e=>{oe(e),ue(e)},insertTaskInputElement:e=>{if(!l.checkForTaskSubcontainerInputElement(e)){ke(e);const t=q(e);I(e,t),Q(t)}},updateTask:e=>{"Enter"===e.code&&(m(e),A(e),Te(e))},toggleTaskComplete:e=>{b(e),D(e)},addNewChecklistTask:e=>{const t=g(e),s=O(e,t);ee(s),se(s),ne(s)},insertChecklistTaskInputElement:e=>{if(!l.checkForChecklistTaskInputElement(e)){me(e);const t=j(e);N(e,t),te(t)}},updateChecklistTask:e=>{"Enter"===e.code&&(p(e),w(e),be(e))},toggleChecklistTaskComplete:e=>{h(e),P(e)},removeChecklistTask:e=>{ae(e),ge(e)}};let he=a("Default test");r.addTask(he);let Ce=c("Make Money TEST","Task Due Date","Task Description","Task Notes");console.log(he.addTask(Ce)),B(),R(),F(),console.log(r),console.log(r.getChecklistTasks()),console.log(r.getCurrentTabIndex()),console.log(he.getChecklistTasks()),console.log(he.getSpecificChecklistTask(0)),console.log(he.getSpecificChecklistTask(0).getTaskTitle()),v(0),U(),z(),G(),K(),X(),Z(),ee();let Ee=o("Checklist Task Description TEST");Ce.addTask(Ee),se(),ne()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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X2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2Rlc2NyaXB0aW9uX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2NvbXBsZXRlZF9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX3Rhc2tfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZHVlX2RhdGVfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvbm90ZXNfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2NoZWNrbGlzdF90YXNrX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fdGFiX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL3RvZG9fbGlzdF9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9oZWxwZXJfZnVuY3Rpb25zLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvb2JqZWN0X2NvbnRyb2xsZXJfYWRkX2VkaXRfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9ldmVudF9hc3NpZ25lcl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy9vYmplY3RfY29udHJvbGxlcl9yZW1vdmVfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfcmVtb3ZlLmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvZXZlbnRfYnVuZGxlcl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGl0bGVCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxUaXRsZSkgPT4ge1xuICAgIGxldCB0aXRsZSA9IGluaXRpYWxUaXRsZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza1RpdGxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpdGxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrVGl0bGUobmV3VGl0bGUpIHtcbiAgICAgICAgICAgIHRpdGxlID0gbmV3VGl0bGU7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsRGVzY3JpcHRpb24pID0+IHtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBpbml0aWFsRGVzY3JpcHRpb247XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza0Rlc2NyaXB0aW9uKG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0iLCIvLyBvcmlnaW5hbCB3aGVyZSBhbGwgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBnZXQgcmV0dXJuZWQsIHNvIG5vIHByaXZhdGUgZmllbGRzIChjb21wbGV0ZWQgc2hvdWxkIGJlIHByaXZhdGUpXG4vLyBrZWVwaW5nIGZvciBwb3N0ZXJpdHksIHByb2JhYmx5IHdpbGwgZGVsZXRlZCBhdCB0aGUgZW5kXG4vLyBjb25zdCBjYW5Db21wbGV0ZSA9IChvYmplY3QpID0+ICh7XG4vLyAgICAgY29tcGxldGVkOiBmYWxzZSxcbi8vICAgICB0b2dnbGU6ICgpID0+IHtcbi8vICAgICAgICAgaWYgKG9iamVjdC5jb21wbGV0ZWQpIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSBmYWxzZTtcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIG9iamVjdC5jb21wbGV0ZWQgPSB0cnVlO1xuLy8gICAgICAgICB9O1xuLy8gICAgIH0sXG4vLyAgICAgZ2V0Q29tcGxldGVkU3RhdGU6ICgpID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG9iamVjdC5jb21wbGV0ZWRcbi8vICAgICB9XG4vLyB9KTtcblxuY29uc3QgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0KSA9PiB7XG4gICAgbGV0IGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICB0b2dnbGVDb21wbGV0ZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldENvbXBsZXRlZFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfTsiLCJjb25zdCBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgY2hlY2tsaXN0ID0gW107XG4gICAgY29uc3QgZ2V0VGFza0luZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0Lmxlbmd0aCAtIDE7XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgICAgICBjaGVja2xpc3QucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBjaGVja2xpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHJldHVybiBnZXRUYXNrSW5kZXgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlVGFzayhpbmRleCkge1xuICAgICAgICAgICAgY2hlY2tsaXN0W2luZGV4XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tsaXN0O1xuICAgICAgICB9LFxuICAgICAgICBnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja2xpc3RbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFzayA9ICh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLCBcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgZHVlRGF0ZSksXG4gICAgICAgIG5vdGVzQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBub3RlcyksXG4gICAgICAgIC8vIGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICAgICAgcGlubmVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCB7IHRvRG9UYXNrIH07IiwiY29uc3QgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbER1ZURhdGUpID0+IHtcbiAgICBsZXQgZHVlRGF0ZSA9IGluaXRpYWxEdWVEYXRlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrRHVlRGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBkdWVEYXRlO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrRHVlRGF0ZShuZXdEdWVEYXRlKSB7XG4gICAgICAgICAgICBkdWVEYXRlID0gbmV3RHVlRGF0ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBub3Rlc0JlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCwgaW5pdGlhbE5vdGVzKSA9PiB7XG4gICAgbGV0IG5vdGVzID0gaW5pdGlhbE5vdGVzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICBnZXRUYXNrTm90ZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gbm90ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhc2tOb3RlcyhuZXdOb3Rlcykge1xuICAgICAgICAgICAgbm90ZXMgPSBuZXdOb3RlcztcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IiwiY29uc3QgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0KSA9PiB7XG4gICAgbGV0IHBpbm5lZCA9IGZhbHNlO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iamVjdCwge1xuICAgICAgICB0b2dnbGVQaW5uZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChwaW5uZWQpIHtcbiAgICAgICAgICAgICAgICBwaW5uZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGlubmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBpbm5lZFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBpbm5lZDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgfTsiLCJpbXBvcnQgeyBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbXBsZXRlZF9jb21wb25lbnRcIjtcblxuLy8gb3JpZ2luYWwgd2hlcmUgb2JqZWN0IHdvdWxkIG5lZWQgdG8gaGF2ZSBPYmplY3QuYXNzaWduKCkgZm9yIGV2ZXJ5IGluc3RhbmNlXG4vLyBrZWVwaW5nIGZvciBwb3N0ZXJpdHksIHByb2JhYmx5IHdpbGwgZGVsZXRlZCBhdCB0aGUgZW5kXG4vLyBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gKGRlc2NyaXB0aW9uKSA9PiB7XG4gICAgLy8gY29uc3QgZ2V0VGFza0Rlc2NyaXB0aW9uID0gKCkgPT4ge1xuICAgIC8vICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgLy8gfTtcbiAgICAvLyBjb25zdCBzZXRUYXNrRGVzY3JpcHRpb24gPSAobmV3RGVzY3JpcHRpb24pID0+IHtcbiAgICAvLyAgICAgZGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICAvLyB9O1xuLy8gICAgIHJldHVybiB7IGdldFRhc2tEZXNjcmlwdGlvbiwgc2V0VGFza0Rlc2NyaXB0aW9uIH07XG4vLyB9O1xuXG5jb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gKGRlc2NyaXB0aW9uKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICBkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgZGVzY3JpcHRpb24pLFxuICAgICAgICBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudChvYmplY3QpXG4gICAgKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH07IiwiaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbmNvbnN0IHRvRG9UYWIgPSAodGl0bGUpID0+IHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIHRpdGxlQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCB0aXRsZSksXG4gICAgICAgIGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdClcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5leHBvcnQgeyB0b0RvVGFiIH07IiwiLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbmNvbnN0IHRvRG9MaXN0ID0gKCgpID0+IHtcbiAgICBsZXQgY3VycmVudFRhYiA9IDA7XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYkluZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY3VycmVudFRhYjtcbiAgICB9O1xuICAgIGNvbnN0IHNldEN1cnJlbnRUYWJJbmRleCA9IChuZXdDdXJyZW50VGFiKSA9PiB7XG4gICAgICAgIGN1cnJlbnRUYWIgPSBuZXdDdXJyZW50VGFiO1xuICAgIH07XG4gICAgbGV0IG9iamVjdCA9IHtcbiAgICAgICAgZ2V0Q3VycmVudFRhYkluZGV4LFxuICAgICAgICBzZXRDdXJyZW50VGFiSW5kZXhcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpLFxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn0pKCk7XG5cbmV4cG9ydCB7IHRvRG9MaXN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5cbmNvbnN0IGhlbHBlckZ1bmN0aW9ucyA9ICgoKSA9PiB7XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgbGV0IHRhYkVsZW1lbnQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgd2hpbGUgKHRhYkVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgIT09IFwidGFiLXRpdGxlXCIpIHtcbiAgICAgICAgICAgIHRhYkVsZW1lbnQgPSB0YWJFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YWJFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tGb3JUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgaWYgKHRhYkVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZXYXNDdXJyZW50VGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGlmICh0YWJFbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBcImN1cnJlbnQtdGFiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tJZk9ubHlPbmVUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgdG9Eb1RhYnMgPSBBcnJheS5mcm9tKHRvRG9UYWJTZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLXRpdGxlXCIpKTtcbiAgICAgICAgaWYgKHRvRG9UYWJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgbGV0IHRhc2tFbGVtZW50ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlICh0YXNrRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gXCJ0by1kby10YXNrXCIpIHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50ID0gdGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKHRhc2tTdWJjb250YWluZXIuY2xhc3NMaXN0KVxuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2stc3ViY29udGFpbmVyXCIpKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyID0gdGFza1N1YmNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyLmNsYXNzTGlzdClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFza1N1YmNvbnRhaW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrRm9yVGFza1N1YmNvbnRhaW5lcklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGlmICh0YXNrU3ViY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXJnZXRUYXNrT2JqZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgYnV0dG9uRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgd2hpbGUgKGJ1dHRvbkVsZW1lbnQudGFnTmFtZSAhPT0gXCJCVVRUT05cIikge1xuICAgICAgICAgICAgYnV0dG9uRWxlbWVudCA9IGJ1dHRvbkVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBnZXRCdXR0b25UeXBlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNsYXNzZXMgPSBBcnJheS5mcm9tKGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkNsYXNzZXM7XG4gICAgfTtcbiAgICBjb25zdCBnZXRTdWJjb250YWluZXJUeXBlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgY29uc3Qgc3ViY29udGFpbmVyQ2xhc3NlcyA9IEFycmF5LmZyb20odGFza1N1YmNvbnRhaW5lci5jbGFzc0xpc3QpO1xuICAgICAgICByZXR1cm4gc3ViY29udGFpbmVyQ2xhc3NlcztcbiAgICB9O1xuICAgIGNvbnN0IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBjaGVja2xpc3RFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBsZXQgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIHdoaWxlICghY2xhc3NMaXN0LmluY2x1ZGVzKFwiY2hlY2tsaXN0XCIpKSB7XG4gICAgICAgICAgICBjaGVja2xpc3RFbGVtZW50ID0gY2hlY2tsaXN0RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RFbGVtZW50LmNsYXNzTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdENoZWNrbGlzdFRhc2tFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgbGV0IGNsYXNzTGlzdCA9IEFycmF5LmZyb20oY2hlY2tsaXN0VGFza0VsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgICAgd2hpbGUgKCFjbGFzc0xpc3QuaW5jbHVkZXMoXCJjaGVja2xpc3QtdGFza1wiKSkge1xuICAgICAgICAgICAgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBjaGVja2xpc3RUYXNrRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbShjaGVja2xpc3RUYXNrRWxlbWVudC5jbGFzc0xpc3QpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0VGFza0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGNoZWNrRm9yQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tPYmplY3QgPSBnZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBjaGVja2xpc3RUYXNrRWxlbWVudC5kYXRhc2V0LmNoZWNrbGlzdFRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIHJldHVybiBjaGVja2xpc3RUYXNrT2JqZWN0O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQsIGNoZWNrRm9yVGFiSW5wdXRFbGVtZW50LCBjaGVja0lmV2FzQ3VycmVudFRhYixcbiAgICAgICAgY2hlY2tJZk9ubHlPbmVUYWIsIGVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCwgZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcixcbiAgICAgICAgY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50LCBnZXRUYXJnZXRUYXNrT2JqZWN0LCBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudCxcbiAgICAgICAgZ2V0QnV0dG9uVHlwZSwgZ2V0U3ViY29udGFpbmVyVHlwZSwgZW5zdXJlQ29ycmVjdENoZWNrbGlzdEVsZW1lbnQsIGVuc3VyZUNvcnJlY3RDaGVja2xpc3RUYXNrRWxlbWVudCwgY2hlY2tGb3JDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LCBnZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0LCB9O1xufSkoKTtcblxuZXhwb3J0IHsgaGVscGVyRnVuY3Rpb25zIH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdGl0bGVfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgdG9Eb1Rhc2sgfSBmcm9tIFwiLi90b2RvX3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RUYXNrT2JqZWN0IH0gZnJvbSBcIi4vY2hlY2tsaXN0X3Rhc2tfb2JqZWN0XCI7XG5cbmNvbnN0IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0ID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJUb1RvZG9BcnJheSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiID0gdG9Eb1RhYihcIk5ldyBUYWJcIik7XG4gICAgICAgIHJldHVybiB0b0RvTGlzdC5hZGRUYXNrKG5ld1RhYik7XG4gICAgfVxuICAgIGNvbnN0IGVkaXRUYWJOYW1lID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC50YWJJbmRleDtcbiAgICAgICAgY29uc3QgdGFyZ2V0VGFiID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgdGFyZ2V0VGFiLnNldFRhc2tUaXRsZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVDdXJyZW50VGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0N1cnJlbnRUYWIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG5ld0N1cnJlbnRUYWIuZGF0YXNldC50YWJJbmRleDtcbiAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KGluZGV4KVxuICAgIH1cbiAgICBjb25zdCBzZXRGaXJzdFRhYlRvQ3VycmVudFRhYiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiQXJyYXkgPSB0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpO1xuICAgICAgICBsZXQgZmlyc3RUYWIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgdGFiIGluIHRhYkFycmF5KSB7XG4gICAgICAgICAgICBpZiAodGFiQXJyYXlbdGFiXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdG9Eb0xpc3Quc2V0Q3VycmVudFRhYkluZGV4KHRhYik7XG4gICAgICAgICAgICAgICAgZmlyc3RUYWIgPSB0YWI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0VGFiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBhZGROZXdUYXNrVG9UYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJJbmRleCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGN1cnJlbnRUYWJJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB0b0RvVGFzayhcIk5ldyBUYXNrXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuICAgICAgICBjb25zdCBuZXdUYXNrSW5kZXggPSBjdXJyZW50VGFiLmFkZFRhc2sobmV3VGFzayk7XG4gICAgICAgIHJldHVybiBuZXdUYXNrSW5kZXg7XG4gICAgfTtcbiAgICBjb25zdCBlZGl0VGFza09iamVjdEluZm8gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3VGFza1RpdGxlVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJUeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldFN1YmNvbnRhaW5lclR5cGUoZXZlbnQpO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lclR5cGUuaW5jbHVkZXMoXCJ0by1kby10aXRsZS1zZWN0aW9uXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFza09iamVjdC5zZXRUYXNrVGl0bGUobmV3VGFza1RpdGxlVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Quc2V0VGFza0R1ZURhdGUobmV3VGFza1RpdGxlVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Quc2V0VGFza0Rlc2NyaXB0aW9uKG5ld1Rhc2tUaXRsZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLW5vdGVzLXNlY3Rpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrT2JqZWN0LnNldFRhc2tOb3RlcyhuZXdUYXNrVGl0bGVWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgdGFza09iamVjdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrID0gY2hlY2tsaXN0VGFza09iamVjdChcIkNoZWNrbGlzdCBUYXNrIERlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrSW5kZXggPSB0YXNrT2JqZWN0LmFkZFRhc2sobmV3Q2hlY2tsaXN0VGFzayk7XG4gICAgICAgIHJldHVybiBuZXdDaGVja2xpc3RUYXNrSW5kZXhcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICBjaGVja2xpc3RUYXNrT2JqZWN0LnNldFRhc2tEZXNjcmlwdGlvbihuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24pO1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tPYmplY3QgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0VGFyZ2V0Q2hlY2tsaXN0VGFza09iamVjdChldmVudCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tPYmplY3QudG9nZ2xlQ29tcGxldGVkU3RhdGUoKTtcbiAgICB9O1xuICAgIHJldHVybiB7IGFkZE5ld1RhYlRvVG9kb0FycmF5LCBlZGl0VGFiTmFtZSwgdXBkYXRlQ3VycmVudFRhYiwgc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIsXG4gICAgICAgIGFkZE5ld1Rhc2tUb1RhYiwgZWRpdFRhc2tPYmplY3RJbmZvLCB0b2dnbGVUYXNrQ29tcGxldGUsIGFkZE5ld0NoZWNrbGlzdFRhc2tUb1Rhc2ssXG4gICAgICAgIGVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24sIHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZX07XG59KSgpO1xuXG5leHBvcnQgeyBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuXG5jb25zdCBET01Db250cm9sbGVyQWRkRWRpdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiVG9ET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgYWRkVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFiXCIpO1xuICAgICAgICBjb25zdCB0b0RvVGFiU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGFiLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IG5ld1RhYk5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYWJPYmplY3RUaXRsZSA9IG5ld1RhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgbmV3VGFiTm9kZS5jbGFzc0xpc3QuYWRkKFwidGFiLXRpdGxlXCIpO1xuICAgICAgICBuZXdUYWJOb2RlLmRhdGFzZXQudGFiSW5kZXggPSBpbmRleDtcbiAgICAgICAgbmV3VGFiTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3dpdGNoLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInRhYi1uYW1lXCI+VEFCIE5BTUUgUExBQ0VIT0xERVI8L2gyPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YWIgbmFtZSBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS10YWJcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJSZW1vdmUgdGFiIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHRhYk5hbWVET00gPSBuZXdUYWJOb2RlLnF1ZXJ5U2VsZWN0b3IoXCIudGFiLW5hbWVcIik7XG4gICAgICAgIHRhYk5hbWVET00udGV4dENvbnRlbnQgPSBuZXdUYWJPYmplY3RUaXRsZTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24uaW5zZXJ0QmVmb3JlKG5ld1RhYk5vZGUsIGFkZFRhYkJ1dHRvbik7XG4gICAgICAgIHJldHVybiBuZXdUYWJOb2RlO1xuICAgIH1cbiAgICBjb25zdCBzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSA9IChldmVudCwgaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRhYkVsZW1lbnQuZGF0YXNldC50YWJJbmRleDtcbiAgICAgICAgY29uc3QgdGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgY29uc3QgdGFiTmFtZSA9IHRhYk9iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gdGFiTmFtZTtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFiSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiLW5hbWUtaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRCZWZvcmUoaW5wdXRFbGVtZW50LCB0YWJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFiTmFtZUVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGFiRWxlbWVudC5kYXRhc2V0LnRhYkluZGV4O1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCB0YWJOYW1lID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBjb25zdCB0YWJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICB0YWJCdXR0b24uY2xhc3NMaXN0LmFkZChcInN3aXRjaC10YWJcIik7XG4gICAgICAgIGNvbnN0IHRhYkJ1dHRvbk5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG4gICAgICAgIHRhYkJ1dHRvbk5hbWUudGV4dENvbnRlbnQgPSB0YWJOYW1lO1xuICAgICAgICB0YWJCdXR0b24uYXBwZW5kQ2hpbGQodGFiQnV0dG9uTmFtZSk7XG4gICAgICAgIHRhYkVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRhYkJ1dHRvbiwgdGFiRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldERlZmF1bHRDdXJyZW50VGFiRE9NID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYiA9IHRvRG9UYWJTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHtpbmRleH0nXWApO1xuICAgICAgICBjdXJyZW50VGFiLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY3VycmVudC10YWJcIik7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDdXJyZW50VGFiRE9NID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0N1cnJlbnRUYWIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBuZXdDdXJyZW50VGFiLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY3VycmVudC10YWJcIik7XG4gICAgfVxuICAgIGNvbnN0IHNldEZpcnN0VGFiVG9DdXJyZW50VGFiID0gKGZpcnN0VGFiSW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGZpcnN0VGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgZmlyc3RUYWIgPSB0b0RvVGFiU2VjdGlvbi5xdWVyeVNlbGVjdG9yKGBbZGF0YS10YWItaW5kZXg9JyR7Zmlyc3RUYWJJbmRleH0nXWApXG4gICAgICAgIGZpcnN0VGFiLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY3VycmVudC10YWJcIik7XG4gICAgfVxuICAgIGNvbnN0IGFkZE5ld1Rhc2tUb0RPTSA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFiSW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrT2JqZWN0ID0gY3VycmVudFRhYk9iamVjdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCB0b0RvQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29udGVudFwiKTtcbiAgICAgICAgY29uc3QgbmV3VGFza05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBuZXdUYXNrTm9kZS5jbGFzc0xpc3QuYWRkKFwidG8tZG8tdGFza1wiKTtcbiAgICAgICAgbmV3VGFza05vZGUuZGF0YXNldC50YXNrSW5kZXggPSBpbmRleDtcbiAgICAgICAgY29uc3QgbmV3VGFza1RpdGxlID0gbmV3VGFza09iamVjdC5nZXRUYXNrVGl0bGUoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0Rlc2NyaXB0aW9uID0gbmV3VGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0R1ZURhdGUgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tOb3RlcyA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgIG5ld1Rhc2tOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby10YXNrLW92ZXJ2aWV3XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLXRpdGxlLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG8tZG8tdGl0bGVcIj5USVRMRSBQTEFDRUhPTERFUjwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby1waW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvcGluLW91dGxpbmUucG5nXCIgYWx0PVwiUGluIHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLXRpdGxlIGVkaXQtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayB0aXRsZSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby1yZW1vdmUtdGFza1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2xvc2UucG5nXCIgYWx0PVwiUmVtb3ZlIHRhc2sgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0by1kby1jb21wbGV0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1sYWJlbFwiPkNvbXBsZXRlZDo8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJcIiBjbGFzcz1cInRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIgaWQ9XCJ0by1kby1jb21wbGV0ZS1jaGVja2JveFwiPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvLWRvLXRhc2stY2hhbmdlLWRpc3BsYXlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2NoZXZyb24tZG93bi5wbmdcIiBhbHQ9XCJDaGFuZ2UgdGFzayBkaXNwbGF5IGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tZHVlLWRhdGUtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLWR1ZS1kYXRlXCI+RFVFIERBVEUgUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stZHVlLWRhdGUgZWRpdC10YXNrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIGR1ZSBkYXRlIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uXCI+REVTQ1JJUFRJT04gUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1kZXNjcmlwdGlvbiBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBkZXNjcmlwdGlvbiBidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLW5vdGVzLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLW5vdGVzXCI+Tk9URVMgUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1ub3RlcyBlZGl0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvcGVuY2lsLnBuZ1wiIGFsdD1cIkVkaXQgdGFzayBub3RlcyBidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBhY3Rpb249XCJcIiBjbGFzcz1cImNoZWNrbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGVja2xpc3QtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsZWdlbmQgY2xhc3M9XCJjaGVja2xpc3QtbGFiZWxcIj5DaGVja2xpc3Q8L2xlZ2VuZD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImFkZC1jaGVja2xpc3QtdGFza1wiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BsdXMucG5nXCIgYWx0PVwiQWRkIGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICBjb25zdCB0aXRsZURPTSA9IG5ld1Rhc2tOb2RlLnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tdGl0bGVcIik7XG4gICAgICAgIHRpdGxlRE9NLnRleHRDb250ZW50ID0gbmV3VGFza1RpdGxlO1xuICAgICAgICBjb25zdCBkdWVEYXRlRE9NID0gbmV3VGFza05vZGUucXVlcnlTZWxlY3RvcihcIi50by1kby1kdWUtZGF0ZVwiKTtcbiAgICAgICAgZHVlRGF0ZURPTS50ZXh0Q29udGVudCA9IG5ld1Rhc2tEdWVEYXRlO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbkRPTSA9IG5ld1Rhc2tOb2RlLnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGRlc2NyaXB0aW9uRE9NLnRleHRDb250ZW50ID0gbmV3VGFza0Rlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCBub3Rlc0RPTSA9IG5ld1Rhc2tOb2RlLnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tbm90ZXNcIik7XG4gICAgICAgIG5vdGVzRE9NLnRleHRDb250ZW50ID0gbmV3VGFza05vdGVzO1xuICAgICAgICB0b0RvQ29udGVudC5hcHBlbmRDaGlsZChuZXdUYXNrTm9kZSk7XG4gICAgICAgIHJldHVybiBuZXdUYXNrTm9kZTtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RTdWJjb250YWluZXIoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFzay1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyLmluc2VydEJlZm9yZShpbnB1dEVsZW1lbnQsIHRhc2tTdWJjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3Qgc2V0VGFza0lucHV0RWxlbWVudFZhbHVlID0gKGV2ZW50LCBpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgYnV0dG9uVHlwZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXRCdXR0b25UeXBlKGV2ZW50KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYnV0dG9uVHlwZS5pbmNsdWRlcyhcImVkaXQtdGFzay10aXRsZVwiKSkge1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnQgPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUuaW5jbHVkZXMoXCJlZGl0LXRhc2stZHVlLWRhdGVcIikpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50ID0gdGFza09iamVjdC5nZXRUYXNrRHVlRGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUuaW5jbHVkZXMoXCJlZGl0LXRhc2stZGVzY3JpcHRpb25cIikpIHtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50ID0gdGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25UeXBlLmluY2x1ZGVzKFwiZWRpdC10YXNrLW5vdGVzXCIpKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudCA9IHRhc2tPYmplY3QuZ2V0VGFza05vdGVzKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHRhc2tTdWJjb250ZW50O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYXNrU3ViY29udGVudEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lclR5cGUgPSBoZWxwZXJGdW5jdGlvbnMuZ2V0U3ViY29udGFpbmVyVHlwZShldmVudCk7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGVudEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLXRpdGxlLXNlY3Rpb25cIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tUaXRsZSA9IHRhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLXRpdGxlXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gdGFza1RpdGxlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgY29uc3QgdGFza0R1ZURhdGUgPSB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tZHVlLWRhdGVcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrRHVlRGF0ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLWRlc2NyaXB0aW9uLXNlY3Rpb25cIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IHRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrRGVzY3JpcHRpb247XG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lclR5cGUuaW5jbHVkZXMoXCJ0by1kby1ub3Rlcy1zZWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrTm90ZXMgPSB0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvLWRvLW5vdGVzXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gdGFza05vdGVzO1xuICAgICAgICB9O1xuICAgICAgICB0YXNrU3ViY29udGFpbmVyLmluc2VydEJlZm9yZSh0YXNrU3ViY29udGVudEVsZW1lbnQsIHRhc2tTdWJjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGNvbnN0IHRvZ2dsZVRhc2tET01Db21wbGV0ZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUNoZWNrYm94ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlZFN0YXRlZCA9IHRhc2tPYmplY3QuZ2V0Q29tcGxldGVkU3RhdGUoKTtcbiAgICAgICAgaWYgKHRhc2tDb21wbGV0ZWRTdGF0ZWQpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wbGV0ZUNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tUb0RPTSA9IChldmVudCwgbmV3Q2hlY2tsaXN0VGFza0luZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdEVsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdENoZWNrbGlzdEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFzayA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKG5ld0NoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IG5ld0NoZWNrbGlzdFRhc2suZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tDb21wbGV0ZWQgPSBuZXdDaGVja2xpc3RUYXNrLmdldENvbXBsZXRlZFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbmV3Q2hlY2tsaXN0VGFza05vZGUuY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBuZXdDaGVja2xpc3RUYXNrTm9kZS5kYXRhc2V0LmNoZWNrbGlzdFRhc2tJbmRleCA9IG5ld0NoZWNrbGlzdFRhc2tJbmRleDtcbiAgICAgICAgbmV3Q2hlY2tsaXN0VGFza05vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke25ld0NoZWNrbGlzdFRhc2tJbmRleH1cIiBjbGFzcz1cImNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjaGVja2xpc3QtJHt0YXNrSW5kZXh9LSR7bmV3Q2hlY2tsaXN0VGFza0luZGV4fVwiIGNsYXNzPVwiY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgREVTQ1JJUFRJT04gUExBQ0VIT0xERVJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC1jaGVja2xpc3QtdGFza1wiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCBjaGVja2xpc3QgdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlbW92ZS1jaGVja2xpc3QtdGFza1wiIHR5cGU9XCJidXR0b25cIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jbG9zZS5wbmdcIiBhbHQ9XCJFZGl0IGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGBcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCA9IG5ld0NoZWNrbGlzdFRhc2tOb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb247XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tDb21wbGV0ZWRFbGVtZW50ID0gbmV3Q2hlY2tsaXN0VGFza05vZGUucXVlcnlTZWxlY3RvcihgI2NoZWNrbGlzdC0ke3Rhc2tJbmRleH0tJHtuZXdDaGVja2xpc3RUYXNrSW5kZXh9YCk7XG4gICAgICAgIGlmIChuZXdDaGVja2xpc3RUYXNrQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBjaGVja2xpc3RUYXNrQ29tcGxldGVkRWxlbWVudC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrbGlzdFRhc2tDb21wbGV0ZWRFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgY2hlY2tsaXN0RWxlbWVudC5hcHBlbmRDaGlsZChuZXdDaGVja2xpc3RUYXNrTm9kZSk7XG4gICAgICAgIHJldHVybiBuZXdDaGVja2xpc3RUYXNrTm9kZTtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdENoZWNrbGlzdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uID0gY2hlY2tsaXN0VGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaGVja2xpc3QtY29tcGxldGUtc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNoZWNrbGlzdC1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24uYXBwZW5kQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUgPSAoZXZlbnQsIGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrSW5kZXggPSBjaGVja2xpc3RUYXNrRWxlbWVudC5kYXRhc2V0LmNoZWNrbGlzdFRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza09iamVjdCA9IHRhc2tPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGNoZWNrbGlzdFRhc2tJbmRleCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdFRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbjtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydENoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdENoZWNrbGlzdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgY2hlY2tsaXN0VGFza0luZGV4ID0gY2hlY2tsaXN0VGFza0VsZW1lbnQuZGF0YXNldC5jaGVja2xpc3RUYXNrSW5kZXg7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLXNlY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9IHRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldENoZWNrbGlzdFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50LnNldEF0dHJpYnV0ZShcImZvclwiLCBgY2hlY2tsaXN0LSR7dGFza0luZGV4fS0ke2NoZWNrbGlzdFRhc2tJbmRleH1gKTtcbiAgICAgICAgY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tsaXN0LXRhc2stZGVzY3JpcHRpb25cIik7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb247XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5hcHBlbmRDaGlsZChjaGVja2xpc3RUYXNrRGVzY3JpcHRpb25FbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IHRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrT2JqZWN0ID0gaGVscGVyRnVuY3Rpb25zLmdldFRhcmdldENoZWNrbGlzdFRhc2tPYmplY3QoZXZlbnQpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94LmNoZWNrZWQgPSBjaGVja2xpc3RUYXNrT2JqZWN0LmdldENvbXBsZXRlZFN0YXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJUb0RPTSwgc2V0VGFiSW5wdXRFbGVtZW50VmFsdWUsXG4gICAgICAgIGluc2VydFRhYklucHV0RWxlbWVudCwgaW5zZXJ0VGFiTmFtZUVsZW1lbnQsIHNldERlZmF1bHRDdXJyZW50VGFiRE9NLFxuICAgICAgICBzZXRDdXJyZW50VGFiRE9NLCBzZXRGaXJzdFRhYlRvQ3VycmVudFRhYiwgYWRkTmV3VGFza1RvRE9NLFxuICAgICAgICBpbnNlcnRUYXNrSW5wdXRFbGVtZW50LCBzZXRUYXNrSW5wdXRFbGVtZW50VmFsdWUsIGluc2VydFRhc2tTdWJjb250ZW50RWxlbWVudCxcbiAgICAgICAgdG9nZ2xlVGFza0RPTUNvbXBsZXRlLCBhZGROZXdDaGVja2xpc3RUYXNrVG9ET00sIGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQsXG4gICAgICAgIHNldENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSwgaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCxcbiAgICAgICAgdG9nZ2xlQ2hlY2tsaXN0VGFza0RPTUNvbXBsZXRlLCB9O1xufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlckFkZEVkaXQgfTsiLCJpbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01VcGRhdGVDb250cm9sbGVyIH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IGV2ZW50QnVuZGxlciB9IGZyb20gXCIuL2V2ZW50X2J1bmRsZXJfb2JqZWN0XCI7XG5cbmNvbnN0IGV2ZW50QXNzaWduZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZE5ld1RhYkxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBhZGRUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YWJcIik7XG4gICAgICAgIGFkZFRhYkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmFkZFRhYik7XG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVkaXRCdXR0b25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmVkaXQtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiRWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhYklucHV0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWRkVGFiSW5wdXRMaXN0ZW5lciA9IChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGV2ZW50QnVuZGxlci51cGRhdGVUYWIpXG4gICAgfVxuICAgIGNvbnN0IGFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lckZvck5ld1RhYnMgPSAodGFiRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFZGl0QnV0dG9uID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVkaXQtdGFiXCIpO1xuICAgICAgICB0YWJFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuaW5zZXJ0VGFiSW5wdXRFbGVtZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYlJlbW92ZUJ1dHRvbnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVtb3ZlLXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYlJlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhYik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvck5ld1RhYnMgPSAodGFiRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJSZW1vdmVCdXR0b24gPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVtb3ZlLXRhYlwiKTtcbiAgICAgICAgdGFiUmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlVGFiKTtcbiAgICB9XG4gICAgY29uc3QgYWRkU3dpdGNoVGFiTGlzdGVuZXJGb3JJbml0aWFsVGFicyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFiU3dpdGNoQnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zd2l0Y2gtdGFiXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFiU3dpdGNoQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuc3dpdGNoVGFiKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgYWRkU3dpdGNoVGFiTGlzdGVuZXJGb3JOZXdUYWJzID0gKHRhYkVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiU3dpdGNoQnV0dG9uID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnN3aXRjaC10YWJcIik7XG4gICAgICAgIHRhYlN3aXRjaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnN3aXRjaFRhYilcbiAgICB9XG4gICAgY29uc3QgYWRkTmV3VGFza0xpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdG8tZG8tdGFza1wiKTtcbiAgICAgICAgbmV3VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLm5ld1Rhc2spO1xuICAgIH1cbiAgICBjb25zdCBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1JlbW92ZUJ1dHRvbnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG8tZG8tcmVtb3ZlLXRhc2tcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlVGFzayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JOZXdUYXNrcyA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrUmVtb3ZlQnV0dG9uID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1yZW1vdmUtdGFza1wiKTtcbiAgICAgICAgdGFza1JlbW92ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhc2spO1xuICAgIH07XG4gICAgY29uc3QgYWRkRWRpdFRhc2tMaXN0ZW5lcnNGb3JJbml0aWFsVGFza3MgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhc2tcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YXNrRWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkVGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0VGFza1RpdGxlTGlzdGVuZXJGb3JOZXdUYXNrcyA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWRpdEJ1dHRvbnMgPSBBcnJheS5mcm9tKHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza0VkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYXNrSW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgYWRkVG9nZ2xlVGFza0NvbXBsZXRlTGlzdGVuZXJGb3JJbml0aWFsVGFza3MgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tDb21wbGV0ZUNoZWNrYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrYm94IG9mIHRhc2tDb21wbGV0ZUNoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlVGFza0NvbXBsZXRlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyRm9yTmV3VGFza3MgPSAobmV3VGFza05vZGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0NvbXBsZXRlQ2hlY2tib3ggPSBuZXdUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWNvbXBsZXRlLWNoZWNrYm94XCIpO1xuICAgICAgICB0YXNrQ29tcGxldGVDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnRvZ2dsZVRhc2tDb21wbGV0ZSlcbiAgICB9XG4gICAgY29uc3QgYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyRm9ySW5pdGlhbFRhc2tzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDaGVja2xpc3RUYXNrQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWRkLWNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBuZXdDaGVja2xpc3RUYXNrQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIuYWRkTmV3Q2hlY2tsaXN0VGFzaylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2tMaXN0ZW5lckZvck5ld1Rhc2tzID0gKG5ld0NoZWNrbGlzdFRhc2tOb2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZENoZWNrbGlzdFRhc2tCdXR0b24gPSBuZXdDaGVja2xpc3RUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKFwiLmFkZC1jaGVja2xpc3QtdGFza1wiKTtcbiAgICAgICAgYWRkQ2hlY2tsaXN0VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmFkZE5ld0NoZWNrbGlzdFRhc2spXG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0Q2hlY2tsaXN0VGFza0xpc3RlbmVycyA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oc2NvcGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LWNoZWNrbGlzdC10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgY2hlY2tsaXN0RWRpdEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkQ2hlY2tsaXN0VGFza0lucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlQ2hlY2tsaXN0VGFzayk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMgPSBzY29wZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1jaGVja2JveFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVja2JveCBvZiBjaGVja2xpc3RDb21wbGV0ZUNoZWNrYm94ZXMpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIudG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lciA9IChzY29wZT1kb2N1bWVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVtb3ZlLWNoZWNrbGlzdC10YXNrXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBjaGVja2xpc3RUYXNrUmVtb3ZlQnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudEJ1bmRsZXIucmVtb3ZlQ2hlY2tsaXN0VGFzayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJMaXN0ZW5lciwgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyLCBhZGRUYWJJbnB1dExpc3RlbmVyLFxuICAgICAgICBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzLCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvckluaXRpYWxUYWJzLFxuICAgICAgICBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvck5ld1RhYnMsIGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMsXG4gICAgICAgIGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9yTmV3VGFicywgYWRkTmV3VGFza0xpc3RlbmVyLCBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicyxcbiAgICAgICAgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyRm9yTmV3VGFza3MsIGFkZEVkaXRUYXNrTGlzdGVuZXJzRm9ySW5pdGlhbFRhc2tzLFxuICAgICAgICBhZGRUYXNrSW5wdXRMaXN0ZW5lciwgYWRkRWRpdFRhc2tUaXRsZUxpc3RlbmVyRm9yTmV3VGFza3MsXG4gICAgICAgIGFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyRm9ySW5pdGlhbFRhc2tzLCBhZGRUb2dnbGVUYXNrQ29tcGxldGVMaXN0ZW5lckZvck5ld1Rhc2tzLCBcbiAgICAgICAgYWRkTmV3Q2hlY2tsaXN0VGFza0xpc3RlbmVyRm9ySW5pdGlhbFRhc2tzLCBhZGROZXdDaGVja2xpc3RUYXNrTGlzdGVuZXJGb3JOZXdUYXNrcyxcbiAgICAgICAgYWRkRWRpdENoZWNrbGlzdFRhc2tMaXN0ZW5lcnMsIGFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyLCBhZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lciwgXG4gICAgICAgIGFkZFJlbW92ZUNoZWNrbGlzdFRhc2tMaXN0ZW5lciwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHRvRG9MaXN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFza0Zyb21UYWJBcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFiSW5kZXgpO1xuICAgICAgICBjdXJyZW50VGFiT2JqZWN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrRnJvbVRhc2tBcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoZWNrbGlzdFRhc2tFbGVtZW50LmRhdGFzZXQuY2hlY2tsaXN0VGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY3VycmVudFRhc2tPYmplY3QucmVtb3ZlVGFzayhpbmRleCk7XG4gICAgfTtcbiAgICByZXR1cm4geyByZW1vdmVUYWJGcm9tVG9kb0FycmF5LCByZW1vdmVUYXNrRnJvbVRhYkFycmF5LCByZW1vdmVDaGVja2xpc3RUYXNrRnJvbVRhc2tBcnJheSwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlclJlbW92ZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiTmFtZUVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGxldCBzd2l0Y2hUYWIgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKVxuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKHN3aXRjaFRhYik7XG4gICAgICAgIHN3aXRjaFRhYiA9IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24ucmVtb3ZlQ2hpbGQodGFiRWxlbWVudCk7XG4gICAgICAgIHRhYkVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVzZXRDdXJyZW50VGFiU3RhdHVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjdXJyZW50LXRhYlwiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUYWIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdG9Eb1Rhc2tTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0b0RvVGFza1NlY3Rpb24ucmVtb3ZlQ2hpbGQodGFza0VsZW1lbnQpO1xuICAgICAgICB0YXNrRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIucmVtb3ZlQ2hpbGQodGFza1N1YmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gbnVsbFxuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25ET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgYnV0dG9uRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbiA9IGJ1dHRvbkVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgbGV0IGNoZWNrbGlzdFRhc2tEZXNjcmlwdGlvbiA9IGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKFwibGFiZWxcIik7XG4gICAgICAgIGNoZWNrbGlzdENvbXBsZXRlU2VjdGlvbi5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24pO1xuICAgICAgICBjaGVja2xpc3RUYXNrRGVzY3JpcHRpb24gPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQ2hlY2tsaXN0VGFza0lucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24gPSBjaGVja2xpc3RUYXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrbGlzdC1jb21wbGV0ZS1zZWN0aW9uXCIpO1xuICAgICAgICBsZXQgaW5wdXRFbGVtZW50ID0gY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY2hlY2tsaXN0LWlucHV0XCIpO1xuICAgICAgICBjaGVja2xpc3RDb21wbGV0ZVNlY3Rpb24ucmVtb3ZlQ2hpbGQoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgaW5wdXRFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUNoZWNrbGlzdFRhc2tFbGVtZW50RE9NID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBjaGVja2xpc3RUYXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBjaGVja2xpc3RFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RDaGVja2xpc3RFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY2hlY2tsaXN0RWxlbWVudC5yZW1vdmVDaGlsZChjaGVja2xpc3RUYXNrRWxlbWVudCk7XG4gICAgICAgIGNoZWNrbGlzdFRhc2tFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiB7IHJlbW92ZVRhYk5hbWVFbGVtZW50LCByZW1vdmVUYWJJbnB1dEVsZW1lbnQsIHJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NLFxuICAgICAgICByZXNldEN1cnJlbnRUYWJTdGF0dXMsIHJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSwgcmVtb3ZlVGFza1N1YmNvbnRlbnRFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVtb3ZlVGFza0lucHV0RWxlbWVudCwgcmVtb3ZlQ2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRE9NLCByZW1vdmVDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50LCByZW1vdmVDaGVja2xpc3RUYXNrRWxlbWVudERPTSwgfVxufSkoKTtcblxuZXhwb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcbmltcG9ydCB7IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfYWRkX2VkaXRfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBldmVudEFzc2lnbmVyIH0gZnJvbSBcIi4vZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdFwiO1xuaW1wb3J0IHsgaGVscGVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vaGVscGVyX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlclJlbW92ZSB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX3JlbW92ZVwiO1xuXG5jb25zdCBldmVudEJ1bmRsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGFkZFRhYiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYWJUb1RvZG9BcnJheSgpO1xuICAgICAgICBjb25zdCBuZXdUYWJOb2RlID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3VGFiVG9ET00obmV3VGFiSW5kZXgpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYWJCdXR0b25MaXN0ZW5lckZvck5ld1RhYnMobmV3VGFiTm9kZSk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzKG5ld1RhYk5vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFN3aXRjaFRhYkxpc3RlbmVyRm9yTmV3VGFicyhuZXdUYWJOb2RlKTtcbiAgICAgICAgaWYgKGhlbHBlckZ1bmN0aW9ucy5jaGVja0lmT25seU9uZVRhYigpKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFRhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3Quc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoKTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKGZpcnN0VGFiSW5kZXgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIWhlbHBlckZ1bmN0aW9ucy5jaGVja0ZvclRhYklucHV0RWxlbWVudChldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYklucHV0RWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYk5hbWVFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhYklucHV0RWxlbWVudFZhbHVlKGV2ZW50LCBpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYWJJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuZWRpdFRhYk5hbWUoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFiTmFtZUVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWJJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlVGFiRnJvbVRvZG9BcnJheShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiRWxlbWVudEZyb21ET00oZXZlbnQpO1xuICAgICAgICBpZiAoaGVscGVyRnVuY3Rpb25zLmNoZWNrSWZXYXNDdXJyZW50VGFiKGV2ZW50KSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYihmaXJzdFRhYkluZGV4KVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzd2l0Y2hUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudXBkYXRlQ3VycmVudFRhYihldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVzZXRDdXJyZW50VGFiU3RhdHVzKCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldEN1cnJlbnRUYWJET00oZXZlbnQpO1xuICAgIH1cbiAgICBjb25zdCBuZXdUYXNrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5hZGROZXdUYXNrVG9UYWIoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza05vZGUgPSBET01Db250cm9sbGVyQWRkRWRpdC5hZGROZXdUYXNrVG9ET00obmV3VGFza0luZGV4KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JOZXdUYXNrcyhuZXdUYXNrTm9kZSk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkRWRpdFRhc2tUaXRsZUxpc3RlbmVyRm9yTmV3VGFza3MobmV3VGFza05vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyRm9yTmV3VGFza3MobmV3VGFza05vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZE5ld0NoZWNrbGlzdFRhc2tMaXN0ZW5lckZvck5ld1Rhc2tzKG5ld1Rhc2tOb2RlKTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZVRhc2tGcm9tVGFiQXJyYXkoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tFbGVtZW50RnJvbURPTShldmVudCk7XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghaGVscGVyRnVuY3Rpb25zLmNoZWNrRm9yVGFza1N1YmNvbnRhaW5lcklucHV0RWxlbWVudChldmVudCkpIHtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFza1N1YmNvbnRlbnRFbGVtZW50RnJvbURPTShldmVudCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYXNrSW5wdXRFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZShldmVudCwgaW5wdXRFbGVtZW50KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVGFza0lucHV0TGlzdGVuZXIoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5lZGl0VGFza09iamVjdEluZm8oZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0VGFza1N1YmNvbnRlbnRFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFza0lucHV0RWxlbWVudChldmVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB0b2dnbGVUYXNrQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QudG9nZ2xlVGFza0NvbXBsZXRlKGV2ZW50KTtcbiAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQudG9nZ2xlVGFza0RPTUNvbXBsZXRlKGV2ZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZE5ld0NoZWNrbGlzdFRhc2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbmV3Q2hlY2tsaXN0VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3Q2hlY2tsaXN0VGFza1RvVGFzayhldmVudCk7XG4gICAgICAgIGNvbnN0IG5ld0NoZWNrbGlzdFRhc2tOb2RlID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3Q2hlY2tsaXN0VGFza1RvRE9NKGV2ZW50LCBuZXdDaGVja2xpc3RUYXNrSW5kZXgpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRDaGVja2xpc3RUYXNrTGlzdGVuZXJzKG5ld0NoZWNrbGlzdFRhc2tOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lcihuZXdDaGVja2xpc3RUYXNrTm9kZSk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlQ2hlY2tsaXN0VGFza0xpc3RlbmVyKG5ld0NoZWNrbGlzdFRhc2tOb2RlKTtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVDaGVja2xpc3RUYXNrRGVzY3JpcHRpb25ET00oZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0Q2hlY2tsaXN0VGFza0lucHV0RWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRDaGVja2xpc3RUYXNrSW5wdXRFbGVtZW50VmFsdWUoZXZlbnQsIGlucHV0RWxlbWVudCk7XG4gICAgICAgICAgICBldmVudEFzc2lnbmVyLmFkZENoZWNrbGlzdFRhc2tJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24oZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuaW5zZXJ0Q2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZShldmVudCk7XG4gICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0LnRvZ2dsZUNoZWNrbGlzdFRhc2tET01Db21wbGV0ZShldmVudCk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVDaGVja2xpc3RUYXNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QucmVtb3ZlQ2hlY2tsaXN0VGFza0Zyb21UYXNrQXJyYXkoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZUNoZWNrbGlzdFRhc2tFbGVtZW50RE9NKGV2ZW50KTtcbiAgICB9O1xuICAgIHJldHVybiB7IGFkZFRhYiwgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LCB1cGRhdGVUYWIsIHJlbW92ZVRhYiwgc3dpdGNoVGFiLFxuICAgICAgICBuZXdUYXNrLCByZW1vdmVUYXNrLCBpbnNlcnRUYXNrSW5wdXRFbGVtZW50LCB1cGRhdGVUYXNrLCB0b2dnbGVUYXNrQ29tcGxldGUsIGFkZE5ld0NoZWNrbGlzdFRhc2ssIGluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQsIHVwZGF0ZUNoZWNrbGlzdFRhc2ssIHRvZ2dsZUNoZWNrbGlzdFRhc2tDb21wbGV0ZSwgcmVtb3ZlQ2hlY2tsaXN0VGFzaywgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QnVuZGxlciB9OyIsImltcG9ydCB7IHRvRG9UYXNrIH0gZnJvbSBcIi4vb2JqZWN0cy90b2RvX3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzL2NoZWNrbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdFRhc2tPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzL2NoZWNrbGlzdF90YXNrX29iamVjdFwiO1xuaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuXG4vLyB0ZXN0aW5nIHRvZG8gdGFzayBvYmplY3RcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnRcIjtcblxuLy8gdGVzdGluZyBjaGVja2xpc3Qgb2JqZWN0XG4vLyBpbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbi8vIHRlc3RpbmcgdGFicyAoYXJyYXlzIHRoYXQgY29udGFpbiBtYW55IHRvIGRvIHRhc2tzKVxuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL29iamVjdHMvdG9kb190YWJfb2JqZWN0XCI7XG5cbi8vIHRlc3RpbmcgbGlzdCB0aGF0IGNvbnRhaW4gZXZlcnl0aGluZ1xuaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi9vYmplY3RzL3RvZG9fbGlzdF9vYmplY3RcIjtcblxuLy8gdGVzdGluZyBmb3IgRE9NIGNvbnRyb2xsZXIgb2JqZWN0c1xuaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuaW1wb3J0IHsgZXZlbnRBc3NpZ25lciB9IGZyb20gXCIuL29iamVjdHMvZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcblxuLy8gbGV0IHRlc3QgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiZGR0ZXN0XCIpO1xuLy8gY29uc29sZS5sb2codGVzdClcblxuLy8gY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBpZiAodGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBub3cgdHJ1ZVwiKVxuLy8gfSBlbHNlIHtcbi8vICAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIHN0aWxsIGZhbHNlXCIpXG4vLyB9XG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gY29uc29sZS5sb2codGVzdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cblxuLy8gaWYgKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuLy8gICAgIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSxcInRoaXMgaXMgbm93IHRydWVcIilcbi8vIH0gZWxzZSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBzdGlsbCBmYWxzZVwiKVxuLy8gfVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG4vLyB0ZXN0LnNldFRhc2tEZXNjcmlwdGlvbihcIndvd3dpZVwiKVxuLy8gY29uc29sZS5sb2codGVzdC5nZXRUYXNrRGVzY3JpcHRpb24oKSlcblxuLy8gbGV0IGltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIk1ha2UgQ2VyZWFsXCIsIFwicGFydCBvZiBicmVha2Zhc3QgcGxhblwiLCBcInRoaXMgbW9ybmluZ1wiLCBcIm1ha2Ugc3VyZSB0byBwdXQgbWlsayBiYWNrIGluIGZyaWRnZVwiKTtcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2spXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tUaXRsZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRGVzY3JpcHRpb24oKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza0R1ZURhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza05vdGVzKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFBpbm5lZFN0YXRlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGltcG9ydGFudFRhc2suc2V0VGFza1RpdGxlKFwiTWFrZSBDaGlja2VuIEJyb3RoXCIpXG4vLyBpbXBvcnRhbnRUYXNrLnNldFRhc2tEZXNjcmlwdGlvbihcInJlcXVpcmVzIDEgY2hpY2tlbiBhbmQgMSBicm90aFwiKVxuLy8gaW1wb3J0YW50VGFzay5zZXRUYXNrRHVlRGF0ZShcImJlZm9yZSBJIGNhdWdodCB0aGlzIGNvbGRcIilcbi8vIGltcG9ydGFudFRhc2suc2V0VGFza05vdGVzKFwiZG9uJ3Qgc25lZXplIGludG8gcG90XCIpXG4vLyBpbXBvcnRhbnRUYXNrLnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG4vLyBpbXBvcnRhbnRUYXNrLnRvZ2dsZUNvbXBsZXRlZFN0YXRlKCk7XG5cbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza1RpdGxlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRHVlRGF0ZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrTm90ZXMoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0UGlubmVkU3RhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gaW1wb3J0YW50VGFzay5hZGRUYXNrKHRlc3QpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuXG5sZXQgdGFiMSA9IHRvRG9UYWIoXCJEZWZhdWx0IHRlc3RcIilcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyB0YWIxLmFkZFRhc2soaW1wb3J0YW50VGFzaylcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG4vLyBsZXQgYW5vdGhlckltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIkNsZWFuIHBvdFwiLCBcInBhcnQgb2YgY2hvcmVzIHBsYW5cIiwgXCJ0aGlzIGFmdGVybm9vblwiLCBcIm1ha2Ugc3VyZSB0byB1c2Ugc29hcFwiKTtcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyB0YWIxLmFkZFRhc2soYW5vdGhlckltcG9ydGFudFRhc2spXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygxKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDEpLmdldFRhc2tUaXRsZSgpKVxuXG50b0RvTGlzdC5hZGRUYXNrKHRhYjEpXG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG4vLyAvLyBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYigwKTtcbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCkpXG5cbi8vIGxldCB0YWIyID0gdG9Eb1RhYihcImhlZSBoZWVcIilcbi8vIHRvRG9MaXN0LmFkZFRhc2sodGFiMilcbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCkpXG5cbmxldCB0YXNrMSA9IHRvRG9UYXNrKFwiTWFrZSBNb25leSBURVNUXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuY29uc29sZS5sb2codGFiMS5hZGRUYXNrKHRhc2sxKSlcblxuZXZlbnRBc3NpZ25lci5hZGROZXdUYWJMaXN0ZW5lcigpO1xuLy8gZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyKCk7XG5ldmVudEFzc2lnbmVyLmFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMoKTtcblxuXG5cbmNvbnNvbGUubG9nKHRvRG9MaXN0KVxuY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbmNvbnNvbGUubG9nKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKVxuY29uc29sZS5sb2codGFiMS5nZXRDaGVja2xpc3RUYXNrcygpKVxuY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG5jb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKS5nZXRUYXNrVGl0bGUoKSlcblxuRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0RGVmYXVsdEN1cnJlbnRUYWJET00oMClcblxuZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lckZvckluaXRpYWxUYWJzKClcblxuZXZlbnRBc3NpZ25lci5hZGROZXdUYXNrTGlzdGVuZXIoKTtcblxuZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicygpO1xuXG5ldmVudEFzc2lnbmVyLmFkZEVkaXRUYXNrTGlzdGVuZXJzRm9ySW5pdGlhbFRhc2tzKCk7XG5cbi8vIGNvbnN0IGhlaCA9ICgpID0+IHtcbi8vICAgICBjb25zb2xlLmxvZyhcImJsb29wXCIpXG4vLyB9XG5cbi8vIGNvbnN0IGJvaSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tY29tcGxldGUtY2hlY2tib3hcIilcbi8vIGJvaS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGVoKVxuXG5ldmVudEFzc2lnbmVyLmFkZFRvZ2dsZVRhc2tDb21wbGV0ZUxpc3RlbmVyRm9ySW5pdGlhbFRhc2tzKCk7XG5ldmVudEFzc2lnbmVyLmFkZE5ld0NoZWNrbGlzdFRhc2tMaXN0ZW5lckZvckluaXRpYWxUYXNrcygpO1xuZXZlbnRBc3NpZ25lci5hZGRFZGl0Q2hlY2tsaXN0VGFza0xpc3RlbmVycygpO1xuXG5sZXQgY2hlY2tsaXN0VGFzazEgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiQ2hlY2tsaXN0IFRhc2sgRGVzY3JpcHRpb24gVEVTVFwiKVxudGFzazEuYWRkVGFzayhjaGVja2xpc3RUYXNrMSlcblxuZXZlbnRBc3NpZ25lci5hZGRUb2dnbGVDaGVja2xpc3RUYXNrQ29tcGxldGVMaXN0ZW5lcigpO1xuZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVDaGVja2xpc3RUYXNrTGlzdGVuZXIoKTsiXSwibmFtZXMiOlsidGl0bGVCZWhhdmlvckNvbXBvbmVudCIsIm9iamVjdCIsImluaXRpYWxUaXRsZSIsInRpdGxlIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0VGFza1RpdGxlIiwic2V0VGFza1RpdGxlIiwibmV3VGl0bGUiLCJkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IiwiaW5pdGlhbERlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJnZXRUYXNrRGVzY3JpcHRpb24iLCJzZXRUYXNrRGVzY3JpcHRpb24iLCJuZXdEZXNjcmlwdGlvbiIsImNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IiwiY29tcGxldGVkIiwidG9nZ2xlQ29tcGxldGVkU3RhdGUiLCJnZXRDb21wbGV0ZWRTdGF0ZSIsImNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IiwiY2hlY2tsaXN0IiwiYWRkVGFzayIsInRhc2siLCJwdXNoIiwibGVuZ3RoIiwicmVtb3ZlVGFzayIsImluZGV4IiwidW5kZWZpbmVkIiwiZ2V0Q2hlY2tsaXN0VGFza3MiLCJnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2siLCJ0b0RvVGFzayIsImR1ZURhdGUiLCJub3RlcyIsImluaXRpYWxEdWVEYXRlIiwiZ2V0VGFza0R1ZURhdGUiLCJzZXRUYXNrRHVlRGF0ZSIsIm5ld0R1ZURhdGUiLCJkdWVEYXRlQmVoYXZpb3JDb21wb25lbnQiLCJpbml0aWFsTm90ZXMiLCJnZXRUYXNrTm90ZXMiLCJzZXRUYXNrTm90ZXMiLCJuZXdOb3RlcyIsIm5vdGVzQmVoYXZpb3JDb21wb25lbnQiLCJwaW5uZWQiLCJ0b2dnbGVQaW5uZWRTdGF0ZSIsImdldFBpbm5lZFN0YXRlIiwicGlubmVkQmVoYXZpb3JDb21wb25lbnQiLCJjaGVja2xpc3RUYXNrT2JqZWN0IiwidG9Eb1RhYiIsInRvRG9MaXN0IiwiY3VycmVudFRhYiIsImdldEN1cnJlbnRUYWJJbmRleCIsInNldEN1cnJlbnRUYWJJbmRleCIsIm5ld0N1cnJlbnRUYWIiLCJoZWxwZXJGdW5jdGlvbnMiLCJlbnN1cmVDb3JyZWN0VGFiRWxlbWVudCIsImV2ZW50IiwidGFiRWxlbWVudCIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJlbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQiLCJ0YXNrRWxlbWVudCIsImVuc3VyZUNvcnJlY3RTdWJjb250YWluZXIiLCJ0YXNrU3ViY29udGFpbmVyIiwiY2xhc3NMaXN0IiwiQXJyYXkiLCJmcm9tIiwiaW5jbHVkZXMiLCJnZXRUYXJnZXRUYXNrT2JqZWN0IiwiZGF0YXNldCIsInRhc2tJbmRleCIsImN1cnJlbnRUYWJJbmRleCIsImVuc3VyZUNvcnJlY3RCdXR0b25FbGVtZW50IiwiYnV0dG9uRWxlbWVudCIsInRhZ05hbWUiLCJlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0VGFza0VsZW1lbnQiLCJjaGVja2xpc3RUYXNrRWxlbWVudCIsImNoZWNrRm9yVGFiSW5wdXRFbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjaGVja0lmV2FzQ3VycmVudFRhYiIsImNoZWNrSWZPbmx5T25lVGFiIiwidG9Eb1RhYlNlY3Rpb24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50IiwiZ2V0QnV0dG9uVHlwZSIsImdldFN1YmNvbnRhaW5lclR5cGUiLCJlbnN1cmVDb3JyZWN0Q2hlY2tsaXN0RWxlbWVudCIsImNoZWNrbGlzdEVsZW1lbnQiLCJjaGVja0ZvckNoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQiLCJnZXRUYXJnZXRDaGVja2xpc3RUYXNrT2JqZWN0IiwidGFza09iamVjdCIsImNoZWNrbGlzdFRhc2tJbmRleCIsIm9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IiwibmV3VGFiIiwidGFiSW5kZXgiLCJ2YWx1ZSIsInRhYkFycmF5IiwiZmlyc3RUYWIiLCJ0YWIiLCJuZXdUYXNrIiwibmV3VGFza1RpdGxlVmFsdWUiLCJ0YXNrU3ViY29udGFpbmVyVHlwZSIsIm5ld0NoZWNrbGlzdFRhc2siLCJuZXdDaGVja2xpc3RUYXNrSW5kZXgiLCJuZXdDaGVja2xpc3RUYXNrRGVzY3JpcHRpb24iLCJET01Db250cm9sbGVyQWRkRWRpdCIsImFkZFRhYkJ1dHRvbiIsIm5ld1RhYk5vZGUiLCJjcmVhdGVFbGVtZW50IiwibmV3VGFiT2JqZWN0VGl0bGUiLCJhZGQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImluc2VydEJlZm9yZSIsImlucHV0RWxlbWVudCIsInRhYk5hbWUiLCJzZXRBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwiZm9jdXMiLCJ0YWJCdXR0b24iLCJ0YWJCdXR0b25OYW1lIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdFRhYkluZGV4IiwibmV3VGFza09iamVjdCIsInRvRG9Db250ZW50IiwibmV3VGFza05vZGUiLCJuZXdUYXNrVGl0bGUiLCJuZXdUYXNrRGVzY3JpcHRpb24iLCJuZXdUYXNrRHVlRGF0ZSIsIm5ld1Rhc2tOb3RlcyIsImJ1dHRvblR5cGUiLCJ0YXNrU3ViY29udGVudCIsInRhc2tTdWJjb250ZW50RWxlbWVudCIsInRhc2tUaXRsZSIsInRhc2tEdWVEYXRlIiwidGFza0Rlc2NyaXB0aW9uIiwidGFza05vdGVzIiwiY29tcGxldGVDaGVja2JveCIsInRhc2tDb21wbGV0ZWRTdGF0ZWQiLCJjaGVja2VkIiwibmV3Q2hlY2tsaXN0VGFza0NvbXBsZXRlZCIsIm5ld0NoZWNrbGlzdFRhc2tOb2RlIiwiY2hlY2tsaXN0Q29tcGxldGVTZWN0aW9uIiwiY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uIiwiY2hlY2tsaXN0VGFza0Rlc2NyaXB0aW9uRWxlbWVudCIsImNoZWNrbGlzdENvbXBsZXRlQ2hlY2tib3giLCJldmVudEFzc2lnbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50QnVuZGxlciIsImFkZFRhYiIsInRhYkVkaXRCdXR0b25zIiwiYnV0dG9uIiwiaW5zZXJ0VGFiSW5wdXRFbGVtZW50IiwidXBkYXRlVGFiIiwidGFiUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhYiIsInRhYlN3aXRjaEJ1dHRvbnMiLCJzd2l0Y2hUYWIiLCJ0YXNrUmVtb3ZlQnV0dG9ucyIsInRhc2tFZGl0QnV0dG9ucyIsImluc2VydFRhc2tJbnB1dEVsZW1lbnQiLCJ1cGRhdGVUYXNrIiwidGFza0NvbXBsZXRlQ2hlY2tib3hlcyIsImNoZWNrYm94IiwidG9nZ2xlVGFza0NvbXBsZXRlIiwibmV3Q2hlY2tsaXN0VGFza0J1dHRvbnMiLCJhZGROZXdDaGVja2xpc3RUYXNrIiwic2NvcGUiLCJjaGVja2xpc3RFZGl0QnV0dG9ucyIsImluc2VydENoZWNrbGlzdFRhc2tJbnB1dEVsZW1lbnQiLCJ1cGRhdGVDaGVja2xpc3RUYXNrIiwiY2hlY2tsaXN0Q29tcGxldGVDaGVja2JveGVzIiwidG9nZ2xlQ2hlY2tsaXN0VGFza0NvbXBsZXRlIiwiY2hlY2tsaXN0VGFza1JlbW92ZUJ1dHRvbnMiLCJyZW1vdmVDaGVja2xpc3RUYXNrIiwib2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCIsIkRPTUNvbnRyb2xsZXJSZW1vdmUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUF0dHJpYnV0ZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXdUYWJJbmRleCIsImNvZGUiLCJuZXdUYXNrSW5kZXgiLCJ0YWIxIiwidGFzazEiLCJjb25zb2xlIiwibG9nIiwiY2hlY2tsaXN0VGFzazEiXSwic291cmNlUm9vdCI6IiJ9
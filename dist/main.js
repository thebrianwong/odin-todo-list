(()=>{"use strict";const e=(e,t)=>{let n=t;return Object.assign(e,{getTaskTitle:()=>n,setTaskTitle(e){n=e}})},t=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},n=(n,s,a,o)=>{let r={};return Object.assign(r,e(r,n),((e,t)=>{let n=t;return Object.assign(e,{getTaskDescription:()=>n,setTaskDescription(e){n=e}})})(r,a),((e,t)=>{let n=t;return Object.assign(e,{getTaskDueDate:()=>n,setTaskDueDate(e){n=e}})})(r,s),((e,t)=>{let n=t;return Object.assign(e,{getTaskNotes:()=>n,setTaskNotes(e){n=e}})})(r,o),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(r),(e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})})(r),t(r)),r},s=n=>{let s={};return Object.assign(s,e(s,n),t(s)),s},a=(()=>{let e=0,n={getCurrentTabIndex:()=>e,setCurrentTabIndex:t=>{e=t}};return Object.assign(n,t(n)),n})(),o=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement;for(;"to-do-task"!==t.getAttribute("class");)t=t.parentElement;return t},n=e=>{let t=e.target.parentElement,n=Array.from(t.classList);for(;!n.includes("to-do-task-subcontainer");)t=t.parentElement,n=Array.from(t.classList);return t},s=e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:t,ensureCorrectSubcontainer:n,checkForTaskSubcontainerInputElement:e=>"INPUT"===n(e).firstElementChild.tagName,getTargetTaskObject:e=>{const n=t(e).dataset.taskIndex,s=a.getCurrentTabIndex();return a.getSpecificChecklistTask(s).getSpecificChecklistTask(n)},ensureCorrectButtonElement:s,getButtonType:e=>{const t=s(e).classList;return Array.from(t)[0]},getSubcontainerType:e=>{const t=n(e);return Array.from(t.classList)}}})(),r=()=>{const e=s("New Tab");return a.addTask(e)},c=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},i=e=>{const t=o.ensureCorrectTabElement(e).dataset.tabIndex;a.setCurrentTabIndex(t)},l=()=>{const e=a.getChecklistTasks();let t;for(const n in e)if(void 0!==e[n])return a.setCurrentTabIndex(n),t=n,t},d=()=>{const e=a.getCurrentTabIndex(),t=a.getSpecificChecklistTask(e),s=n("New Task","Task Due Date","Task Description","Task Notes");return t.addTask(s)},u=e=>{const t=o.getTargetTaskObject(e),n=e.target.value,s=o.getSubcontainerType(e);return s.includes("to-do-title-section")?t.setTaskTitle(n):s.includes("to-do-due-date-section")?t.setTaskDueDate(n):s.includes("to-do-description-section")?t.setTaskDescription(n):s.includes("to-do-notes-section")?t.setTaskNotes(n):void 0},T={addNewTabToDOM:e=>{const t=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),o=a.getSpecificChecklistTask(e).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=e,s.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',s.querySelector(".tab-name").textContent=o,n.insertBefore(s,t),s},setTabInputElementValue:(e,t)=>{const n=o.ensureCorrectTabElement(e).dataset.tabIndex,s=a.getSpecificChecklistTask(n).getTaskTitle();t.value=s},insertTabInputElement:e=>{const t=o.ensureCorrectTabElement(e),n=document.createElement("input");return n.classList.add("tab-name-input"),n.setAttribute("type","text"),t.insertBefore(n,t.firstChild),n.focus(),n},insertTabNameElement:e=>{const t=o.ensureCorrectTabElement(e),n=t.dataset.tabIndex,s=a.getSpecificChecklistTask(n).getTaskTitle(),r=document.createElement("button");r.classList.add("switch-tab");const c=document.createElement("h2");c.textContent=s,r.appendChild(c),t.insertBefore(r,t.firstChild)},setDefaultCurrentTabDOM:e=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},setCurrentTabDOM:e=>{o.ensureCorrectTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},addNewTaskToDOM:e=>{const t=a.getCurrentTabIndex(),n=a.getSpecificChecklistTask(t).getSpecificChecklistTask(e),s=document.querySelector(".to-do-content"),o=document.createElement("div");o.classList.add("to-do-task"),o.dataset.taskIndex=e;const r=n.getTaskTitle(),c=n.getTaskDescription(),i=n.getTaskDueDate(),l=n.getTaskNotes();return o.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-outline.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <form action="" class="task-checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </form>\n        ',o.querySelector(".to-do-title").textContent=r,o.querySelector(".to-do-due-date").textContent=i,o.querySelector(".to-do-description").textContent=c,o.querySelector(".to-do-notes").textContent=l,s.appendChild(o),o},insertTaskInputElement:e=>{const t=o.ensureCorrectSubcontainer(e),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),t.insertBefore(n,t.firstChild),n.focus(),n},setTaskInputElementValue:(e,t)=>{const n=((e,t)=>{switch(o.getButtonType(e)){case"edit-task-title":return t.getTaskTitle();case"edit-task-due-date":return t.getTaskDueDate();case"edit-task-description":return t.getTaskDescription();case"edit-task-notes":return t.getTaskNotes()}})(e,o.getTargetTaskObject(e));t.value=n},insertTaskTitleElement:e=>{const t=o.ensureCorrectSubcontainer(e),n=o.getTargetTaskObject(e).getTaskTitle(),s=document.createElement("h3");s.classList.add("to-do-title"),s.textContent=n,t.insertBefore(s,t.firstChild)}},b=()=>{document.querySelector(".add-tab").addEventListener("click",P.addTab)},k=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",P.insertTabInputElement)},m=e=>{e.addEventListener("keydown",P.updateTab)},g=e=>{e.querySelector(".edit-tab").addEventListener("click",P.insertTabInputElement)},p=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",P.removeTab)},E=e=>{e.querySelector(".remove-tab").addEventListener("click",P.removeTab)},C=()=>{const e=Array.from(document.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",P.switchTab)},h=e=>{e.querySelector(".switch-tab").addEventListener("click",P.switchTab)},f=()=>{document.querySelector(".new-to-do-task").addEventListener("click",P.newTask)},v=()=>{const e=Array.from(document.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",P.removeTask)},S=e=>{e.querySelector(".to-do-remove-task").addEventListener("click",P.removeTask)},y=()=>{const e=Array.from(document.querySelectorAll(".edit-task-title"));for(const t of e)t.addEventListener("click",P.insertTaskTitleInputElement)},I=e=>{e.addEventListener("keydown",P.updateTaskTitle)},D=e=>{e.querySelector(".edit-task-title").addEventListener("click",P.insertTaskTitleInputElement)},L=e=>{const t=o.ensureCorrectTabElement(e).dataset.tabIndex;a.removeTask(t)},A=e=>{const t=o.ensureCorrectTaskElement(e).dataset.taskIndex,n=a.getCurrentTabIndex();a.getSpecificChecklistTask(n).removeTask(t)},O=e=>{const t=o.ensureCorrectTabElement(e);let n=t.querySelector(".switch-tab");t.removeChild(n),n=null},x=e=>{const t=o.ensureCorrectTabElement(e);let n=t.querySelector("input");t.removeChild(n),n=null},q=e=>{let t=o.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},N=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},w=e=>{let t=o.ensureCorrectTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},j=e=>{const t=o.ensureCorrectSubcontainer(e);let n=t.firstElementChild;t.removeChild(n),n=null},M=e=>{const t=o.ensureCorrectSubcontainer(e);let n=t.querySelector("input");t.removeChild(n),n=null},P={addTab:()=>{const e=r(),t=T.addNewTabToDOM(e);if(g(t),E(t),h(t),o.checkIfOnlyOneTab()){const e=l();T.setFirstTabToCurrentTab(e)}},insertTabInputElement:e=>{if(!o.checkForTabInputElement(e)){const t=T.insertTabInputElement(e);O(e),T.setTabInputElementValue(e,t),m(t)}},updateTab:e=>{"Enter"===e.code&&(c(e),T.insertTabNameElement(e),x(e))},removeTab:e=>{if(L(e),q(e),o.checkIfWasCurrentTab(e)){const e=l();T.setFirstTabToCurrentTab(e)}},switchTab:e=>{i(e),N(),T.setCurrentTabDOM(e)},newTask:()=>{const e=d(),t=T.addNewTaskToDOM(e);S(t),D(t)},removeTask:e=>{A(e),w(e)},insertTaskTitleInputElement:e=>{if(!o.checkForTaskSubcontainerInputElement(e)){j(e);const t=T.insertTaskInputElement(e);T.setTaskInputElementValue(e,t),I(t)}},updateTaskTitle:e=>{"Enter"===e.code&&(u(e),T.insertTaskTitleElement(e),M(e))}};let B=s("Default test");a.addTask(B);let R=n("Make Money TEST","Task Due Date","Task Description","Task Notes");console.log(B.addTask(R)),b(),k(),p(),console.log(a),console.log(a.getChecklistTasks()),console.log(a.getCurrentTabIndex()),console.log(B.getChecklistTasks()),console.log(B.getSpecificChecklistTask(0)),console.log(B.getSpecificChecklistTask(0).getTaskTitle()),T.setDefaultCurrentTabDOM(0),C(),f(),v(),y()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const t=t=>{let e=[];return Object.assign(t,{addTask:t=>(e.push(t),e.length-1),removeTask(t){e[t]=void 0},getChecklistTasks:()=>e,getSpecificChecklistTask:t=>e[t]})},e=(()=>{let s=0;const n=()=>s;let a={getCurrentTabIndex:n,setCurrentTabIndex:t=>{s=null===t?null:Number(t)},getCurrentTabObject:()=>{const t=n();return e.getSpecificChecklistTask(t)}};return Object.assign(a,t(a)),a})(),s=(t,e)=>{let s=e;return Object.assign(t,{getTaskTitle:()=>s,setTaskTitle(t){s=t}})},n=(()=>{const t=t=>{let e=t.target.parentElement;for(;"tab-title"!==e.getAttribute("class");)e=e.parentElement;return e},s=t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task-subcontainer");)e=e.parentElement,s=Array.from(e.classList);return e},n=t=>{let e=t.target,s=Array.from(e.classList);for(;!s.includes("checklist-task");)e=e.parentElement,s=Array.from(e.classList);return e},a=t=>document.querySelector(`[data-task-index='${t}']`),c=t=>e.getSpecificChecklistTask(t),o=(t,e)=>c(t).getSpecificChecklistTask(e);return{checkIfWasCurrentTab:e=>"current-tab"===t(e).getAttribute("id"),checkIfOnlyOneTab:()=>{const t=document.querySelector(".to-do-tab-section");return 1===Array.from(t.querySelectorAll(".tab-title")).length},getTaskIndex:t=>{const e=(t=>{let e=t.target.parentElement,s=Array.from(e.classList);for(;!s.includes("to-do-task");)e=e.parentElement,s=Array.from(e.classList);return e})(t);return e.dataset.taskIndex},getChecklistTaskIndex:t=>n(t).dataset.checklistTaskIndex,getTabIndex:e=>t(e).dataset.tabIndex,getNewValue:t=>t.target.value,getTaskSubcontainerType:t=>{const e=s(t),n=Array.from(e.classList);let a;return n.includes("to-do-title-section")?a="Title":n.includes("to-do-due-date-section")?a="Due Date":n.includes("to-do-description-section")?a="Description":n.includes("to-do-notes-section")&&(a="Notes"),a},getTaskSubcontainerElement:(t,e)=>{const s=a(t);let n;return"Title"===e?n=s.querySelector(".to-do-title-section"):"Due Date"===e?n=s.querySelector(".to-do-due-date-section"):"Description"===e?n=s.querySelector(".to-do-description-section"):"Notes"===e&&(n=s.querySelector(".to-do-notes-section")),n},getTaskElement:a,getChecklistTaskElement:(t,e)=>a(t).querySelector(`[data-checklist-task-index='${e}']`),getTabElement:t=>document.querySelector(`[data-tab-index='${t}']`),checkForExistingInputElement:(e,a)=>{let c;return"Tab"===a?c=t(e).querySelector(".tab-name-input"):"Task"===a?c=s(e).querySelector(".task-input"):"Checklist Task"===a&&(c=n(e).querySelector(".checklist-complete-section").querySelector(".checklist-input")),null!==c},tryingToDoubleClick:t=>{const e=a(t);return!!Array.from(e.classList).includes("mid-animation")},getTabObject:c,getTaskObject:o,getChecklistTaskObject:(t,e,s)=>o(t,e).getSpecificChecklistTask(s),checkIfNoMoreTabs:()=>{const t=document.querySelector(".to-do-tab-section");return 0===Array.from(t.querySelectorAll(".tab-title")).length}}})(),a=(t,e)=>{let s=e;return Object.assign(t,{getTaskDescription:()=>s,setTaskDescription(t){s=t}})},c=(t,e)=>{let s=e;return Object.assign(t,{toggleCompletedState(){s=!s},getCompletedState:()=>s})},o=(n="New Tab")=>{const a=(e=>{let n={};return Object.assign(n,s(n,e),t(n)),n})(n);return e.addTask(a)},i=(t,s)=>{e.getSpecificChecklistTask(t).setTaskTitle(s)},l=t=>{e.setCurrentTabIndex(t)},r=()=>{const t=e.getChecklistTasks();let s;for(const n in t)if(void 0!==t[n])return e.setCurrentTabIndex(n),s=n,s;return e.setCurrentTabIndex(null),null},d=(n,o="New Task Title",i="Task Due Date",l="Task Description",r="Task Notes",d=!1,k=!1)=>{const u=e.getSpecificChecklistTask(n),T=((e,n,o,i,l,r)=>{let d={};return Object.assign(d,s(d,e),a(d,o),((t,e)=>{let s=e;return Object.assign(t,{getTaskDueDate:()=>s,setTaskDueDate(t){s=t}})})(d,n),((t,e)=>{let s=e;return Object.assign(t,{getTaskNotes:()=>s,setTaskNotes(t){s=t}})})(d,i),((t,e)=>{let s=e;return Object.assign(t,{togglePinnedState(){s=!s},getPinnedState:()=>s})})(d,l),c(d,r),t(d)),d})(o,i,l,r,d,k);return u.addTask(T)},k=(t,s,n)=>{const a=e.getCurrentTabObject().getSpecificChecklistTask(t);"Title"===s?a.setTaskTitle(n):"Due Date"===s?a.setTaskDueDate(n):"Description"===s?a.setTaskDescription(n):"Notes"===s&&a.setTaskNotes(n)},u=t=>{e.getCurrentTabObject().getSpecificChecklistTask(t).toggleCompletedState()},T=(t,s,n="Checklist Task Description",o=!1)=>{const i=e.getSpecificChecklistTask(t).getSpecificChecklistTask(s),l=((t,e)=>{let s={};return Object.assign(s,a(s,t),c(s,e)),s})(n,o);return i.addTask(l)},g=(t,s,n)=>{e.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(s).setTaskDescription(n)},b=(t,s)=>{e.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(s).toggleCompletedState()},m=t=>{e.getCurrentTabObject().getSpecificChecklistTask(t).togglePinnedState()},p=()=>{document.querySelector(".add-tab").addEventListener("click",G.addTab)},h=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",G.insertTabInputElement)},C=t=>{t.addEventListener("keydown",G.updateTab)},f=(t=document)=>{const e=Array.from(t.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",G.removeTab)},S=(t=document)=>{const e=Array.from(t.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",G.switchTab)},y=()=>{document.querySelector(".new-to-do-task").addEventListener("click",G.addTask)},E=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-task"));for(const t of e)t.addEventListener("click",G.insertTaskInputElement)},I=t=>{t.addEventListener("keydown",G.updateTask)},v=(t=document)=>{const e=t.querySelectorAll(".to-do-pin");for(const t of e)t.addEventListener("click",G.toggleTaskPin)},D=(t=document)=>{const e=t.querySelectorAll(".to-do-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleTaskComplete)},L=(t=document)=>{const e=Array.from(t.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",G.removeTask)},x=(t=document)=>{const e=t.querySelectorAll(".add-checklist-task");for(const t of e)t.addEventListener("click",G.addNewChecklistTask)},O=(t=document)=>{const e=Array.from(t.querySelectorAll(".edit-checklist-task"));for(const t of e)t.addEventListener("click",G.insertChecklistTaskInputElement)},A=t=>{t.addEventListener("keydown",G.updateChecklistTask)},q=(t=document)=>{const e=t.querySelectorAll(".checklist-complete-checkbox");for(const t of e)t.addEventListener("click",G.toggleChecklistTaskComplete)},_=(t=document)=>{const e=t.querySelectorAll(".remove-checklist-task");for(const t of e)t.addEventListener("click",G.removeChecklistTask)},N=(t=document)=>{const e=t.querySelectorAll(".to-do-task-change-display");for(const t of e)t.addEventListener("click",G.toggleDisplayTaskDetails)},j=(()=>{const t=t=>{const s=e.getCurrentTabObject().getSpecificChecklistTask(t),n=document.querySelector(".to-do-content"),a=document.createElement("div");a.classList.add("to-do-task"),a.dataset.taskIndex=t;const c=s.getTaskTitle(),o=s.getTaskDescription(),i=s.getTaskDueDate(),l=s.getTaskNotes(),r=`to-do-complete-checkbox-${t}`;return a.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-unpinned.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title edit-task">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="ID PLACEHOLDER" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="ID PLACEHOLDER">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date edit-task">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer animation-target">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description edit-task">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer animation-target">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes edit-task">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <div action="" class="checklist animation-target">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task" type="button">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </div>\n        ',a.querySelector(".to-do-title").textContent=c,a.querySelector(".to-do-due-date").textContent="Due On: "+i,a.querySelector(".to-do-description").textContent="Description: "+o,a.querySelector(".to-do-notes").textContent="Notes: "+l,n.appendChild(a),a.querySelector("label").setAttribute("for",r),a.querySelector(".to-do-complete-checkbox").setAttribute("id",r),a},s=t=>{const s=n.getTaskElement(t),a=s.querySelector(".to-do-complete-checkbox");e.getCurrentTabObject().getSpecificChecklistTask(t).getCompletedState()?(a.checked=!0,s.classList.add("task-completed")):(a.checked=!1,s.classList.remove("task-completed"))},a=(t,s)=>{const a=n.getTaskElement(t).querySelector(".checklist"),c=e.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("div");return o.classList.add("checklist-task"),o.dataset.checklistTaskIndex=s,o.innerHTML=`\n            <div class="checklist-complete-section">\n                <input type="checkbox" id="checklist-${t}-${s}" class="checklist-complete-checkbox">\n                <label for="checklist-${t}-${s}" class="checklist-task-description">\n                    DESCRIPTION PLACEHOLDER\n                </label>\n            </div>\n            <button class="edit-checklist-task" type="button">\n                <img src="assets/pencil.png" alt="Edit checklist task button">\n            </button>\n            <button class="remove-checklist-task" type="button">\n                <img src="assets/close.png" alt="Edit checklist task button">\n            </button>\n        `,o.querySelector(".checklist-task-description").textContent=c,a.appendChild(o),o},c=(t,s)=>{const a=n.getChecklistTaskElement(t,s).querySelector(".checklist-complete-section").querySelector(".checklist-complete-checkbox"),c=e.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(s);a.checked=c.getCompletedState(),c.getCompletedState()?a.classList.add("checklist-task-completed"):a.classList.remove("checklist-task-completed")},o=t=>{const s=e.getCurrentTabObject(),n=t.dataset.taskIndex,a=s.getSpecificChecklistTask(n),c=t.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},i=t=>{const s=e.getCurrentTabObject(),n=t.dataset.taskIndex,a=s.getSpecificChecklistTask(n),c=document.querySelector(".to-do-content");if(a.getPinnedState()){const e=Array.from(document.querySelectorAll(".pinned-task"));if(0===e.length)c.insertBefore(t,c.firstElementChild);else{const s=e[e.length-1];for(const a of e){if(n<a.dataset.taskIndex){c.insertBefore(t,a);break}a===s&&s.insertAdjacentElement("afterend",t)}}t.classList.add("pinned-task")}};return{addNewTabToDOM:t=>{const s=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),a=document.createElement("div"),c=e.getSpecificChecklistTask(t).getTaskTitle();return a.classList.add("tab-title"),a.dataset.tabIndex=t,a.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',a.querySelector(".tab-name").textContent=c,n.insertBefore(a,s),a},setTabInputElementValue:t=>{const s=n.getTabElement(t).querySelector("input"),a=e.getSpecificChecklistTask(t).getTaskTitle();s.value=a},insertTabInputElement:t=>{const e=n.getTabElement(t),s=document.createElement("input");return s.classList.add("tab-name-input"),s.setAttribute("type","text"),e.insertBefore(s,e.firstChild),s.focus(),s},insertTabNameElement:t=>{const s=n.getTabElement(t),a=e.getSpecificChecklistTask(t).getTaskTitle(),c=document.createElement("button");c.classList.add("switch-tab");const o=document.createElement("h2");return o.classList.add("tab-name"),o.textContent=a,c.appendChild(o),s.insertBefore(c,s.firstChild),s},setDefaultCurrentTabDOM:t=>{const e=n.getTabElement(t);null!==e&&e.setAttribute("id","current-tab")},setCurrentTabDOM:t=>{n.getTabElement(t).setAttribute("id","current-tab")},addCurrentTabIndicator:()=>{const t=e.getCurrentTabIndex();console.log(t),null!==t&&n.getTabElement(t).setAttribute("id","current-tab")},addNewTaskToDOM:t,insertTaskInputElement:(t,e)=>{const s=n.getTaskSubcontainerElement(t,e),a=document.createElement("input");return a.classList.add("task-input"),a.setAttribute("type","text"),s.insertBefore(a,s.firstChild),a.focus(),a},setTaskInputElementValue:(t,s)=>{const a=n.getTaskSubcontainerElement(t,s).querySelector("input"),c=e.getCurrentTabObject().getSpecificChecklistTask(t);let o;"Title"===s?o=c.getTaskTitle():"Due Date"===s?o=c.getTaskDueDate():"Description"===s?o=c.getTaskDescription():"Notes"===s&&(o=c.getTaskNotes()),a.value=o},insertTaskSubcontentElement:(t,s)=>{const a=n.getTaskSubcontainerElement(t,s),c=e.getCurrentTabObject().getSpecificChecklistTask(t);let o;if("Title"===s){const t=c.getTaskTitle();o=document.createElement("h3"),o.classList.add("to-do-title"),o.textContent=t}else if("Due Date"===s){const t=c.getTaskDueDate();o=document.createElement("p"),o.classList.add("to-do-due-date"),o.textContent="Due On: "+t}else if("Description"===s){const t=c.getTaskDescription();o=document.createElement("p"),o.classList.add("to-do-description"),o.textContent="Description: "+t}else if("Notes"===s){const t=c.getTaskNotes();o=document.createElement("p"),o.classList.add("to-do-notes"),o.textContent="Notes: "+t}a.insertBefore(o,a.firstChild)},toggleTaskDOMComplete:s,addNewChecklistTaskToDOM:a,insertChecklistTaskInputElement:(t,e)=>{const s=n.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section"),a=document.createElement("input");return a.classList.add("checklist-input"),a.setAttribute("type","text"),s.appendChild(a),a.focus(),a},setChecklistTaskInputElementValue:(t,s)=>{const a=n.getChecklistTaskElement(t,s).querySelector(".checklist-input"),c=e.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(s).getTaskDescription();a.value=c},insertChecklistTaskDescriptionElement:(t,s)=>{const a=n.getChecklistTaskElement(t,s).querySelector(".checklist-complete-section"),c=e.getCurrentTabObject().getSpecificChecklistTask(t).getSpecificChecklistTask(s).getTaskDescription(),o=document.createElement("label");o.setAttribute("for",`checklist-${t}-${s}`),o.classList.add("checklist-task-description"),o.textContent=c,a.appendChild(o)},toggleChecklistTaskDOMComplete:c,changePinButtonImage:t=>{const s=n.getTaskElement(t),a=e.getCurrentTabObject().getSpecificChecklistTask(t),c=s.querySelector(".to-do-pin").querySelector("img");a.getPinnedState()?c.setAttribute("src","./assets/pin-pinned.png"):c.setAttribute("src","./assets/pin-unpinned.png")},shiftTaskElementPosition:t=>{const s=n.getTaskElement(t),a=e.getCurrentTabObject().getSpecificChecklistTask(t),c=s.dataset.taskIndex,o=document.querySelector(".to-do-content");if(a.getPinnedState()){const t=Array.from(document.querySelectorAll(".pinned-task"));if(0===t.length)o.insertBefore(s,o.firstElementChild);else{const e=t[t.length-1];for(const n of t){if(c<n.dataset.taskIndex){o.insertBefore(s,n);break}n===e&&e.insertAdjacentElement("afterend",s)}}s.classList.add("pinned-task")}else{const t=Array.from(o.querySelectorAll(".to-do-task:not(.pinned-task)"));if(0===t.length)o.appendChild(s);else{const e=t[t.length-1];for(const n of t){if(c<n.dataset.taskIndex){o.insertBefore(s,n);break}n===e&&o.appendChild(s,e)}}s.classList.remove("pinned-task")}},loadTasksFromNewCurrentTab:()=>{const n=e.getCurrentTabObject().getChecklistTasks();for(const e in n){const l=n[e];if(void 0!==l){const n=t(e);o(n),i(n),s(e),G.addTaskListeners(n);const r=l.getChecklistTasks();for(const t in r)if(void 0!==r[t]){const s=a(e,t);c(e,t),G.addChecklistTaskListeners(s)}}}},toggleDisplayTaskDetails:t=>{const e=n.getTaskElement(t);Array.from(e.querySelectorAll(".animation-target")).forEach((t=>{Array.from(t.classList).includes("hide-to-do-details")?(t.classList.remove("hide-to-do-details"),t.classList.add("display-to-do-details"),t.style.display="flex"):(t.classList.add("hide-to-do-details"),t.classList.remove("display-to-do-details"),setTimeout((()=>{t.style.display="none"}),1e3))})),(t=>{t.classList.add("mid-animation"),setTimeout((()=>{t.classList.remove("mid-animation")}),1e3)})(e)},rotateChevronButton:t=>{const e=n.getTaskElement(t).querySelector(".to-do-task-change-display").querySelector("img"),s=Array.from(e.classList);0===s.length||s.includes("rotate-hide-task-details")?(e.classList.remove("rotate-hide-task-details"),e.classList.add("rotate-display-task-details"),e.classList.add("rotated-chevron")):s.includes("rotate-display-task-details")&&(e.classList.remove("rotate-display-task-details"),e.classList.add("rotate-hide-task-details"),e.classList.remove("rotated-chevron"))},toggleAnimations:(t,e)=>{const s=n.getTaskElement(t),a=s.querySelector(".to-do-task-change-display").querySelector("img"),c=Array.from(s.querySelectorAll(".animation-target"));c.push(a),c.forEach((t=>{"Enable"===e?t.classList.add("no-animations"):"Disable"===e&&t.classList.remove("no-animations")}))}}})(),$=t=>{e.removeTask(t)},w=t=>{e.getCurrentTabObject().removeTask(t)},P=(t,s)=>{e.getCurrentTabObject().getSpecificChecklistTask(t).removeTask(s)},M=t=>{const e=n.getTabElement(t);let s=e.querySelector(".switch-tab");e.removeChild(s),s=null},V=t=>{const e=n.getTabElement(t);let s=e.querySelector("input");e.removeChild(s),s=null},B=t=>{let e=n.getTabElement(t);document.querySelector(".to-do-tab-section").removeChild(e),e=null},H=()=>{const t=document.querySelector("#current-tab");null!==t&&t.removeAttribute("id")},R=t=>{let e=n.getTaskElement(t);document.querySelector(".to-do-content").removeChild(e),e=null},F=(t,e)=>{const s=n.getTaskSubcontainerElement(t,e);let a=s.firstElementChild;s.removeChild(a),a=null},J=(t,e)=>{const s=n.getTaskSubcontainerElement(t,e);let a=s.querySelector("input");s.removeChild(a),a=null},z=(t,e)=>{const s=n.getChecklistTaskElement(t,e),a=s.querySelector(".checklist-complete-section");let c=s.querySelector(".checklist-task-description");a.removeChild(c),c=null},W=(t,e)=>{const s=n.getChecklistTaskElement(t,e).querySelector(".checklist-complete-section");let a=s.querySelector(".checklist-input");s.removeChild(a),a=null},Q=(t,e)=>{const s=n.getTaskElement(t).querySelector(".checklist");let a=n.getChecklistTaskElement(t,e);s.removeChild(a),a=null},U=()=>{document.querySelector(".to-do-content").replaceChildren()},X=(()=>{let t=!1;const s=()=>{const t=localStorage.getItem("to_do_list");return JSON.parse(t)},a=t=>{const e=JSON.stringify(t);localStorage.setItem("to_do_list",e)};return{initializeTodoList:()=>{const t=`{\n            "current_tab": ${e.getCurrentTabIndex()},\n            "tabs": {}\n        }`,s=JSON.parse(t);a(s)},addTab:t=>{const e=n.getTabObject(t),c=s(),o=`{\n            "title": "${e.getTaskTitle()}",\n            "tasks": {}\n        }`,i=JSON.parse(o);c.tabs[`tab_${t}`]=i,a(c)},addTask:(t,e)=>{const c=n.getTaskObject(t,e),o=s(),i=`{\n            "title": "${c.getTaskTitle()}",\n            "due_date": "${c.getTaskDueDate()}",\n            "description": "${c.getTaskDescription()}",\n            "notes": "${c.getTaskNotes()}",\n            "pinned": ${c.getPinnedState()},\n            "completed": ${c.getCompletedState()},\n            "checklist_tasks": {}\n        }`,l=JSON.parse(i);o.tabs[`tab_${t}`].tasks[`task_${e}`]=l,a(o)},addChecklistTask:(t,e,c)=>{const o=n.getChecklistTaskObject(t,e,c),i=s(),l=`{\n            "description": "${o.getTaskDescription()}",\n            "completed": ${o.getCompletedState()}\n        }`,r=JSON.parse(l);i.tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks[`checklist_task_${c}`]=r,a(i)},setCurrentTab:t=>{const e=s();e.current_tab=null===t?null:Number(t),a(e)},setTabName:t=>{const e=n.getTabObject(t),c=s();c.tabs[`tab_${t}`].title=e.getTaskTitle(),a(c)},setTaskSubcontainerValue:(t,e,c)=>{const o=n.getTaskObject(t,e),i=s();"Title"===c?i.tabs[`tab_${t}`].tasks[`task_${e}`].title=o.getTaskTitle():"Due Date"===c?i.tabs[`tab_${t}`].tasks[`task_${e}`].due_date=o.getTaskDueDate():"Description"===c?i.tabs[`tab_${t}`].tasks[`task_${e}`].description=o.getTaskDescription():"Notes"===c&&(i.tabs[`tab_${t}`].tasks[`task_${e}`].notes=o.getTaskNotes()),a(i)},toggleTaskCompleted:(t,e)=>{const c=n.getTaskObject(t,e),o=s();o.tabs[`tab_${t}`].tasks[`task_${e}`].completed=c.getCompletedState(),a(o)},toggleTaskPinned:(t,e)=>{const c=n.getTaskObject(t,e),o=s();o.tabs[`tab_${t}`].tasks[`task_${e}`].pinned=c.getPinnedState(),a(o)},setChecklistTaskDescription:(t,e,c)=>{const o=n.getChecklistTaskObject(t,e,c),i=s();i.tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks[`checklist_task_${c}`].description=o.getTaskDescription(),a(i)},toggleChecklistTaskCompleted:(t,e,c)=>{const o=n.getChecklistTaskObject(t,e,c),i=s();i.tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks[`checklist_task_${c}`].completed=o.getCompletedState(),a(i)},removeTab:t=>{const e=s();e.tabs[`tab_${t}`]=null,a(e)},removeTask:(t,e)=>{const n=s();n.tabs[`tab_${t}`].tasks[`task_${e}`]=null,a(n)},removeChecklistTask:(t,e,n)=>{const c=s();c.tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks[`checklist_task_${n}`]=null,a(c)},getCurrentTabIndex:()=>s().current_tab,getTabTitle:t=>s().tabs[t].title,getTaskValues:(t,e)=>{const n=s();let a=[];const c=n.tabs[t].tasks[e].title;a.push(c);const o=n.tabs[t].tasks[e].due_date;a.push(o);const i=n.tabs[t].tasks[e].description;a.push(i);const l=n.tabs[t].tasks[e].notes;a.push(l);const r=n.tabs[t].tasks[e].pinned;a.push(r);const d=n.tabs[t].tasks[e].completed;return a.push(d),a},getChecklistTaskValues:(t,e,n)=>{const a=s();let c=[];const o=a.tabs[t].tasks[e].checklist_tasks[n].description;c.push(o);const i=a.tabs[t].tasks[e].checklist_tasks[n].completed;return c.push(i),c},checkForExistingStorage:()=>!!localStorage.getItem("to_do_list"),getLocalStorageValue:s,getTabObjects:()=>X.getLocalStorageValue().tabs,getTaskObjects:t=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks,getChecklistTaskObjects:(t,e)=>X.getLocalStorageValue().tabs[`tab_${t}`].tasks[`task_${e}`].checklist_tasks,toggleLoading:()=>{t=!t},isLoading:()=>t}})(),G=(()=>{const t=(t,e="New Tab")=>{const a=o(e),c=j.addNewTabToDOM(a);if(s(c),!X.isLoading()&&(X.addTab(a),n.checkIfOnlyOneTab())){const t=r();j.addCurrentTabIndicator(),X.setCurrentTab(t)}return a},s=t=>{h(t),f(t),S(t)},a=(t,s=e.getCurrentTabIndex(),n="New Task Title",a="Task Due Date",o="Task Description",i="Task Notes",l=!1,r=!1)=>{if(null===e.getCurrentTabIndex())return void K();const k=d(s,n,a,o,i,l,r),u=j.addNewTaskToDOM(k);return c(u),X.isLoading()||X.addTask(e.getCurrentTabIndex(),k),k},c=t=>{L(t),E(t),D(t),x(t),v(t),N(t)},G=t=>{O(t),q(t),_(t)},K=()=>{const e=t(event,"Instructions"),s=a(event,e,"Quick Tips! Click the pin button to pin a task to the top of the list.","Tomorrow, next week, or whenever your task is due, you can add it here! Click the arrow button to toggle between showing and hiding task details.","Add a description of your task here! Click the pencil buttons to edit the various parts of your task.","Jot down some notes here! Mark your task as complete when you're done, or remove it from the list by clicking the X button.",!1,!1);j.toggleTaskDOMComplete(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),Y(e,s,"If your task has multiple steps, try breaking them down into a checklist! Click the plus sign button to add steps as needed.",!1),Y(e,s,"Have a new task you want to keep track of? Add it to the list by clicking on the 'New Task' button below!",!1),Y(e,s,"Organize the different types of tasks in your life by creating themed tabs. Create a new tab by clicking on the plus sign button at the top of the list. Change tabs by clicking on different tab names.",!1)},Y=(t,e,s,n)=>{const a=T(t,e,s,n),c=j.addNewChecklistTaskToDOM(e,a);j.toggleChecklistTaskDOMComplete(e,a),G(c),X.isLoading()||X.addChecklistTask(t,e,a)},Z=()=>{X.toggleLoading(),tt(),et(),X.toggleLoading()},tt=()=>{const t=X.getCurrentTabIndex();e.setCurrentTabIndex(t)},et=()=>{const s=X.getTabObjects();for(const n in s)if(null===s[n])e.addTask(void 0);else{const e=X.getTabTitle(n),s=t(event,e);st(s,n)}j.addCurrentTabIndicator()},st=(t,s)=>{const c=n.getTabObject(t),o=X.getTaskObjects(t);for(const n in o)if(null===o[n])c.addTask(void 0);else{const c=X.getTaskValues(s,n),o=c[0],i=c[1],l=c[2],r=c[3],k=c[4],u=c[5];let T;t===e.getCurrentTabIndex()?(T=a(event,t,o,i,l,r,k,u),j.toggleTaskDOMComplete(T),j.changePinButtonImage(T),j.shiftTaskElementPosition(T)):T=d(t,o,i,l,r,k,u),nt(t,s,T,n)}},nt=(t,s,a,c)=>{const o=n.getTaskObject(t,a),i=X.getChecklistTaskObjects(t,a);for(const n in i)if(null===i[n])o.addTask(void 0);else{const o=X.getChecklistTaskValues(s,c,n),i=o[0],l=o[1];let r;r=t===e.getCurrentTabIndex()?Y(t,a,i,l):T(t,a,i,l)}},at=()=>{p(),y()};return{addTab:t,insertTabInputElement:t=>{if(!n.checkForExistingInputElement(t,"Tab")){const e=n.getTabIndex(t),s=j.insertTabInputElement(e);M(e),j.setTabInputElementValue(e),C(s)}},updateTab:t=>{if("Enter"===t.code){const e=n.getTabIndex(t),s=n.getNewValue(t);i(e,s);const a=j.insertTabNameElement(e);V(e),S(a),X.setTabName(e)}},switchTab:t=>{if(!n.checkIfWasCurrentTab(t)){const e=n.getTabIndex(t);l(e),H(),j.setCurrentTabDOM(e),U(),j.loadTasksFromNewCurrentTab(),X.setCurrentTab(e)}},removeTab:t=>{const e=n.getTabIndex(t);if($(e),B(e),X.removeTab(e),n.checkIfWasCurrentTab(t)){const t=r();j.addCurrentTabIndicator(),U(),X.setCurrentTab(t),n.checkIfNoMoreTabs()||j.loadTasksFromNewCurrentTab()}},addTabListeners:s,addTask:a,insertTaskInputElement:t=>{if(!n.checkForExistingInputElement(t,"Task")){const e=n.getTaskIndex(t),s=n.getTaskSubcontainerType(t);F(e,s);const a=j.insertTaskInputElement(e,s);j.setTaskInputElementValue(e,s),I(a)}},updateTask:t=>{if("Enter"===t.code){const s=n.getTaskIndex(t),a=n.getTaskSubcontainerType(t),c=n.getNewValue(t);k(s,a,c),j.insertTaskSubcontentElement(s,a),J(s,a),X.setTaskSubcontainerValue(e.getCurrentTabIndex(),s,a)}},toggleTaskPin:t=>{const s=n.getTaskIndex(t);j.toggleAnimations(s,"Enable"),m(s),j.changePinButtonImage(s),j.shiftTaskElementPosition(s),X.toggleTaskPinned(e.getCurrentTabIndex(),s)},toggleTaskComplete:t=>{const s=n.getTaskIndex(t);u(s),j.toggleTaskDOMComplete(s),X.toggleTaskCompleted(e.getCurrentTabIndex(),s)},removeTask:t=>{const s=n.getTaskIndex(t);w(s),R(s),X.removeTask(e.getCurrentTabIndex(),s)},addTaskListeners:c,addNewChecklistTask:t=>{const s=e.getCurrentTabIndex(),a=n.getTaskIndex(t),c=T(s,a),o=j.addNewChecklistTaskToDOM(a,c);G(o),X.isLoading()||X.addChecklistTask(e.getCurrentTabIndex(),a,c)},insertChecklistTaskInputElement:t=>{if(!n.checkForExistingInputElement(t,"Checklist Task")){const e=n.getTaskIndex(t),s=n.getChecklistTaskIndex(t);z(e,s);const a=j.insertChecklistTaskInputElement(e,s);j.setChecklistTaskInputElementValue(e,s),A(a)}},updateChecklistTask:t=>{if("Enter"===t.code){const s=n.getTaskIndex(t),a=n.getChecklistTaskIndex(t),c=n.getNewValue(t);g(s,a,c),j.insertChecklistTaskDescriptionElement(s,a),W(s,a),X.setChecklistTaskDescription(e.getCurrentTabIndex(),s,a)}},toggleChecklistTaskComplete:t=>{const s=n.getTaskIndex(t),a=n.getChecklistTaskIndex(t);b(s,a),j.toggleChecklistTaskDOMComplete(s,a),X.toggleChecklistTaskCompleted(e.getCurrentTabIndex(),s,a)},removeChecklistTask:t=>{const s=n.getTaskIndex(t),a=n.getChecklistTaskIndex(t);P(s,a),Q(s,a),X.removeChecklistTask(e.getCurrentTabIndex(),s,a)},addChecklistTaskListeners:G,toggleDisplayTaskDetails:t=>{const e=n.getTaskIndex(t);n.tryingToDoubleClick(e)||(j.toggleAnimations(e,"Disable"),j.toggleDisplayTaskDetails(e),j.rotateChevronButton(e))},loadInInstructionsPage:K,loadInLocalStorage:Z,loadInTabObjects:et,loadInInitialListeners:at,loadInPage:()=>{at(),X.checkForExistingStorage()?Z():(X.initializeTodoList(),K())}}})();G.loadInPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=(e,t)=>{let s=t;return Object.assign(e,{getTaskTitle:()=>s,setTaskTitle(e){s=e}})},t=(e,t)=>{let s=t;return Object.assign(e,{getTaskDescription:()=>s,setTaskDescription(e){s=e}})},s=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},o=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},l=(l,n,a,c)=>{let i={};return Object.assign(i,e(i,l),t(i,n),((e,t)=>{let s=t;return Object.assign(e,{getTaskDueDate:()=>s,setTaskDueDate(e){s=e}})})(i,a),((e,t)=>{let s=t;return Object.assign(e,{getTaskNotes:()=>s,setTaskNotes(e){s=e}})})(i,c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(i),s(i),o(i)),i},n=t=>{let s={};return Object.assign(s,e(s,t),o(s)),s},a=(()=>{let e={};return Object.assign(e,o(e)),e})(),c=e=>a.addTask(e),i=(e,t)=>e.addTask(t),g=(e,t)=>e.addTask(t),r=()=>{const e=n("New Tab");return a.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},T=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t};return{addNewTabToDOM:e=>{const t=document.querySelector(".add-tab"),s=document.querySelector(".to-do-tab-section"),o=document.createElement("div"),l=a.getSpecificChecklistTask(e).getTaskTitle();return o.classList.add("tab-title"),o.dataset.tabIndex=e,o.innerHTML=`\n            <button class="switch-tab">\n                <h2>${l}</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n            `,s.insertBefore(o,t),o},removeTabNameElement:t=>{const s=e(t);let o=s.querySelector(".switch-tab");s.removeChild(o),o=null},setInputElementValue:(t,s)=>{const o=e(t).dataset.tabIndex,l=a.getSpecificChecklistTask(o).getTaskTitle();s.value=l},insertTabInputElement:t=>{const s=e(t),o=document.createElement("input");return o.classList.add("tab-name-input"),o.setAttribute("type","text"),s.insertBefore(o,s.firstChild),o},checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,removeTabInputElement:t=>{const s=e(t);let o=s.querySelector("input");s.removeChild(o),o=null},insertTabNameElement:t=>{const s=e(t),o=s.dataset.tabIndex,l=a.getSpecificChecklistTask(o).getTaskTitle(),n=document.createElement("button");n.classList.add("switch-tab");const c=document.createElement("h2");c.textContent=l,n.appendChild(c),s.insertBefore(n,s.firstChild)}}})(),k=()=>{document.querySelector(".add-tab").addEventListener("click",b.addTab)},u=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",b.insertTabInputElement)},p=e=>{e.addEventListener("keydown",b.updateTab)},m=e=>{e.querySelector(".edit-tab").addEventListener("click",b.insertTabInputElement)},b={addTab:()=>{const e=r(),t=T.addNewTabToDOM(e);m(t)},insertTabInputElement:e=>{if(!T.checkForTabInputElement(e)){const t=T.insertTabInputElement(e);T.removeTabNameElement(e),T.setInputElementValue(e,t),p(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),T.insertTabNameElement(e),T.removeTabInputElement(e))}};let h=(e=>{let o={};return Object.assign(o,t(o,"ddtest"),s(o)),o})();console.log(h),console.log(h.getCompletedState()),h.getCompletedState()?console.log(h.getCompletedState(),"this is now true"):console.log(h.getCompletedState(),"this is still false"),console.log(h.getCompletedState()),console.log(h.toggleCompletedState()),console.log(h.getCompletedState()),h.getCompletedState()?console.log(h.getCompletedState(),"this is now true"):console.log(h.getCompletedState(),"this is still false"),console.log(h.getCompletedState()),console.log(h),console.log(h.getTaskDescription()),h.setTaskDescription("wowwie"),console.log(h.getTaskDescription());let C=l("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(C),console.log(C.getTaskTitle()),console.log(C.getTaskDescription()),console.log(C.getTaskDueDate()),console.log(C.getTaskNotes()),console.log(C.getPinnedState()),console.log(C.getCompletedState()),C.setTaskTitle("Make Chicken Broth"),C.setTaskDescription("requires 1 chicken and 1 broth"),C.setTaskDueDate("before I caught this cold"),C.setTaskNotes("don't sneeze into pot"),C.togglePinnedState(),C.toggleCompletedState(),console.log(C.getTaskTitle()),console.log(C.getTaskDescription()),console.log(C.getTaskDueDate()),console.log(C.getTaskNotes()),console.log(C.getPinnedState()),console.log(C.getCompletedState()),console.log(g(C,h)),console.log(C.getChecklistTasks()),console.log(C.getSpecificChecklistTask(0)),console.log(C.getSpecificChecklistTask(0).getTaskDescription());let S=n("kitchen stuff");console.log(S),console.log(i(S,C)),console.log(S),console.log(S.getChecklistTasks()),console.log(S.getSpecificChecklistTask(0)),console.log(S.getSpecificChecklistTask(0).getTaskTitle());let f=l("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(S),console.log(i(S,f)),console.log(S.getSpecificChecklistTask(1)),console.log(S.getSpecificChecklistTask(1).getTaskTitle()),console.log(c(S)),console.log(a.getChecklistTasks()),console.log(a.getSpecificChecklistTask(0)),console.log(a.getSpecificChecklistTask(0).getTaskTitle()),console.log(a.getChecklistTasks());let E=n("hee hee");console.log(c(E)),console.log(a.getChecklistTasks()),k(),u()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=(e,t)=>{let o=t;return Object.assign(e,{getTaskTitle:()=>o,setTaskTitle(e){o=e}})},t=(e,t)=>{let o=t;return Object.assign(e,{getTaskDescription:()=>o,setTaskDescription(e){o=e}})},o=e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})},s=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},l=(l,n,a,c)=>{let i={};return Object.assign(i,e(i,l),t(i,n),((e,t)=>{let o=t;return Object.assign(e,{getTaskDueDate:()=>o,setTaskDueDate(e){o=e}})})(i,a),((e,t)=>{let o=t;return Object.assign(e,{getTaskNotes:()=>o,setTaskNotes(e){o=e}})})(i,c),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(i),o(i),s(i)),i},n=t=>{let o={};return Object.assign(o,e(o,t),s(o)),o},a=(()=>{let e={};return Object.assign(e,s(e)),e})(),c=e=>a.addTask(e),i=(e,t)=>e.addTask(t),r=(e,t)=>e.addTask(t),g=()=>{const e=n("New Tab");return a.addTask(e)},d=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},k=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName}})(),T=e=>{const t=document.querySelector(".add-tab"),o=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),l=a.getSpecificChecklistTask(e).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=e,s.innerHTML=`\n            <button class="switch-tab">\n                <h2>${l}</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n            `,o.insertBefore(s,t),s},u=e=>{const t=k.ensureCorrectTabElement(e);let o=t.querySelector(".switch-tab");t.removeChild(o),o=null},b=(e,t)=>{const o=k.ensureCorrectTabElement(e).dataset.tabIndex,s=a.getSpecificChecklistTask(o).getTaskTitle();t.value=s},m=e=>{const t=k.ensureCorrectTabElement(e),o=document.createElement("input");return o.classList.add("tab-name-input"),o.setAttribute("type","text"),t.insertBefore(o,t.firstChild),o},p=e=>{const t=k.ensureCorrectTabElement(e);let o=t.querySelector("input");t.removeChild(o),o=null},C=e=>{const t=k.ensureCorrectTabElement(e),o=t.dataset.tabIndex,s=a.getSpecificChecklistTask(o).getTaskTitle(),l=document.createElement("button");l.classList.add("switch-tab");const n=document.createElement("h2");n.textContent=s,l.appendChild(n),t.insertBefore(l,t.firstChild)},h=e=>{let t=k.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},S=()=>{document.querySelector(".add-tab").addEventListener("click",j.addTab)},f=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",j.insertTabInputElement)},E=e=>{e.addEventListener("keydown",j.updateTab)},v=e=>{e.querySelector(".edit-tab").addEventListener("click",j.insertTabInputElement)},D=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",j.removeTab)},y=e=>{e.querySelector(".remove-tab").addEventListener("click",j.removeTab)},I=e=>{const t=k.ensureCorrectTabElement(e).dataset.tabIndex;a.removeTask(t)},j={addTab:()=>{const e=g(),t=T(e);v(t),y(t)},insertTabInputElement:e=>{if(!k.checkForTabInputElement(e)){const t=m(e);u(e),b(e,t),E(t)}},updateTab:e=>{"Enter"===e.code&&(d(e),C(e),p(e))},removeTab:e=>{I(e),h(e)}};let q=(e=>{let s={};return Object.assign(s,t(s,"ddtest"),o(s)),s})();console.log(q),console.log(q.getCompletedState()),q.getCompletedState()?console.log(q.getCompletedState(),"this is now true"):console.log(q.getCompletedState(),"this is still false"),console.log(q.getCompletedState()),console.log(q.toggleCompletedState()),console.log(q.getCompletedState()),q.getCompletedState()?console.log(q.getCompletedState(),"this is now true"):console.log(q.getCompletedState(),"this is still false"),console.log(q.getCompletedState()),console.log(q),console.log(q.getTaskDescription()),q.setTaskDescription("wowwie"),console.log(q.getTaskDescription());let O=l("Make Cereal","part of breakfast plan","this morning","make sure to put milk back in fridge");console.log(O),console.log(O.getTaskTitle()),console.log(O.getTaskDescription()),console.log(O.getTaskDueDate()),console.log(O.getTaskNotes()),console.log(O.getPinnedState()),console.log(O.getCompletedState()),O.setTaskTitle("Make Chicken Broth"),O.setTaskDescription("requires 1 chicken and 1 broth"),O.setTaskDueDate("before I caught this cold"),O.setTaskNotes("don't sneeze into pot"),O.togglePinnedState(),O.toggleCompletedState(),console.log(O.getTaskTitle()),console.log(O.getTaskDescription()),console.log(O.getTaskDueDate()),console.log(O.getTaskNotes()),console.log(O.getPinnedState()),console.log(O.getCompletedState()),console.log(r(O,q)),console.log(O.getChecklistTasks()),console.log(O.getSpecificChecklistTask(0)),console.log(O.getSpecificChecklistTask(0).getTaskDescription());let w=n("kitchen stuff");console.log(w),console.log(i(w,O)),console.log(w),console.log(w.getChecklistTasks()),console.log(w.getSpecificChecklistTask(0)),console.log(w.getSpecificChecklistTask(0).getTaskTitle());let L=l("Clean pot","part of chores plan","this afternoon","make sure to use soap");console.log(w),console.log(i(w,L)),console.log(w.getSpecificChecklistTask(1)),console.log(w.getSpecificChecklistTask(1).getTaskTitle()),console.log(c(w)),console.log(a.getChecklistTasks()),console.log(a.getSpecificChecklistTask(0)),console.log(a.getSpecificChecklistTask(0).getTaskTitle()),console.log(a.getChecklistTasks());let N=n("hee hee");console.log(c(N)),console.log(a.getChecklistTasks()),S(),f(),D()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=(e,t)=>{let n=t;return Object.assign(e,{getTaskTitle:()=>n,setTaskTitle(e){n=e}})},t=e=>{let t=[];return Object.assign(e,{addTask:e=>(t.push(e),t.length-1),removeTask(e){t[e]=void 0},getChecklistTasks:()=>t,getSpecificChecklistTask:e=>t[e]})},n=(n,s,a,o)=>{let r={};return Object.assign(r,e(r,n),((e,t)=>{let n=t;return Object.assign(e,{getTaskDescription:()=>n,setTaskDescription(e){n=e}})})(r,a),((e,t)=>{let n=t;return Object.assign(e,{getTaskDueDate:()=>n,setTaskDueDate(e){n=e}})})(r,s),((e,t)=>{let n=t;return Object.assign(e,{getTaskNotes:()=>n,setTaskNotes(e){n=e}})})(r,o),(e=>{let t=!1;return Object.assign(e,{togglePinnedState(){t=!t},getPinnedState:()=>t})})(r),(e=>{let t=!1;return Object.assign(e,{toggleCompletedState(){t=!t},getCompletedState:()=>t})})(r),t(r)),r},s=n=>{let s={};return Object.assign(s,e(s,n),t(s)),s},a=(()=>{let e=0,n={getCurrentTabIndex:()=>e,setCurrentTabIndex:t=>{e=t}};return Object.assign(n,t(n)),n})(),o=(()=>{const e=e=>{let t=e.target.parentElement;for(;"tab-title"!==t.getAttribute("class");)t=t.parentElement;return t},t=e=>{let t=e.target.parentElement;for(;"to-do-task"!==t.getAttribute("class");)t=t.parentElement;return t},n=e=>{let t=e.target.parentElement,n=Array.from(t.classList);for(;!n.includes("to-do-task-subcontainer");)t=t.parentElement,n=Array.from(t.classList);return t},s=e=>{let t=e.target;for(;"BUTTON"!==t.tagName;)t=t.parentElement;return t};return{ensureCorrectTabElement:e,checkForTabInputElement:t=>"INPUT"===e(t).firstElementChild.tagName,checkIfWasCurrentTab:t=>"current-tab"===e(t).getAttribute("id"),checkIfOnlyOneTab:()=>{const e=document.querySelector(".to-do-tab-section");return 1===Array.from(e.querySelectorAll(".tab-title")).length},ensureCorrectTaskElement:t,ensureCorrectSubcontainer:n,checkForTaskSubcontainerInputElement:e=>"INPUT"===n(e).firstElementChild.tagName,getTargetTaskObject:e=>{const n=t(e).dataset.taskIndex,s=a.getCurrentTabIndex();return a.getSpecificChecklistTask(s).getSpecificChecklistTask(n)},ensureCorrectButtonElement:s,getButtonType:e=>{const t=s(e).classList;return Array.from(t)[0]},getSubcontainerType:e=>{const t=n(e);return Array.from(t.classList)}}})(),r=()=>{const e=s("New Tab");return a.addTask(e)},c=e=>{const t=e.target.parentElement.dataset.tabIndex;a.getSpecificChecklistTask(t).setTaskTitle(e.target.value)},i=e=>{const t=o.ensureCorrectTabElement(e).dataset.tabIndex;a.setCurrentTabIndex(t)},l=()=>{const e=a.getChecklistTasks();let t;for(const n in e)if(void 0!==e[n])return a.setCurrentTabIndex(n),t=n,t},d=()=>{const e=a.getCurrentTabIndex(),t=a.getSpecificChecklistTask(e),s=n("New Task","Task Due Date","Task Description","Task Notes");return t.addTask(s)},u=e=>{const t=o.getTargetTaskObject(e),n=e.target.value,s=o.getSubcontainerType(e);return s.includes("to-do-title-section")?t.setTaskTitle(n):s.includes("to-do-due-date-section")?t.setTaskDueDate(n):s.includes("to-do-description-section")?t.setTaskDescription(n):s.includes("to-do-notes-section")?t.setTaskNotes(n):void 0},T={addNewTabToDOM:e=>{const t=document.querySelector(".add-tab"),n=document.querySelector(".to-do-tab-section"),s=document.createElement("div"),o=a.getSpecificChecklistTask(e).getTaskTitle();return s.classList.add("tab-title"),s.dataset.tabIndex=e,s.innerHTML='\n            <button class="switch-tab">\n                <h2 class="tab-name">TAB NAME PLACEHOLDER</h2>\n            </button>\n            <button class="edit-tab">\n                <img src="assets/pencil.png" alt="Edit tab name button">\n            </button>\n            <button class="remove-tab">\n                <img src="assets/close.png" alt="Remove tab button">\n            </button>\n        ',s.querySelector(".tab-name").textContent=o,n.insertBefore(s,t),s},setTabInputElementValue:(e,t)=>{const n=o.ensureCorrectTabElement(e).dataset.tabIndex,s=a.getSpecificChecklistTask(n).getTaskTitle();t.value=s},insertTabInputElement:e=>{const t=o.ensureCorrectTabElement(e),n=document.createElement("input");return n.classList.add("tab-name-input"),n.setAttribute("type","text"),t.insertBefore(n,t.firstChild),n.focus(),n},insertTabNameElement:e=>{const t=o.ensureCorrectTabElement(e),n=t.dataset.tabIndex,s=a.getSpecificChecklistTask(n).getTaskTitle(),r=document.createElement("button");r.classList.add("switch-tab");const c=document.createElement("h2");c.textContent=s,r.appendChild(c),t.insertBefore(r,t.firstChild)},setDefaultCurrentTabDOM:e=>{document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},setCurrentTabDOM:e=>{o.ensureCorrectTabElement(e).setAttribute("id","current-tab")},setFirstTabToCurrentTab:e=>{void 0!==e&&document.querySelector(".to-do-tab-section").querySelector(`[data-tab-index='${e}']`).setAttribute("id","current-tab")},addNewTaskToDOM:e=>{const t=a.getCurrentTabIndex(),n=a.getSpecificChecklistTask(t).getSpecificChecklistTask(e),s=document.querySelector(".to-do-content"),o=document.createElement("div");o.classList.add("to-do-task"),o.dataset.taskIndex=e;const r=n.getTaskTitle(),c=n.getTaskDescription(),i=n.getTaskDueDate(),l=n.getTaskNotes();return o.innerHTML='\n            <div class="to-do-task-overview">\n                <div class="to-do-title-section to-do-task-subcontainer">\n                    <h3 class="to-do-title">TITLE PLACEHOLDER</h3>\n                    <button class="to-do-pin">\n                        <img src="./assets/pin-outline.png" alt="Pin task button">\n                    </button>\n                    <button class="edit-task-title">\n                        <img src="assets/pencil.png" alt="Edit task title button">\n                    </button>\n                    <button class="to-do-remove-task">\n                        <img src="assets/close.png" alt="Remove task button">\n                    </button>\n                </div>\n                <div class="to-do-complete-section">\n                    <div class="to-do-complete">\n                        <label for="to-do-complete-checkbox" class="to-do-complete-label">Completed:</label>\n                        <input type="checkbox" name="" class="to-do-complete-checkbox" id="to-do-complete-checkbox">\n                    </div>\n                    <button class="to-do-task-change-display">\n                        <img src="assets/chevron-down.png" alt="Change task display button">\n                    </button>\n                </div>\n                <div class="to-do-due-date-section to-do-task-subcontainer">\n                    <p class="to-do-due-date">DUE DATE PLACEHOLDER</p>\n                    <button class="edit-task-due-date">\n                        <img src="assets/pencil.png" alt="Edit task due date button">\n                    </button>\n                </div>\n            </div>\n            <div class="to-do-description-section to-do-task-subcontainer">\n                <p class="to-do-description">DESCRIPTION PLACEHOLDER</p>\n                <button class="edit-task-description">\n                    <img src="assets/pencil.png" alt="Edit task description button">\n                </button>\n            </div>\n            <div class="to-do-notes-section to-do-task-subcontainer">\n                <p class="to-do-notes">NOTES PLACEHOLDER</p>\n                <button class="edit-task-notes">\n                    <img src="assets/pencil.png" alt="Edit task notes button">\n                </button>\n            </div>\n            <form action="" class="task-checklist">\n                <div class="checklist-header">\n                    <legend class="checklist-label">Checklist</legend>\n                    <button class="add-checklist-task">\n                        <img src="assets/plus.png" alt="Add checklist task button">\n                    </button>\n                </div>\n            </form>\n        ',o.querySelector(".to-do-title").textContent=r,o.querySelector(".to-do-due-date").textContent=i,o.querySelector(".to-do-description").textContent=c,o.querySelector(".to-do-notes").textContent=l,s.appendChild(o),o},insertTaskInputElement:e=>{const t=o.ensureCorrectSubcontainer(e),n=document.createElement("input");return n.classList.add("task-input"),n.setAttribute("type","text"),t.insertBefore(n,t.firstChild),n.focus(),n},setTaskInputElementValue:(e,t)=>{const n=((e,t)=>{switch(o.getButtonType(e)){case"edit-task-title":return t.getTaskTitle();case"edit-task-due-date":return t.getTaskDueDate();case"edit-task-description":return t.getTaskDescription();case"edit-task-notes":return t.getTaskNotes()}})(e,o.getTargetTaskObject(e));t.value=n},insertTaskTitleElement:e=>{const t=o.ensureCorrectSubcontainer(e),n=o.getTargetTaskObject(e),s=o.getSubcontainerType(e);let a;if(s.includes("to-do-title-section")){const e=n.getTaskTitle();a=document.createElement("h3"),a.classList.add("to-do-title"),a.textContent=e}else if(s.includes("to-do-due-date-section")){const e=n.getTaskDueDate();a=document.createElement("p"),a.classList.add("to-do-due-date"),a.textContent=e}else if(s.includes("to-do-description-section")){const e=n.getTaskDescription();a=document.createElement("p"),a.classList.add("to-do-description"),a.textContent=e}else if(s.includes("to-do-notes-section")){const e=n.getTaskNotes();a=document.createElement("p"),a.classList.add("to-do-notes"),a.textContent=e}t.insertBefore(a,t.firstChild)}},b=()=>{document.querySelector(".add-tab").addEventListener("click",P.addTab)},k=()=>{const e=Array.from(document.querySelectorAll(".edit-tab"));for(const t of e)t.addEventListener("click",P.insertTabInputElement)},m=e=>{e.addEventListener("keydown",P.updateTab)},g=e=>{e.querySelector(".edit-tab").addEventListener("click",P.insertTabInputElement)},p=()=>{const e=Array.from(document.querySelectorAll(".remove-tab"));for(const t of e)t.addEventListener("click",P.removeTab)},E=e=>{e.querySelector(".remove-tab").addEventListener("click",P.removeTab)},C=()=>{const e=Array.from(document.querySelectorAll(".switch-tab"));for(const t of e)t.addEventListener("click",P.switchTab)},h=e=>{e.querySelector(".switch-tab").addEventListener("click",P.switchTab)},f=()=>{document.querySelector(".new-to-do-task").addEventListener("click",P.newTask)},v=()=>{const e=Array.from(document.querySelectorAll(".to-do-remove-task"));for(const t of e)t.addEventListener("click",P.removeTask)},S=e=>{e.querySelector(".to-do-remove-task").addEventListener("click",P.removeTask)},y=()=>{const e=Array.from(document.querySelectorAll(".edit-task-title"));for(const t of e)t.addEventListener("click",P.insertTaskTitleInputElement)},I=e=>{e.addEventListener("keydown",P.updateTaskTitle)},D=e=>{e.querySelector(".edit-task-title").addEventListener("click",P.insertTaskTitleInputElement)},L=e=>{const t=o.ensureCorrectTabElement(e).dataset.tabIndex;a.removeTask(t)},x=e=>{const t=o.ensureCorrectTaskElement(e).dataset.taskIndex,n=a.getCurrentTabIndex();a.getSpecificChecklistTask(n).removeTask(t)},A=e=>{const t=o.ensureCorrectTabElement(e);let n=t.querySelector(".switch-tab");t.removeChild(n),n=null},O=e=>{const t=o.ensureCorrectTabElement(e);let n=t.querySelector("input");t.removeChild(n),n=null},q=e=>{let t=o.ensureCorrectTabElement(e);document.querySelector(".to-do-tab-section").removeChild(t),t=null},N=()=>{const e=document.querySelector("#current-tab");null!==e&&e.removeAttribute("id")},w=e=>{let t=o.ensureCorrectTaskElement(e);document.querySelector(".to-do-content").removeChild(t),t=null},j=e=>{const t=o.ensureCorrectSubcontainer(e);let n=t.firstElementChild;t.removeChild(n),n=null},M=e=>{const t=o.ensureCorrectSubcontainer(e);let n=t.querySelector("input");t.removeChild(n),n=null},P={addTab:()=>{const e=r(),t=T.addNewTabToDOM(e);if(g(t),E(t),h(t),o.checkIfOnlyOneTab()){const e=l();T.setFirstTabToCurrentTab(e)}},insertTabInputElement:e=>{if(!o.checkForTabInputElement(e)){const t=T.insertTabInputElement(e);A(e),T.setTabInputElementValue(e,t),m(t)}},updateTab:e=>{"Enter"===e.code&&(c(e),T.insertTabNameElement(e),O(e))},removeTab:e=>{if(L(e),q(e),o.checkIfWasCurrentTab(e)){const e=l();T.setFirstTabToCurrentTab(e)}},switchTab:e=>{i(e),N(),T.setCurrentTabDOM(e)},newTask:()=>{const e=d(),t=T.addNewTaskToDOM(e);S(t),D(t)},removeTask:e=>{x(e),w(e)},insertTaskTitleInputElement:e=>{if(!o.checkForTaskSubcontainerInputElement(e)){j(e);const t=T.insertTaskInputElement(e);T.setTaskInputElementValue(e,t),I(t)}},updateTaskTitle:e=>{"Enter"===e.code&&(u(e),T.insertTaskTitleElement(e),M(e))}};let B=s("Default test");a.addTask(B);let R=n("Make Money TEST","Task Due Date","Task Description","Task Notes");console.log(B.addTask(R)),b(),k(),p(),console.log(a),console.log(a.getChecklistTasks()),console.log(a.getCurrentTabIndex()),console.log(B.getChecklistTasks()),console.log(B.getSpecificChecklistTask(0)),console.log(B.getSpecificChecklistTask(0).getTaskTitle()),T.setDefaultCurrentTabDOM(0),C(),f(),v(),y()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FFN0NzQixJQUVBQSxJQUVBQSxJQUVBQSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy90aXRsZV9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX3Rhc2tfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvZHVlX2RhdGVfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvbm90ZXNfY29tcG9uZW50LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL2NvbXBsZXRlZF9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX3RhYl9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvLWxpc3QvLi9zcmMvb2JqZWN0cy90b2RvX2xpc3Rfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvaGVscGVyX2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvZXZlbnRfYXNzaWduZXJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL29iamVjdHMvb2JqZWN0X2NvbnRyb2xsZXJfcmVtb3ZlX29iamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL0RPTV9jb250cm9sbGVyX3JlbW92ZS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG8tbGlzdC8uL3NyYy9vYmplY3RzL2V2ZW50X2J1bmRsZXJfb2JqZWN0LmpzIiwid2VicGFjazovL29kaW4tdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgPSAob2JqZWN0LCBpbml0aWFsVGl0bGUpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBpbml0aWFsVGl0bGU7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7XG4gICAgICAgIGdldFRhc2tUaXRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza1RpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyB0aXRsZUJlaGF2aW9yQ29tcG9uZW50IH0iLCJjb25zdCBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgY2hlY2tsaXN0ID0gW107XG4gICAgY29uc3QgZ2V0VGFza0luZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hlY2tsaXN0Lmxlbmd0aCAtIDE7XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgICAgICBjaGVja2xpc3QucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBjaGVja2xpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHJldHVybiBnZXRUYXNrSW5kZXgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlVGFzayhpbmRleCkge1xuICAgICAgICAgICAgY2hlY2tsaXN0W2luZGV4XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q2hlY2tsaXN0VGFza3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tsaXN0O1xuICAgICAgICB9LFxuICAgICAgICBnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja2xpc3RbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9OyIsImltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kZXNjcmlwdGlvbl9jb21wb25lbnRcIjtcbmltcG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2R1ZV9kYXRlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgbm90ZXNCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGlubmVkX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZWRfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF90YXNrX2NvbXBvbmVudFwiO1xuXG5jb25zdCB0b0RvVGFzayA9ICh0aXRsZSwgZHVlRGF0ZSwgZGVzY3JpcHRpb24sIG5vdGVzKSA9PiB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICB0aXRsZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgdGl0bGUpLCBcbiAgICAgICAgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudChvYmplY3QsIGRlc2NyaXB0aW9uKSxcbiAgICAgICAgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50KG9iamVjdCwgZHVlRGF0ZSksXG4gICAgICAgIG5vdGVzQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCBub3RlcyksXG4gICAgICAgIC8vIGNvbnRhaW5zQ2hlY2tsaXN0QmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICAgICAgcGlubmVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICAgICAgY29tcGxldGVkQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KSxcbiAgICAgICAgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQob2JqZWN0KVxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCB7IHRvRG9UYXNrIH07IiwiY29uc3QgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxEZXNjcmlwdGlvbikgPT4ge1xuICAgIGxldCBkZXNjcmlwdGlvbiA9IGluaXRpYWxEZXNjcmlwdGlvbjtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza0Rlc2NyaXB0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrRGVzY3JpcHRpb24obmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGRlc2NyaXB0aW9uQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxEdWVEYXRlKSA9PiB7XG4gICAgbGV0IGR1ZURhdGUgPSBpbml0aWFsRHVlRGF0ZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza0R1ZURhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZHVlRGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VGFza0R1ZURhdGUobmV3RHVlRGF0ZSkge1xuICAgICAgICAgICAgZHVlRGF0ZSA9IG5ld0R1ZURhdGU7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCB9IiwiY29uc3Qgbm90ZXNCZWhhdmlvckNvbXBvbmVudCA9IChvYmplY3QsIGluaXRpYWxOb3RlcykgPT4ge1xuICAgIGxldCBub3RlcyA9IGluaXRpYWxOb3RlcztcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgZ2V0VGFza05vdGVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vdGVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUYXNrTm90ZXMobmV3Tm90ZXMpIHtcbiAgICAgICAgICAgIG5vdGVzID0gbmV3Tm90ZXM7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSIsImNvbnN0IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBwaW5uZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgdG9nZ2xlUGlubmVkU3RhdGUoKSB7XG4gICAgICAgICAgICBpZiAocGlubmVkKSB7XG4gICAgICAgICAgICAgICAgcGlubmVkID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBpbm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRQaW5uZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBwaW5uZWQ7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IHBpbm5lZEJlaGF2aW9yQ29tcG9uZW50IH07IiwiLy8gb3JpZ2luYWwgd2hlcmUgYWxsIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgZ2V0IHJldHVybmVkLCBzbyBubyBwcml2YXRlIGZpZWxkcyAoY29tcGxldGVkIHNob3VsZCBiZSBwcml2YXRlKVxuLy8ga2VlcGluZyBmb3IgcG9zdGVyaXR5LCBwcm9iYWJseSB3aWxsIGRlbGV0ZWQgYXQgdGhlIGVuZFxuLy8gY29uc3QgY2FuQ29tcGxldGUgPSAob2JqZWN0KSA9PiAoe1xuLy8gICAgIGNvbXBsZXRlZDogZmFsc2UsXG4vLyAgICAgdG9nZ2xlOiAoKSA9PiB7XG4vLyAgICAgICAgIGlmIChvYmplY3QuY29tcGxldGVkKSB7XG4vLyAgICAgICAgICAgICBvYmplY3QuY29tcGxldGVkID0gZmFsc2U7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBvYmplY3QuY29tcGxldGVkID0gdHJ1ZTtcbi8vICAgICAgICAgfTtcbi8vICAgICB9LFxuLy8gICAgIGdldENvbXBsZXRlZFN0YXRlOiAoKSA9PiB7XG4vLyAgICAgICAgIHJldHVybiBvYmplY3QuY29tcGxldGVkXG4vLyAgICAgfVxuLy8gfSk7XG5cbmNvbnN0IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50ID0gKG9iamVjdCkgPT4ge1xuICAgIGxldCBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmplY3QsIHtcbiAgICAgICAgdG9nZ2xlQ29tcGxldGVkU3RhdGUoKSB7XG4gICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRDb21wbGV0ZWRTdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQ7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7IGNvbXBsZXRlZEJlaGF2aW9yQ29tcG9uZW50IH07IiwiaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbmNvbnN0IHRvRG9UYWIgPSAodGl0bGUpID0+IHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsXG4gICAgICAgIHRpdGxlQmVoYXZpb3JDb21wb25lbnQob2JqZWN0LCB0aXRsZSksXG4gICAgICAgIGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50KG9iamVjdClcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5leHBvcnQgeyB0b0RvVGFiIH07IiwiLy8gaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhaW5zX2NoZWNrbGlzdF9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbmNvbnN0IHRvRG9MaXN0ID0gKCgpID0+IHtcbiAgICBsZXQgY3VycmVudFRhYiA9IDA7XG4gICAgY29uc3QgZ2V0Q3VycmVudFRhYkluZGV4ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY3VycmVudFRhYjtcbiAgICB9O1xuICAgIGNvbnN0IHNldEN1cnJlbnRUYWJJbmRleCA9IChuZXdDdXJyZW50VGFiKSA9PiB7XG4gICAgICAgIGN1cnJlbnRUYWIgPSBuZXdDdXJyZW50VGFiO1xuICAgIH07XG4gICAgbGV0IG9iamVjdCA9IHtcbiAgICAgICAgZ2V0Q3VycmVudFRhYkluZGV4LFxuICAgICAgICBzZXRDdXJyZW50VGFiSW5kZXhcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LFxuICAgICAgICBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudChvYmplY3QpLFxuICAgICk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn0pKCk7XG5cbmV4cG9ydCB7IHRvRG9MaXN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5cbmNvbnN0IGhlbHBlckZ1bmN0aW9ucyA9ICgoKSA9PiB7XG4gICAgY29uc3QgZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgbGV0IHRhYkVsZW1lbnQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgd2hpbGUgKHRhYkVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgIT09IFwidGFiLXRpdGxlXCIpIHtcbiAgICAgICAgICAgIHRhYkVsZW1lbnQgPSB0YWJFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YWJFbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tGb3JUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgaWYgKHRhYkVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWZXYXNDdXJyZW50VGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGlmICh0YWJFbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBcImN1cnJlbnQtdGFiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2hlY2tJZk9ubHlPbmVUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgdG9Eb1RhYnMgPSBBcnJheS5mcm9tKHRvRG9UYWJTZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLXRpdGxlXCIpKTtcbiAgICAgICAgaWYgKHRvRG9UYWJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgbGV0IHRhc2tFbGVtZW50ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlICh0YXNrRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gXCJ0by1kby10YXNrXCIpIHtcbiAgICAgICAgICAgIHRhc2tFbGVtZW50ID0gdGFza0VsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCB0YXNrU3ViY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKHRhc2tTdWJjb250YWluZXIuY2xhc3NMaXN0KVxuICAgICAgICB3aGlsZSAoIWNsYXNzTGlzdC5pbmNsdWRlcyhcInRvLWRvLXRhc2stc3ViY29udGFpbmVyXCIpKSB7XG4gICAgICAgICAgICB0YXNrU3ViY29udGFpbmVyID0gdGFza1N1YmNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NMaXN0ID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyLmNsYXNzTGlzdClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFza1N1YmNvbnRhaW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrRm9yVGFza1N1YmNvbnRhaW5lcklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyID0gZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGlmICh0YXNrU3ViY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBnZXRUYXJnZXRUYXNrT2JqZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YXNrRWxlbWVudC5kYXRhc2V0LnRhc2tJbmRleDtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gdG9Eb0xpc3QuZ2V0Q3VycmVudFRhYkluZGV4KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soY3VycmVudFRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGN1cnJlbnRUYWJPYmplY3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Q7XG4gICAgfTtcbiAgICBjb25zdCBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgYnV0dG9uRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgd2hpbGUgKGJ1dHRvbkVsZW1lbnQudGFnTmFtZSAhPT0gXCJCVVRUT05cIikge1xuICAgICAgICAgICAgYnV0dG9uRWxlbWVudCA9IGJ1dHRvbkVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBnZXRCdXR0b25UeXBlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNsYXNzTGlzdCA9IGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0O1xuICAgICAgICBjb25zdCBidXR0b25UeXBlID0gQXJyYXkuZnJvbShidXR0b25DbGFzc0xpc3QpWzBdO1xuICAgICAgICByZXR1cm4gYnV0dG9uVHlwZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFN1YmNvbnRhaW5lclR5cGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGVuc3VyZUNvcnJlY3RTdWJjb250YWluZXIoZXZlbnQpO1xuICAgICAgICBjb25zdCBzdWJjb250YWluZXJDbGFzc2VzID0gQXJyYXkuZnJvbSh0YXNrU3ViY29udGFpbmVyLmNsYXNzTGlzdCk7XG4gICAgICAgIHJldHVybiBzdWJjb250YWluZXJDbGFzc2VzO1xuICAgIH07XG4gICAgcmV0dXJuIHsgZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQsIGNoZWNrRm9yVGFiSW5wdXRFbGVtZW50LCBjaGVja0lmV2FzQ3VycmVudFRhYixcbiAgICAgICAgY2hlY2tJZk9ubHlPbmVUYWIsIGVuc3VyZUNvcnJlY3RUYXNrRWxlbWVudCwgZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcixcbiAgICAgICAgY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50LCBnZXRUYXJnZXRUYXNrT2JqZWN0LCBlbnN1cmVDb3JyZWN0QnV0dG9uRWxlbWVudCwgZ2V0QnV0dG9uVHlwZSwgZ2V0U3ViY29udGFpbmVyVHlwZSwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9OyIsImltcG9ydCB7IHRvRG9MaXN0IH0gZnJvbSBcIi4vdG9kb19saXN0X29iamVjdFwiO1xuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL3RvZG9fdGFiX29iamVjdFwiO1xuaW1wb3J0IHsgdGl0bGVCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RUYXNrQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250YWluc19jaGVja2xpc3RfdGFza19jb21wb25lbnRcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IHRvRG9UYXNrIH0gZnJvbSBcIi4vdG9kb190YXNrX29iamVjdFwiO1xuXG5jb25zdCBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkTmV3VGFiVG9Ub2RvQXJyYXkgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RhYiA9IHRvRG9UYWIoXCJOZXcgVGFiXCIpO1xuICAgICAgICByZXR1cm4gdG9Eb0xpc3QuYWRkVGFzayhuZXdUYWIpO1xuICAgIH1cbiAgICBjb25zdCBlZGl0VGFiTmFtZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhcmdldFRhYiA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIHRhcmdldFRhYi5zZXRUYXNrVGl0bGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlQ3VycmVudFRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDdXJyZW50VGFiID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuZXdDdXJyZW50VGFiLmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHRvRG9MaXN0LnNldEN1cnJlbnRUYWJJbmRleChpbmRleClcbiAgICB9XG4gICAgY29uc3Qgc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYkFycmF5ID0gdG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKTtcbiAgICAgICAgbGV0IGZpcnN0VGFiID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IHRhYiBpbiB0YWJBcnJheSkge1xuICAgICAgICAgICAgaWYgKHRhYkFycmF5W3RhYl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRvRG9MaXN0LnNldEN1cnJlbnRUYWJJbmRleCh0YWIpO1xuICAgICAgICAgICAgICAgIGZpcnN0VGFiID0gdGFiO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdFRhYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgYWRkTmV3VGFza1RvVGFiID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYiA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFiSW5kZXgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrID0gdG9Eb1Rhc2soXCJOZXcgVGFza1wiLCBcIlRhc2sgRHVlIERhdGVcIiwgXCJUYXNrIERlc2NyaXB0aW9uXCIsIFwiVGFzayBOb3Rlc1wiKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0luZGV4ID0gY3VycmVudFRhYi5hZGRUYXNrKG5ld1Rhc2spO1xuICAgICAgICByZXR1cm4gbmV3VGFza0luZGV4O1xuICAgIH07XG4gICAgLy8gdmFyaWF0aW9uIGhlcmVcbiAgICBjb25zdCBlZGl0VGFza09iamVjdEluZm8gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3VGFza1RpdGxlVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXJUeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldFN1YmNvbnRhaW5lclR5cGUoZXZlbnQpO1xuICAgICAgICBpZiAodGFza1N1YmNvbnRhaW5lclR5cGUuaW5jbHVkZXMoXCJ0by1kby10aXRsZS1zZWN0aW9uXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFza09iamVjdC5zZXRUYXNrVGl0bGUobmV3VGFza1RpdGxlVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Quc2V0VGFza0R1ZURhdGUobmV3VGFza1RpdGxlVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZGVzY3JpcHRpb24tc2VjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmplY3Quc2V0VGFza0Rlc2NyaXB0aW9uKG5ld1Rhc2tUaXRsZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLW5vdGVzLXNlY3Rpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrT2JqZWN0LnNldFRhc2tOb3RlcyhuZXdUYXNrVGl0bGVWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4geyBhZGROZXdUYWJUb1RvZG9BcnJheSwgZWRpdFRhYk5hbWUsIHVwZGF0ZUN1cnJlbnRUYWIsIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLFxuICAgICAgICBhZGROZXdUYXNrVG9UYWIsIGVkaXRUYXNrT2JqZWN0SW5mbywgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IH07IiwiaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi90b2RvX2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyB0b0RvVGFiIH0gZnJvbSBcIi4vdG9kb190YWJfb2JqZWN0XCI7XG5pbXBvcnQgeyBoZWxwZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi9oZWxwZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IERPTUNvbnRyb2xsZXJBZGRFZGl0ID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJUb0RPTSA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBhZGRUYWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YWJcIik7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgY29uc3QgbmV3VGFiTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnN0IG5ld1RhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld1RhYk9iamVjdFRpdGxlID0gbmV3VGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBuZXdUYWJOb2RlLmNsYXNzTGlzdC5hZGQoXCJ0YWItdGl0bGVcIik7XG4gICAgICAgIG5ld1RhYk5vZGUuZGF0YXNldC50YWJJbmRleCA9IGluZGV4O1xuICAgICAgICBuZXdUYWJOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzd2l0Y2gtdGFiXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGFiLW5hbWVcIj5UQUIgTkFNRSBQTEFDRUhPTERFUjwvaDI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhYlwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhYiBuYW1lIGJ1dHRvblwiPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVtb3ZlLXRhYlwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIlJlbW92ZSB0YWIgYnV0dG9uXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgdGFiTmFtZURPTSA9IG5ld1RhYk5vZGUucXVlcnlTZWxlY3RvcihcIi50YWItbmFtZVwiKTtcbiAgICAgICAgdGFiTmFtZURPTS50ZXh0Q29udGVudCA9IG5ld1RhYk9iamVjdFRpdGxlO1xuICAgICAgICB0b0RvVGFiU2VjdGlvbi5pbnNlcnRCZWZvcmUobmV3VGFiTm9kZSwgYWRkVGFiQnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIG5ld1RhYk5vZGU7XG4gICAgfVxuICAgIGNvbnN0IHNldFRhYklucHV0RWxlbWVudFZhbHVlID0gKGV2ZW50LCBpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGFiRWxlbWVudC5kYXRhc2V0LnRhYkluZGV4O1xuICAgICAgICBjb25zdCB0YWJPYmplY3QgPSB0b0RvTGlzdC5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soaW5kZXgpO1xuICAgICAgICBjb25zdCB0YWJOYW1lID0gdGFiT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBpbnB1dEVsZW1lbnQudmFsdWUgPSB0YWJOYW1lO1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWItbmFtZS1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICB0YWJFbGVtZW50Lmluc2VydEJlZm9yZShpbnB1dEVsZW1lbnQsIHRhYkVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJOYW1lRWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIGNvbnN0IHRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IHRhYk5hbWUgPSB0YWJPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIGNvbnN0IHRhYkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwic3dpdGNoLXRhYlwiKTtcbiAgICAgICAgY29uc3QgdGFiQnV0dG9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGFiQnV0dG9uTmFtZS50ZXh0Q29udGVudCA9IHRhYk5hbWU7XG4gICAgICAgIHRhYkJ1dHRvbi5hcHBlbmRDaGlsZCh0YWJCdXR0b25OYW1lKTtcbiAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRCZWZvcmUodGFiQnV0dG9uLCB0YWJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0RGVmYXVsdEN1cnJlbnRUYWJET00gPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gdG9Eb1RhYlNlY3Rpb24ucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFiLWluZGV4PScke2luZGV4fSddYCk7XG4gICAgICAgIGN1cnJlbnRUYWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldEN1cnJlbnRUYWJET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbmV3Q3VycmVudFRhYiA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIG5ld0N1cnJlbnRUYWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9XG4gICAgY29uc3Qgc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIgPSAoZmlyc3RUYWJJbmRleCkgPT4ge1xuICAgICAgICBpZiAoZmlyc3RUYWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9Eb1RhYlNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRhYi1zZWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBmaXJzdFRhYiA9IHRvRG9UYWJTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYi1pbmRleD0nJHtmaXJzdFRhYkluZGV4fSddYClcbiAgICAgICAgZmlyc3RUYWIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjdXJyZW50LXRhYlwiKTtcbiAgICB9XG4gICAgY29uc3QgYWRkTmV3VGFza1RvRE9NID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWJJbmRleCA9IHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiT2JqZWN0ID0gdG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKGN1cnJlbnRUYWJJbmRleCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tPYmplY3QgPSBjdXJyZW50VGFiT2JqZWN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhpbmRleCk7XG4gICAgICAgIGNvbnN0IHRvRG9Db250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICBjb25zdCBuZXdUYXNrTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG5ld1Rhc2tOb2RlLmNsYXNzTGlzdC5hZGQoXCJ0by1kby10YXNrXCIpO1xuICAgICAgICBuZXdUYXNrTm9kZS5kYXRhc2V0LnRhc2tJbmRleCA9IGluZGV4O1xuICAgICAgICBjb25zdCBuZXdUYXNrVGl0bGUgPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBjb25zdCBuZXdUYXNrRGVzY3JpcHRpb24gPSBuZXdUYXNrT2JqZWN0LmdldFRhc2tEZXNjcmlwdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdUYXNrRHVlRGF0ZSA9IG5ld1Rhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3VGFza05vdGVzID0gbmV3VGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgbmV3VGFza05vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLXRhc2stb3ZlcnZpZXdcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tdGl0bGUtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ0by1kby10aXRsZVwiPlRJVExFIFBMQUNFSE9MREVSPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvLWRvLXBpblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9waW4tb3V0bGluZS5wbmdcIiBhbHQ9XCJQaW4gdGFzayBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgdGl0bGUgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG8tZG8tcmVtb3ZlLXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiIGFsdD1cIlJlbW92ZSB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tY29tcGxldGUtc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tY29tcGxldGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJ0by1kby1jb21wbGV0ZS1jaGVja2JveFwiIGNsYXNzPVwidG8tZG8tY29tcGxldGUtbGFiZWxcIj5Db21wbGV0ZWQ6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiXCIgY2xhc3M9XCJ0by1kby1jb21wbGV0ZS1jaGVja2JveFwiIGlkPVwidG8tZG8tY29tcGxldGUtY2hlY2tib3hcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0by1kby10YXNrLWNoYW5nZS1kaXNwbGF5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9jaGV2cm9uLWRvd24ucG5nXCIgYWx0PVwiQ2hhbmdlIHRhc2sgZGlzcGxheSBidXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWR1ZS1kYXRlLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0by1kby1kdWUtZGF0ZVwiPkRVRSBEQVRFIFBMQUNFSE9MREVSPC9wPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLWR1ZS1kYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIGR1ZSBkYXRlIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uLXNlY3Rpb24gdG8tZG8tdGFzay1zdWJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvLWRvLWRlc2NyaXB0aW9uXCI+REVTQ1JJUFRJT04gUExBQ0VIT0xERVI8L3A+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdGFzay1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9wZW5jaWwucG5nXCIgYWx0PVwiRWRpdCB0YXNrIGRlc2NyaXB0aW9uIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG8tZG8tbm90ZXMtc2VjdGlvbiB0by1kby10YXNrLXN1YmNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidG8tZG8tbm90ZXNcIj5OT1RFUyBQTEFDRUhPTERFUjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLW5vdGVzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BlbmNpbC5wbmdcIiBhbHQ9XCJFZGl0IHRhc2sgbm90ZXMgYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj1cIlwiIGNsYXNzPVwidGFzay1jaGVja2xpc3RcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2tsaXN0LWhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8bGVnZW5kIGNsYXNzPVwiY2hlY2tsaXN0LWxhYmVsXCI+Q2hlY2tsaXN0PC9sZWdlbmQ+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJhZGQtY2hlY2tsaXN0LXRhc2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3BsdXMucG5nXCIgYWx0PVwiQWRkIGNoZWNrbGlzdCB0YXNrIGJ1dHRvblwiPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgdGl0bGVET00gPSBuZXdUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLXRpdGxlXCIpO1xuICAgICAgICB0aXRsZURPTS50ZXh0Q29udGVudCA9IG5ld1Rhc2tUaXRsZTtcbiAgICAgICAgY29uc3QgZHVlRGF0ZURPTSA9IG5ld1Rhc2tOb2RlLnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tZHVlLWRhdGVcIik7XG4gICAgICAgIGR1ZURhdGVET00udGV4dENvbnRlbnQgPSBuZXdUYXNrRHVlRGF0ZTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25ET00gPSBuZXdUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBkZXNjcmlwdGlvbkRPTS50ZXh0Q29udGVudCA9IG5ld1Rhc2tEZXNjcmlwdGlvbjtcbiAgICAgICAgY29uc3Qgbm90ZXNET00gPSBuZXdUYXNrTm9kZS5xdWVyeVNlbGVjdG9yKFwiLnRvLWRvLW5vdGVzXCIpO1xuICAgICAgICBub3Rlc0RPTS50ZXh0Q29udGVudCA9IG5ld1Rhc2tOb3RlcztcbiAgICAgICAgdG9Eb0NvbnRlbnQuYXBwZW5kQ2hpbGQobmV3VGFza05vZGUpO1xuICAgICAgICByZXR1cm4gbmV3VGFza05vZGU7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhc2tJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhc2staW5wdXRcIik7XG4gICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoaW5wdXRFbGVtZW50LCB0YXNrU3ViY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudDtcbiAgICB9O1xuICAgIC8vIHZhcmlhdGlvbiBoZXJlXG4gICAgY29uc3Qgc2V0VGFza0lucHV0RWxlbWVudFZhbHVlID0gKGV2ZW50LCBpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gY29uc3QgdGFza1N1YmNvbnRlbnQgPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICBjb25zdCB0YXNrU3ViY29udGVudCA9IGdldFRhc2tJbmZvKGV2ZW50LCB0YXNrT2JqZWN0KTtcbiAgICAgICAgLy9cbiAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gdGFza1N1YmNvbnRlbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluc2VydFRhc2tUaXRsZUVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgY29uc3QgdGFza09iamVjdCA9IGhlbHBlckZ1bmN0aW9ucy5nZXRUYXJnZXRUYXNrT2JqZWN0KGV2ZW50KTtcblxuICAgICAgICBjb25zdCB0YXNrU3ViY29udGFpbmVyVHlwZSA9IGhlbHBlckZ1bmN0aW9ucy5nZXRTdWJjb250YWluZXJUeXBlKGV2ZW50KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tdGl0bGUtc2VjdGlvblwiKSkge1xuXG4gICAgICAgICAgICBjb25zdCB0YXNrVGl0bGUgPSB0YXNrT2JqZWN0LmdldFRhc2tUaXRsZSgpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby10aXRsZVwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2tUaXRsZTtcblxuICAgICAgICB9IGVsc2UgaWYgKHRhc2tTdWJjb250YWluZXJUeXBlLmluY2x1ZGVzKFwidG8tZG8tZHVlLWRhdGUtc2VjdGlvblwiKSkge1xuXG4gICAgICAgICAgICBjb25zdCB0YXNrRHVlRGF0ZSA9IHRhc2tPYmplY3QuZ2V0VGFza0R1ZURhdGUoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1kdWUtZGF0ZVwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2tEdWVEYXRlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodGFza1N1YmNvbnRhaW5lclR5cGUuaW5jbHVkZXMoXCJ0by1kby1kZXNjcmlwdGlvbi1zZWN0aW9uXCIpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IHRhc2tPYmplY3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCk7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG8tZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgICAgICB0YXNrU3ViY29udGVudEVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrRGVzY3JpcHRpb247XG5cbiAgICAgICAgfSBlbHNlIGlmICh0YXNrU3ViY29udGFpbmVyVHlwZS5pbmNsdWRlcyhcInRvLWRvLW5vdGVzLXNlY3Rpb25cIikpIHtcblxuICAgICAgICAgICAgY29uc3QgdGFza05vdGVzID0gdGFza09iamVjdC5nZXRUYXNrTm90ZXMoKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby1ub3Rlc1wiKTtcbiAgICAgICAgICAgIHRhc2tTdWJjb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2tOb3RlcztcblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGNvbnN0IHRhc2tUaXRsZSA9IHRhc2tPYmplY3QuZ2V0VGFza1RpdGxlKCk7XG4gICAgICAgIC8vIGNvbnN0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgICAgLy8gdGFza1N1YmNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0by1kby10aXRsZVwiKTtcbiAgICAgICAgLy8gdGFza1N1YmNvbnRlbnRFbGVtZW50LnRleHRDb250ZW50ID0gdGFza1RpdGxlO1xuXG5cbiAgICAgICAgdGFza1N1YmNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGFza1N1YmNvbnRlbnRFbGVtZW50LCB0YXNrU3ViY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBjb25zdCBnZXRUYXNrSW5mbyA9IChldmVudCwgdGFza09iamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBidXR0b25UeXBlID0gaGVscGVyRnVuY3Rpb25zLmdldEJ1dHRvblR5cGUoZXZlbnQpO1xuICAgICAgICBzd2l0Y2ggKGJ1dHRvblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJlZGl0LXRhc2stdGl0bGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza09iamVjdC5nZXRUYXNrVGl0bGUoKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVkaXQtdGFzay1kdWUtZGF0ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrT2JqZWN0LmdldFRhc2tEdWVEYXRlKClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlZGl0LXRhc2stZGVzY3JpcHRpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza09iamVjdC5nZXRUYXNrRGVzY3JpcHRpb24oKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVkaXQtdGFzay1ub3Rlc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrT2JqZWN0LmdldFRhc2tOb3RlcygpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGFkZE5ld1RhYlRvRE9NLCBzZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZSxcbiAgICAgICAgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LCBpbnNlcnRUYWJOYW1lRWxlbWVudCwgc2V0RGVmYXVsdEN1cnJlbnRUYWJET00sXG4gICAgICAgIHNldEN1cnJlbnRUYWJET00sIHNldEZpcnN0VGFiVG9DdXJyZW50VGFiLCBhZGROZXdUYXNrVG9ET00sXG4gICAgICAgIGluc2VydFRhc2tJbnB1dEVsZW1lbnQsIHNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSwgaW5zZXJ0VGFza1RpdGxlRWxlbWVudCwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH07IiwiaW1wb3J0IHsgRE9NVXBkYXRlQ29udHJvbGxlciB9IGZyb20gXCIuL0RPTV9jb250cm9sbGVyX2FkZF9lZGl0XCI7XG5pbXBvcnQgeyBldmVudEJ1bmRsZXIgfSBmcm9tIFwiLi9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuXG5jb25zdCBldmVudEFzc2lnbmVyID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGROZXdUYWJMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYWRkVGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFiXCIpO1xuICAgICAgICBhZGRUYWJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5hZGRUYWIpO1xuICAgIH07XG4gICAgY29uc3QgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFZGl0QnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYkVkaXRCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYWJJbnB1dEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFkZFRhYklucHV0TGlzdGVuZXIgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudEJ1bmRsZXIudXBkYXRlVGFiKVxuICAgIH1cbiAgICBjb25zdCBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzID0gKHRhYkVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWRpdEJ1dHRvbiA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lZGl0LXRhYlwiKTtcbiAgICAgICAgdGFiRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhYklucHV0RWxlbWVudCk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvckluaXRpYWxUYWJzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnJlbW92ZS10YWJcIikpO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0YWJSZW1vdmVCdXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYWIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzID0gKHRhYkVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiUmVtb3ZlQnV0dG9uID0gdGFiRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlbW92ZS10YWJcIik7XG4gICAgICAgIHRhYlJlbW92ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhYik7XG4gICAgfVxuICAgIGNvbnN0IGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYlN3aXRjaEJ1dHRvbnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3dpdGNoLXRhYlwiKSk7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRhYlN3aXRjaEJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnN3aXRjaFRhYik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9yTmV3VGFicyA9ICh0YWJFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYlN3aXRjaEJ1dHRvbiA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zd2l0Y2gtdGFiXCIpO1xuICAgICAgICB0YWJTd2l0Y2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5zd2l0Y2hUYWIpXG4gICAgfVxuICAgIGNvbnN0IGFkZE5ld1Rhc2tMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFza0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3LXRvLWRvLXRhc2tcIik7XG4gICAgICAgIG5ld1Rhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5uZXdUYXNrKTtcbiAgICB9XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tSZW1vdmVCdXR0b25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvLWRvLXJlbW92ZS10YXNrXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza1JlbW92ZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLnJlbW92ZVRhc2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyRm9yTmV3VGFza3MgPSAodGFza0VsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1JlbW92ZUJ1dHRvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG8tZG8tcmVtb3ZlLXRhc2tcIik7XG4gICAgICAgIHRhc2tSZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5yZW1vdmVUYXNrKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZEVkaXRUYXNrVGl0bGVMaXN0ZW5lckZvckluaXRpYWxUYXNrcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VkaXRUaXRsZUJ1dHRvbnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWRpdC10YXNrLXRpdGxlXCIpKTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgdGFza0VkaXRUaXRsZUJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRCdW5kbGVyLmluc2VydFRhc2tUaXRsZUlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBhZGRUYXNrVGl0bGVJbnB1dExpc3RlbmVyID0gKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnRCdW5kbGVyLnVwZGF0ZVRhc2tUaXRsZSk7XG4gICAgfTtcbiAgICBjb25zdCBhZGRFZGl0VGFza1RpdGxlTGlzdGVuZXJGb3JOZXdUYXNrcyA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWRpdFRpdGxlQnV0dG9uID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lZGl0LXRhc2stdGl0bGVcIik7XG4gICAgICAgIHRhc2tFZGl0VGl0bGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50QnVuZGxlci5pbnNlcnRUYXNrVGl0bGVJbnB1dEVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4geyBhZGROZXdUYWJMaXN0ZW5lciwgYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyLCBhZGRUYWJJbnB1dExpc3RlbmVyLFxuICAgICAgICBhZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzLCBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvckluaXRpYWxUYWJzLFxuICAgICAgICBhZGRSZW1vdmVUYWJCdXR0b25MaXN0ZW5lckZvck5ld1RhYnMsIGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMsXG4gICAgICAgIGFkZFN3aXRjaFRhYkxpc3RlbmVyRm9yTmV3VGFicywgYWRkTmV3VGFza0xpc3RlbmVyLCBhZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicyxcbiAgICAgICAgYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyRm9yTmV3VGFza3MsIGFkZEVkaXRUYXNrVGl0bGVMaXN0ZW5lckZvckluaXRpYWxUYXNrcyxcbiAgICAgICAgYWRkVGFza1RpdGxlSW5wdXRMaXN0ZW5lciwgYWRkRWRpdFRhc2tUaXRsZUxpc3RlbmVyRm9yTmV3VGFza3MgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QXNzaWduZXIgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJBZGRFZGl0IH0gZnJvbSBcIi4vRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3Qgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiRnJvbVRvZG9BcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWJFbGVtZW50LmRhdGFzZXQudGFiSW5kZXg7XG4gICAgICAgIHRvRG9MaXN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlVGFza0Zyb21UYWJBcnJheSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFza0VsZW1lbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRhc2tFbGVtZW50LmRhdGFzZXQudGFza0luZGV4O1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiSW5kZXggPSB0b0RvTGlzdC5nZXRDdXJyZW50VGFiSW5kZXgoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRhYk9iamVjdCA9IHRvRG9MaXN0LmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzayhjdXJyZW50VGFiSW5kZXgpO1xuICAgICAgICBjdXJyZW50VGFiT2JqZWN0LnJlbW92ZVRhc2soaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4geyByZW1vdmVUYWJGcm9tVG9kb0FycmF5LCByZW1vdmVUYXNrRnJvbVRhYkFycmF5fTtcbn0pKCk7XG5cbmV4cG9ydCB7IG9iamVjdENvbnRyb2xsZXJSZW1vdmVPYmplY3QgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgRE9NQ29udHJvbGxlclJlbW92ZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlVGFiTmFtZUVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGxldCBzd2l0Y2hUYWIgPSB0YWJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpdGNoLXRhYlwiKVxuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKHN3aXRjaFRhYik7XG4gICAgICAgIHN3aXRjaFRhYiA9IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYklucHV0RWxlbWVudCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gaGVscGVyRnVuY3Rpb25zLmVuc3VyZUNvcnJlY3RUYWJFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgbGV0IGlucHV0RWxlbWVudCA9IHRhYkVsZW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xuICAgICAgICB0YWJFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFiRWxlbWVudCA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0VGFiRWxlbWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IHRvRG9UYWJTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby10YWItc2VjdGlvblwiKTtcbiAgICAgICAgdG9Eb1RhYlNlY3Rpb24ucmVtb3ZlQ2hpbGQodGFiRWxlbWVudCk7XG4gICAgICAgIHRhYkVsZW1lbnQgPSBudWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVzZXRDdXJyZW50VGFiU3RhdHVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjdXJyZW50LXRhYlwiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUYWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUYWIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tFbGVtZW50RnJvbURPTSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdGFza0VsZW1lbnQgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgY29uc3QgdG9Eb1Rhc2tTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50by1kby1jb250ZW50XCIpO1xuICAgICAgICB0b0RvVGFza1NlY3Rpb24ucmVtb3ZlQ2hpbGQodGFza0VsZW1lbnQpO1xuICAgICAgICB0YXNrRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFza1N1YmNvbnRhaW5lciA9IGhlbHBlckZ1bmN0aW9ucy5lbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyKGV2ZW50KTtcbiAgICAgICAgbGV0IHRhc2tTdWJjb250ZW50RWxlbWVudCA9IHRhc2tTdWJjb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHRhc2tTdWJjb250YWluZXIucmVtb3ZlQ2hpbGQodGFza1N1YmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgdGFza1N1YmNvbnRlbnRFbGVtZW50ID0gbnVsbFxuICAgIH1cbiAgICBjb25zdCByZW1vdmVUYXNrSW5wdXRFbGVtZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tTdWJjb250YWluZXIgPSBoZWxwZXJGdW5jdGlvbnMuZW5zdXJlQ29ycmVjdFN1YmNvbnRhaW5lcihldmVudCk7XG4gICAgICAgIGxldCBpbnB1dEVsZW1lbnQgPSB0YXNrU3ViY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgdGFza1N1YmNvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4geyByZW1vdmVUYWJOYW1lRWxlbWVudCwgcmVtb3ZlVGFiSW5wdXRFbGVtZW50LCByZW1vdmVUYWJFbGVtZW50RnJvbURPTSxcbiAgICAgICAgcmVzZXRDdXJyZW50VGFiU3RhdHVzLCByZW1vdmVUYXNrRWxlbWVudEZyb21ET00sIHJlbW92ZVRhc2tTdWJjb250ZW50RWxlbWVudEZyb21ET00sXG4gICAgICAgIHJlbW92ZVRhc2tJbnB1dEVsZW1lbnQsIH1cbn0pKCk7XG5cbmV4cG9ydCB7IERPTUNvbnRyb2xsZXJSZW1vdmUgfTsiLCJpbXBvcnQgeyB0b0RvTGlzdCB9IGZyb20gXCIuL3RvZG9fbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IHRvRG9UYWIgfSBmcm9tIFwiLi90b2RvX3RhYl9vYmplY3RcIjtcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90aXRsZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5pbXBvcnQgeyBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdCB9IGZyb20gXCIuL29iamVjdF9jb250cm9sbGVyX2FkZF9lZGl0X29iamVjdFwiO1xuaW1wb3J0IHsgRE9NQ29udHJvbGxlckFkZEVkaXQgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9hZGRfZWRpdFwiO1xuaW1wb3J0IHsgZXZlbnRBc3NpZ25lciB9IGZyb20gXCIuL2V2ZW50X2Fzc2lnbmVyX29iamVjdFwiO1xuaW1wb3J0IHsgb2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCB9IGZyb20gXCIuL29iamVjdF9jb250cm9sbGVyX3JlbW92ZV9vYmplY3RcIjtcbmltcG9ydCB7IGhlbHBlckZ1bmN0aW9ucyB9IGZyb20gXCIuL2hlbHBlcl9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IERPTUNvbnRyb2xsZXJSZW1vdmUgfSBmcm9tIFwiLi9ET01fY29udHJvbGxlcl9yZW1vdmVcIjtcblxuY29uc3QgZXZlbnRCdW5kbGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGRUYWIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RhYkluZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFiVG9Ub2RvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgbmV3VGFiTm9kZSA9IERPTUNvbnRyb2xsZXJBZGRFZGl0LmFkZE5ld1RhYlRvRE9NKG5ld1RhYkluZGV4KTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiQnV0dG9uTGlzdGVuZXJGb3JOZXdUYWJzKG5ld1RhYk5vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyRm9yTmV3VGFicyhuZXdUYWJOb2RlKTtcbiAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lckZvck5ld1RhYnMobmV3VGFiTm9kZSk7XG4gICAgICAgIGlmIChoZWxwZXJGdW5jdGlvbnMuY2hlY2tJZk9ubHlPbmVUYWIoKSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJJbmRleCA9IG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnNldEZpcnN0VGFiVG9DdXJyZW50VGFiKCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYihmaXJzdFRhYkluZGV4KVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpbnNlcnRUYWJJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JUYWJJbnB1dEVsZW1lbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBET01Db250cm9sbGVyQWRkRWRpdC5pbnNlcnRUYWJJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYWJOYW1lRWxlbWVudChldmVudCk7XG4gICAgICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRUYWJJbnB1dEVsZW1lbnRWYWx1ZShldmVudCwgaW5wdXRFbGVtZW50KTtcbiAgICAgICAgICAgIGV2ZW50QXNzaWduZXIuYWRkVGFiSW5wdXRMaXN0ZW5lcihpbnB1dEVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1cGRhdGVUYWIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LmVkaXRUYWJOYW1lKGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhYk5hbWVFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJSZW1vdmUucmVtb3ZlVGFiSW5wdXRFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVRhYiA9IChldmVudCkgPT4ge1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZVRhYkZyb21Ub2RvQXJyYXkoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYkVsZW1lbnRGcm9tRE9NKGV2ZW50KTtcbiAgICAgICAgaWYgKGhlbHBlckZ1bmN0aW9ucy5jaGVja0lmV2FzQ3VycmVudFRhYihldmVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0VGFiSW5kZXggPSBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5zZXRGaXJzdFRhYlRvQ3VycmVudFRhYigpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0Rmlyc3RUYWJUb0N1cnJlbnRUYWIoZmlyc3RUYWJJbmRleClcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3dpdGNoVGFiID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIG9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0LnVwZGF0ZUN1cnJlbnRUYWIoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlc2V0Q3VycmVudFRhYlN0YXR1cygpO1xuICAgICAgICBET01Db250cm9sbGVyQWRkRWRpdC5zZXRDdXJyZW50VGFiRE9NKGV2ZW50KTtcbiAgICB9XG4gICAgY29uc3QgbmV3VGFzayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFza0luZGV4ID0gb2JqZWN0Q29udHJvbGxlckFkZEVkaXRPYmplY3QuYWRkTmV3VGFza1RvVGFiKCk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tOb2RlID0gRE9NQ29udHJvbGxlckFkZEVkaXQuYWRkTmV3VGFza1RvRE9NKG5ld1Rhc2tJbmRleCk7XG4gICAgICAgIGV2ZW50QXNzaWduZXIuYWRkUmVtb3ZlVGFza0J1dHRvbkxpc3RlbmVyRm9yTmV3VGFza3MobmV3VGFza05vZGUpO1xuICAgICAgICBldmVudEFzc2lnbmVyLmFkZEVkaXRUYXNrVGl0bGVMaXN0ZW5lckZvck5ld1Rhc2tzKG5ld1Rhc2tOb2RlKTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlVGFzayA9IChldmVudCkgPT4ge1xuICAgICAgICBvYmplY3RDb250cm9sbGVyUmVtb3ZlT2JqZWN0LnJlbW92ZVRhc2tGcm9tVGFiQXJyYXkoZXZlbnQpO1xuICAgICAgICBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhc2tFbGVtZW50RnJvbURPTShldmVudCk7XG4gICAgfTtcbiAgICBjb25zdCBpbnNlcnRUYXNrVGl0bGVJbnB1dEVsZW1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFoZWxwZXJGdW5jdGlvbnMuY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrU3ViY29udGVudEVsZW1lbnRGcm9tRE9NKGV2ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhc2tJbnB1dEVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgLy8gdmFyaWF0aW9uIGhlcmUgZG9uZVxuICAgICAgICAgICAgRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0VGFza0lucHV0RWxlbWVudFZhbHVlKGV2ZW50LCBpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgZXZlbnRBc3NpZ25lci5hZGRUYXNrVGl0bGVJbnB1dExpc3RlbmVyKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRhc2tUaXRsZSA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuY29kZSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAvLyB2YXJpYXRpb24gaGVyZSBkb25lXG4gICAgICAgICAgICBvYmplY3RDb250cm9sbGVyQWRkRWRpdE9iamVjdC5lZGl0VGFza09iamVjdEluZm8oZXZlbnQpO1xuICAgICAgICAgICAgLy8gdmFyaWF0aW9uIGhlcmVcbiAgICAgICAgICAgIERPTUNvbnRyb2xsZXJBZGRFZGl0Lmluc2VydFRhc2tUaXRsZUVsZW1lbnQoZXZlbnQpO1xuICAgICAgICAgICAgRE9NQ29udHJvbGxlclJlbW92ZS5yZW1vdmVUYXNrSW5wdXRFbGVtZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGFkZFRhYiwgaW5zZXJ0VGFiSW5wdXRFbGVtZW50LCB1cGRhdGVUYWIsIHJlbW92ZVRhYiwgc3dpdGNoVGFiLFxuICAgICAgICBuZXdUYXNrLCByZW1vdmVUYXNrLCBpbnNlcnRUYXNrVGl0bGVJbnB1dEVsZW1lbnQsIHVwZGF0ZVRhc2tUaXRsZSwgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGV2ZW50QnVuZGxlciB9OyIsImltcG9ydCB7IHRvRG9UYXNrIH0gZnJvbSBcIi4vb2JqZWN0cy90b2RvX3Rhc2tfb2JqZWN0XCI7XG5pbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzL2NoZWNrbGlzdF9vYmplY3RcIjtcbmltcG9ydCB7IGNoZWNrbGlzdFRhc2tPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzL2NoZWNrbGlzdF90YXNrX29iamVjdFwiO1xuaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvZGVzY3JpcHRpb25fY29tcG9uZW50XCI7XG5pbXBvcnQgeyBjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29tcGxldGVkX2NvbXBvbmVudFwiO1xuXG4vLyB0ZXN0aW5nIHRvZG8gdGFzayBvYmplY3RcbmltcG9ydCB7IHRpdGxlQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3RpdGxlX2NvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgZGVzY3JpcHRpb25CZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2Rlc2NyaXB0aW9uX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgZHVlRGF0ZUJlaGF2aW9yQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50cy9kdWVfZGF0ZV9jb21wb25lbnRcIjtcbmltcG9ydCB7IG5vdGVzQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL25vdGVzX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGFpbnNDaGVja2xpc3RCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgcGlubmVkQmVoYXZpb3JDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Bpbm5lZF9jb21wb25lbnRcIjtcblxuLy8gdGVzdGluZyBjaGVja2xpc3Qgb2JqZWN0XG4vLyBpbXBvcnQgeyBjaGVja2xpc3RPYmplY3QgfSBmcm9tIFwiLi9jaGVja2xpc3Rfb2JqZWN0XCI7XG5pbXBvcnQgeyBjb250YWluc0NoZWNrbGlzdFRhc2tCZWhhdmlvckNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29udGFpbnNfY2hlY2tsaXN0X3Rhc2tfY29tcG9uZW50XCI7XG5cbi8vIHRlc3RpbmcgdGFicyAoYXJyYXlzIHRoYXQgY29udGFpbiBtYW55IHRvIGRvIHRhc2tzKVxuaW1wb3J0IHsgdG9Eb1RhYiB9IGZyb20gXCIuL29iamVjdHMvdG9kb190YWJfb2JqZWN0XCI7XG5cbi8vIHRlc3RpbmcgbGlzdCB0aGF0IGNvbnRhaW4gZXZlcnl0aGluZ1xuaW1wb3J0IHsgdG9Eb0xpc3QgfSBmcm9tIFwiLi9vYmplY3RzL3RvZG9fbGlzdF9vYmplY3RcIjtcblxuLy8gdGVzdGluZyBmb3IgRE9NIGNvbnRyb2xsZXIgb2JqZWN0c1xuaW1wb3J0IHsgZXZlbnRCdW5kbGVyIH0gZnJvbSBcIi4vb2JqZWN0cy9ldmVudF9idW5kbGVyX29iamVjdFwiO1xuaW1wb3J0IHsgZXZlbnRBc3NpZ25lciB9IGZyb20gXCIuL29iamVjdHMvZXZlbnRfYXNzaWduZXJfb2JqZWN0XCI7XG5pbXBvcnQgeyBET01Db250cm9sbGVyQWRkRWRpdCB9IGZyb20gXCIuL29iamVjdHMvRE9NX2NvbnRyb2xsZXJfYWRkX2VkaXRcIjtcblxuLy8gbGV0IHRlc3QgPSBjaGVja2xpc3RUYXNrT2JqZWN0KFwiZGR0ZXN0XCIpO1xuLy8gY29uc29sZS5sb2codGVzdClcblxuLy8gY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBpZiAodGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpKSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBub3cgdHJ1ZVwiKVxuLy8gfSBlbHNlIHtcbi8vICAgICBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCksXCJ0aGlzIGlzIHN0aWxsIGZhbHNlXCIpXG4vLyB9XG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gY29uc29sZS5sb2codGVzdC50b2dnbGVDb21wbGV0ZWRTdGF0ZSgpKVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cblxuLy8gaWYgKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSkge1xuLy8gICAgIGNvbnNvbGUubG9nKHRlc3QuZ2V0Q29tcGxldGVkU3RhdGUoKSxcInRoaXMgaXMgbm93IHRydWVcIilcbi8vIH0gZWxzZSB7XG4vLyAgICAgY29uc29sZS5sb2codGVzdC5nZXRDb21wbGV0ZWRTdGF0ZSgpLFwidGhpcyBpcyBzdGlsbCBmYWxzZVwiKVxuLy8gfVxuXG4vLyBjb25zb2xlLmxvZyh0ZXN0LmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QpXG5cbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0VGFza0Rlc2NyaXB0aW9uKCkpXG4vLyB0ZXN0LnNldFRhc2tEZXNjcmlwdGlvbihcIndvd3dpZVwiKVxuLy8gY29uc29sZS5sb2codGVzdC5nZXRUYXNrRGVzY3JpcHRpb24oKSlcblxuLy8gbGV0IGltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIk1ha2UgQ2VyZWFsXCIsIFwicGFydCBvZiBicmVha2Zhc3QgcGxhblwiLCBcInRoaXMgbW9ybmluZ1wiLCBcIm1ha2Ugc3VyZSB0byBwdXQgbWlsayBiYWNrIGluIGZyaWRnZVwiKTtcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2spXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tUaXRsZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRGVzY3JpcHRpb24oKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza0R1ZURhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza05vdGVzKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFBpbm5lZFN0YXRlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENvbXBsZXRlZFN0YXRlKCkpXG5cbi8vIGltcG9ydGFudFRhc2suc2V0VGFza1RpdGxlKFwiTWFrZSBDaGlja2VuIEJyb3RoXCIpXG4vLyBpbXBvcnRhbnRUYXNrLnNldFRhc2tEZXNjcmlwdGlvbihcInJlcXVpcmVzIDEgY2hpY2tlbiBhbmQgMSBicm90aFwiKVxuLy8gaW1wb3J0YW50VGFzay5zZXRUYXNrRHVlRGF0ZShcImJlZm9yZSBJIGNhdWdodCB0aGlzIGNvbGRcIilcbi8vIGltcG9ydGFudFRhc2suc2V0VGFza05vdGVzKFwiZG9uJ3Qgc25lZXplIGludG8gcG90XCIpXG4vLyBpbXBvcnRhbnRUYXNrLnRvZ2dsZVBpbm5lZFN0YXRlKCk7XG4vLyBpbXBvcnRhbnRUYXNrLnRvZ2dsZUNvbXBsZXRlZFN0YXRlKCk7XG5cbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0VGFza1RpdGxlKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrRHVlRGF0ZSgpKVxuLy8gY29uc29sZS5sb2coaW1wb3J0YW50VGFzay5nZXRUYXNrTm90ZXMoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0UGlubmVkU3RhdGUoKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0Q29tcGxldGVkU3RhdGUoKSlcblxuLy8gaW1wb3J0YW50VGFzay5hZGRUYXNrKHRlc3QpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyhpbXBvcnRhbnRUYXNrLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbi8vIGNvbnNvbGUubG9nKGltcG9ydGFudFRhc2suZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tEZXNjcmlwdGlvbigpKVxuXG5sZXQgdGFiMSA9IHRvRG9UYWIoXCJEZWZhdWx0IHRlc3RcIilcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyB0YWIxLmFkZFRhc2soaW1wb3J0YW50VGFzaylcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldENoZWNrbGlzdFRhc2tzKCkpXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG4vLyBsZXQgYW5vdGhlckltcG9ydGFudFRhc2sgPSB0b0RvVGFzayhcIkNsZWFuIHBvdFwiLCBcInBhcnQgb2YgY2hvcmVzIHBsYW5cIiwgXCJ0aGlzIGFmdGVybm9vblwiLCBcIm1ha2Ugc3VyZSB0byB1c2Ugc29hcFwiKTtcbi8vIGNvbnNvbGUubG9nKHRhYjEpXG4vLyB0YWIxLmFkZFRhc2soYW5vdGhlckltcG9ydGFudFRhc2spXG4vLyBjb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygxKSlcbi8vIGNvbnNvbGUubG9nKHRhYjEuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDEpLmdldFRhc2tUaXRsZSgpKVxuXG50b0RvTGlzdC5hZGRUYXNrKHRhYjEpXG4vLyBjb25zb2xlLmxvZyh0b0RvTGlzdC5nZXRDaGVja2xpc3RUYXNrcygpKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApKVxuLy8gY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0U3BlY2lmaWNDaGVja2xpc3RUYXNrKDApLmdldFRhc2tUaXRsZSgpKVxuXG4vLyAvLyBET01Db250cm9sbGVyUmVtb3ZlLnJlbW92ZVRhYigwKTtcbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCkpXG5cbi8vIGxldCB0YWIyID0gdG9Eb1RhYihcImhlZSBoZWVcIilcbi8vIHRvRG9MaXN0LmFkZFRhc2sodGFiMilcbi8vIGNvbnNvbGUubG9nKHRvRG9MaXN0LmdldENoZWNrbGlzdFRhc2tzKCkpXG5cbmxldCB0YXNrMSA9IHRvRG9UYXNrKFwiTWFrZSBNb25leSBURVNUXCIsIFwiVGFzayBEdWUgRGF0ZVwiLCBcIlRhc2sgRGVzY3JpcHRpb25cIiwgXCJUYXNrIE5vdGVzXCIpO1xuY29uc29sZS5sb2codGFiMS5hZGRUYXNrKHRhc2sxKSlcblxuZXZlbnRBc3NpZ25lci5hZGROZXdUYWJMaXN0ZW5lcigpO1xuLy8gZXZlbnRBc3NpZ25lci5hZGRFZGl0VGFiTGlzdGVuZXIoKTtcbmV2ZW50QXNzaWduZXIuYWRkRWRpdFRhYkJ1dHRvbkxpc3RlbmVyKCk7XG5ldmVudEFzc2lnbmVyLmFkZFJlbW92ZVRhYkJ1dHRvbkxpc3RlbmVyRm9ySW5pdGlhbFRhYnMoKTtcblxuXG5cbmNvbnNvbGUubG9nKHRvRG9MaXN0KVxuY29uc29sZS5sb2codG9Eb0xpc3QuZ2V0Q2hlY2tsaXN0VGFza3MoKSlcbmNvbnNvbGUubG9nKHRvRG9MaXN0LmdldEN1cnJlbnRUYWJJbmRleCgpKVxuY29uc29sZS5sb2codGFiMS5nZXRDaGVja2xpc3RUYXNrcygpKVxuY29uc29sZS5sb2codGFiMS5nZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2soMCkpXG5jb25zb2xlLmxvZyh0YWIxLmdldFNwZWNpZmljQ2hlY2tsaXN0VGFzaygwKS5nZXRUYXNrVGl0bGUoKSlcblxuRE9NQ29udHJvbGxlckFkZEVkaXQuc2V0RGVmYXVsdEN1cnJlbnRUYWJET00oMClcblxuZXZlbnRBc3NpZ25lci5hZGRTd2l0Y2hUYWJMaXN0ZW5lckZvckluaXRpYWxUYWJzKClcblxuZXZlbnRBc3NpZ25lci5hZGROZXdUYXNrTGlzdGVuZXIoKTtcblxuZXZlbnRBc3NpZ25lci5hZGRSZW1vdmVUYXNrQnV0dG9uTGlzdGVuZXJGb3JJbml0aWFsVGFicygpO1xuXG5ldmVudEFzc2lnbmVyLmFkZEVkaXRUYXNrVGl0bGVMaXN0ZW5lckZvckluaXRpYWxUYXNrcygpOyJdLCJuYW1lcyI6WyJ0aXRsZUJlaGF2aW9yQ29tcG9uZW50Iiwib2JqZWN0IiwiaW5pdGlhbFRpdGxlIiwidGl0bGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRUYXNrVGl0bGUiLCJzZXRUYXNrVGl0bGUiLCJuZXdUaXRsZSIsImNvbnRhaW5zQ2hlY2tsaXN0VGFza0JlaGF2aW9yQ29tcG9uZW50IiwiY2hlY2tsaXN0IiwiYWRkVGFzayIsInRhc2siLCJwdXNoIiwibGVuZ3RoIiwicmVtb3ZlVGFzayIsImluZGV4IiwidW5kZWZpbmVkIiwiZ2V0Q2hlY2tsaXN0VGFza3MiLCJnZXRTcGVjaWZpY0NoZWNrbGlzdFRhc2siLCJ0b0RvVGFzayIsImR1ZURhdGUiLCJkZXNjcmlwdGlvbiIsIm5vdGVzIiwiaW5pdGlhbERlc2NyaXB0aW9uIiwiZ2V0VGFza0Rlc2NyaXB0aW9uIiwic2V0VGFza0Rlc2NyaXB0aW9uIiwibmV3RGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbkJlaGF2aW9yQ29tcG9uZW50IiwiaW5pdGlhbER1ZURhdGUiLCJnZXRUYXNrRHVlRGF0ZSIsInNldFRhc2tEdWVEYXRlIiwibmV3RHVlRGF0ZSIsImR1ZURhdGVCZWhhdmlvckNvbXBvbmVudCIsImluaXRpYWxOb3RlcyIsImdldFRhc2tOb3RlcyIsInNldFRhc2tOb3RlcyIsIm5ld05vdGVzIiwibm90ZXNCZWhhdmlvckNvbXBvbmVudCIsInBpbm5lZCIsInRvZ2dsZVBpbm5lZFN0YXRlIiwiZ2V0UGlubmVkU3RhdGUiLCJwaW5uZWRCZWhhdmlvckNvbXBvbmVudCIsImNvbXBsZXRlZCIsInRvZ2dsZUNvbXBsZXRlZFN0YXRlIiwiZ2V0Q29tcGxldGVkU3RhdGUiLCJjb21wbGV0ZWRCZWhhdmlvckNvbXBvbmVudCIsInRvRG9UYWIiLCJ0b0RvTGlzdCIsImN1cnJlbnRUYWIiLCJnZXRDdXJyZW50VGFiSW5kZXgiLCJzZXRDdXJyZW50VGFiSW5kZXgiLCJuZXdDdXJyZW50VGFiIiwiaGVscGVyRnVuY3Rpb25zIiwiZW5zdXJlQ29ycmVjdFRhYkVsZW1lbnQiLCJldmVudCIsInRhYkVsZW1lbnQiLCJ0YXJnZXQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiZW5zdXJlQ29ycmVjdFRhc2tFbGVtZW50IiwidGFza0VsZW1lbnQiLCJlbnN1cmVDb3JyZWN0U3ViY29udGFpbmVyIiwidGFza1N1YmNvbnRhaW5lciIsImNsYXNzTGlzdCIsIkFycmF5IiwiZnJvbSIsImluY2x1ZGVzIiwiZW5zdXJlQ29ycmVjdEJ1dHRvbkVsZW1lbnQiLCJidXR0b25FbGVtZW50IiwidGFnTmFtZSIsImNoZWNrRm9yVGFiSW5wdXRFbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjaGVja0lmV2FzQ3VycmVudFRhYiIsImNoZWNrSWZPbmx5T25lVGFiIiwidG9Eb1RhYlNlY3Rpb24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hlY2tGb3JUYXNrU3ViY29udGFpbmVySW5wdXRFbGVtZW50IiwiZ2V0VGFyZ2V0VGFza09iamVjdCIsImRhdGFzZXQiLCJ0YXNrSW5kZXgiLCJjdXJyZW50VGFiSW5kZXgiLCJnZXRCdXR0b25UeXBlIiwiYnV0dG9uQ2xhc3NMaXN0IiwiZ2V0U3ViY29udGFpbmVyVHlwZSIsIm9iamVjdENvbnRyb2xsZXJBZGRFZGl0T2JqZWN0IiwibmV3VGFiIiwidGFiSW5kZXgiLCJ2YWx1ZSIsInRhYkFycmF5IiwiZmlyc3RUYWIiLCJ0YWIiLCJuZXdUYXNrIiwidGFza09iamVjdCIsIm5ld1Rhc2tUaXRsZVZhbHVlIiwidGFza1N1YmNvbnRhaW5lclR5cGUiLCJET01Db250cm9sbGVyQWRkRWRpdCIsImFkZE5ld1RhYlRvRE9NIiwiYWRkVGFiQnV0dG9uIiwibmV3VGFiTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJuZXdUYWJPYmplY3RUaXRsZSIsImFkZCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiaW5zZXJ0QmVmb3JlIiwic2V0VGFiSW5wdXRFbGVtZW50VmFsdWUiLCJpbnB1dEVsZW1lbnQiLCJ0YWJOYW1lIiwiaW5zZXJ0VGFiSW5wdXRFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsImZvY3VzIiwiaW5zZXJ0VGFiTmFtZUVsZW1lbnQiLCJ0YWJCdXR0b24iLCJ0YWJCdXR0b25OYW1lIiwiYXBwZW5kQ2hpbGQiLCJzZXREZWZhdWx0Q3VycmVudFRhYkRPTSIsInNldEN1cnJlbnRUYWJET00iLCJzZXRGaXJzdFRhYlRvQ3VycmVudFRhYiIsImZpcnN0VGFiSW5kZXgiLCJhZGROZXdUYXNrVG9ET00iLCJuZXdUYXNrT2JqZWN0IiwidG9Eb0NvbnRlbnQiLCJuZXdUYXNrTm9kZSIsIm5ld1Rhc2tUaXRsZSIsIm5ld1Rhc2tEZXNjcmlwdGlvbiIsIm5ld1Rhc2tEdWVEYXRlIiwibmV3VGFza05vdGVzIiwiaW5zZXJ0VGFza0lucHV0RWxlbWVudCIsInNldFRhc2tJbnB1dEVsZW1lbnRWYWx1ZSIsInRhc2tTdWJjb250ZW50IiwiZ2V0VGFza0luZm8iLCJpbnNlcnRUYXNrVGl0bGVFbGVtZW50IiwidGFza1N1YmNvbnRlbnRFbGVtZW50IiwidGFza1RpdGxlIiwidGFza0R1ZURhdGUiLCJ0YXNrRGVzY3JpcHRpb24iLCJ0YXNrTm90ZXMiLCJldmVudEFzc2lnbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50QnVuZGxlciIsImFkZFRhYiIsInRhYkVkaXRCdXR0b25zIiwiYnV0dG9uIiwidXBkYXRlVGFiIiwidGFiUmVtb3ZlQnV0dG9ucyIsInJlbW92ZVRhYiIsInRhYlN3aXRjaEJ1dHRvbnMiLCJzd2l0Y2hUYWIiLCJ0YXNrUmVtb3ZlQnV0dG9ucyIsInRhc2tFZGl0VGl0bGVCdXR0b25zIiwiaW5zZXJ0VGFza1RpdGxlSW5wdXRFbGVtZW50IiwidXBkYXRlVGFza1RpdGxlIiwib2JqZWN0Q29udHJvbGxlclJlbW92ZU9iamVjdCIsIkRPTUNvbnRyb2xsZXJSZW1vdmUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUF0dHJpYnV0ZSIsIm5ld1RhYkluZGV4IiwiY29kZSIsIm5ld1Rhc2tJbmRleCIsInRhYjEiLCJ0YXNrMSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9